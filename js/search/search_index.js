var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AddSubscription.html",[0,0.881,1,2.671]],["body/interfaces/AddSubscription.html",[1,3.571,2,1.059,3,0.622,4,0.463,5,3.935,6,1.306,7,3.935,8,3.415,9,2.489,10,4.422,11,3.039,12,4.422,13,5.162,14,5.334,15,5.162,16,3.036,17,2.344,18,1.98,19,0.58,20,0.909,21,5.162,22,4.625,23,2.65,24,5.162,25,1.241,26,0.018,27,1.117,28,0.426,29,1.004,30,0.848,31,1.375,32,0.017,33,0.017]],["title/interfaces/BackendFactoryInput.html",[0,0.881,34,2.671]],["body/interfaces/BackendFactoryInput.html",[2,0.854,3,0.501,4,0.373,6,1.053,19,0.468,26,0.02,28,0.448,29,1.057,32,0.014,33,0.014,34,3.761,35,2.879,36,6.422,37,4.145,38,4.19,39,5.437,40,2.203,41,2.596,42,1.605,43,5.188,44,2.454,45,3.455,46,1.89,47,3.172,48,4.161,49,4.658,50,3.565,51,3.172,52,4.161,53,4.161,54,1.783,55,4.161,56,4.161,57,4.161,58,1.686,59,3.761,60,0.901,61,3.565,62,4.161,63,1.788,64,5.437,65,4.61,66,1.89,67,2.982,68,4.658,69,2.006,70,3.172,71,1.525,72,4.617,73,1.78,74,2.33,75,1.89,76,1.977,77,3.201,78,3.565,79,3.565,80,2.644,81,2.879,82,3.565,83,3.565,84,3.565]],["title/interfaces/BackendInput.html",[0,0.881,85,2.671]],["body/interfaces/BackendInput.html",[2,0.984,3,0.577,4,0.43,6,1.213,19,0.539,26,0.018,28,0.534,29,1.316,32,0.016,33,0.016,35,3.316,37,3.654,38,3.316,42,2.094,44,2.742,46,2.177,58,2.411,60,1.037,65,4.116,71,1.669,72,4.932,73,1.569,74,2.55,75,2.177,76,2.163,77,3.502,78,4.106,79,4.106,80,3.046,81,3.316,82,4.106,83,4.106,84,4.106,85,3.316,86,4.793,87,2.629,88,2.311,89,4.106,90,4.106,91,4.793,92,4.106,93,4.106]],["title/classes/Connection.html",[94,1.404,95,1.332]],["body/classes/Connection.html",[3,0.412,4,0.306,9,2.857,16,2.162,19,0.384,20,0.695,22,3.294,25,1.686,26,0.02,27,1.503,28,0.592,29,1.35,30,1.153,31,1.719,32,0.013,33,0.013,44,2.401,63,1.406,67,2.612,95,1.179,96,1.243,97,2.012,98,2.012,99,2.445,100,3.63,101,3.63,102,4.079,103,4.177,104,1.827,105,4.761,106,3.63,107,4.079,108,2.642,109,3.63,110,4.079,111,1.465,112,3.418,113,3.79,114,3.026,115,4.761,116,2.803,117,4.761,118,4.1,119,3.294,120,2.606,121,2.606,122,3.418,123,2.012,124,2.928,125,2.606,126,3.418,127,3.761,128,2.612,129,3.418,130,2.803,131,3.418,132,2.928,133,1.009,134,2.928,135,2.928,136,2.928,137,1.755,138,3.418,139,2.928,140,2.041,141,2.445,142,2.928,143,2.928]],["title/interfaces/ConnectionBase.html",[0,0.881,144,2.118]],["body/interfaces/ConnectionBase.html",[2,0.678,3,0.398,4,0.296,6,0.837,8,2.551,9,1.594,14,2.832,16,2.112,17,1.501,18,1.268,19,0.372,20,0.785,22,3.218,23,1.697,25,1.293,26,0.02,27,1.007,28,0.482,29,0.904,30,0.884,31,1.434,32,0.012,33,0.012,41,1.417,45,2.956,58,1.34,60,0.716,63,1.817,66,1.501,76,1.691,95,1.856,104,1.784,108,2.816,120,2.52,121,2.52,133,1.373,134,2.832,137,1.697,144,1.813,145,2.101,146,2.101,147,3.306,148,2.101,149,1.082,150,3.306,151,1.813,152,2.832,153,3.306,154,1.34,155,2.832,156,3.306,157,1.501,158,2.551,159,2.832,160,3.168,161,2.551,162,2.101,163,2.52,164,3.306,165,2.101,166,3.306,167,2.832,168,2.101,169,3.306,170,1.594,171,1.994,172,3.306,173,2.832,174,4.651,175,3.306,176,3.306,177,3.306,178,3.306,179,2.738,180,2.832,181,1.946,182,2.832,183,1.946,184,3.306,185,3.306,186,2.832,187,2.52,188,3.306,189,3.306,190,0.795,191,1.34,192,2.112,193,2.832,194,1.946,195,3.306,196,2.832,197,2.503,198,2.832,199,3.306,200,2.52,201,2.101,202,2.832,203,3.306,204,2.287,205,3.306,206,3.306,207,2.52,208,1.813,209,2.287,210,3.306,211,3.306,212,1.417,213,2.287,214,1.697,215,2.52,216,3.306,217,2.112,218,2.287,219,2.101,220,3.306,221,1.946,222,3.306,223,2.832,224,3.306,225,1.202,226,2.832,227,3.306,228,3.546,229,3.306,230,1.501,231,2.101,232,3.306,233,1.594,234,1.202,235,1.946,236,2.832,237,2.287,238,2.832,239,1.697,240,3.306,241,1.697,242,3.306,243,1.697,244,2.832,245,3.306,246,2.52,247,2.287,248,1.946,249,1.813,250,3.306,251,3.306]],["title/interfaces/Connector.html",[0,0.881,123,2.273]],["body/interfaces/Connector.html",[2,1.053,3,0.618,4,0.46,19,0.577,20,0.905,25,1.233,26,0.02,27,1.11,28,0.511,29,0.997,30,1.019,31,1.653,32,0.016,33,0.016,71,1.74,123,3.019,124,5.313,234,2.255,252,3.548,253,4.237,254,3.942,255,4.612,256,3.91,257,3.651,258,3.548]],["title/modules/DndModule.html",[87,2.118,259,2.454]],["body/modules/DndModule.html",[3,0.644,4,0.48,20,0.781,25,1.286,26,0.019,27,1.158,28,0.441,29,1.04,30,0.879,32,0.017,33,0.017,34,4.401,35,3.702,70,4.079,85,4.401,87,2.935,260,3.702,261,4.079,262,5.816,263,4.584,264,5.351,265,5.351,266,5.351]],["title/injectables/DndService.html",[154,1.565,267,2.671]],["body/injectables/DndService.html",[1,4.283,3,0.363,4,0.27,5,2.298,6,1.102,7,2.298,8,2.805,9,3.26,17,1.978,19,0.339,20,0.636,23,1.548,25,1.488,26,0.02,27,1.107,28,0.576,29,0.994,30,0.84,32,0.012,33,0.012,40,1.222,41,1.292,45,2.768,60,0.653,75,1.369,95,1.502,108,1.454,118,2.768,140,1.867,141,2.236,149,0.987,154,1.222,157,1.978,160,1.775,165,1.916,170,2.1,171,2.546,190,1.346,212,2.192,225,1.584,228,3.32,230,1.369,234,2.251,239,2.236,241,2.236,248,1.775,249,1.654,268,3.015,269,1.916,270,1.502,271,2.583,272,2.086,273,3.015,274,2.583,275,3.015,276,3.015,277,2.583,278,2.086,279,1.454,280,3.015,281,3.32,282,3.015,283,2.625,284,3.015,285,1.454,286,3.015,287,2.389,288,1.369,289,1.775,290,3.015,291,2.298,292,3.015,293,2.298,294,1.916,295,1.161,296,2.583,297,3.015,298,3.015,299,1.916,300,3.015,301,3.015,302,3.015,303,4.719,304,3.072,305,2.201,306,2.4,307,3.015,308,2.701,309,3.013,310,1.671,311,3.898,312,2.583,313,2.072,314,2.768,315,1.102,316,1.775,317,1.916,318,1.765,319,3.015,320,1.654,321,3.015,322,2.583,323,2.583,324,1.548,325,3.32,326,2.298,327,2.583,328,2.583,329,3.015,330,3.015,331,2.086,332,3.015,333,1.654,334,3.015,335,2.086,336,1.354,337,1.292,338,3.015,339,2.564,340,4.355,341,3.013,342,2.1,343,3.731,344,3.32,345,3.015,346,3.015,347,3.015,348,1.654]],["title/interfaces/DragLayer.html",[0,0.881,304,2.118]],["body/interfaces/DragLayer.html",[2,0.583,3,0.342,4,0.255,6,0.719,18,1.089,19,0.319,20,0.609,25,1.002,26,0.019,27,0.615,28,0.517,29,0.552,30,0.467,31,0.757,32,0.011,33,0.011,40,2.35,42,1.712,46,1.289,47,2.164,54,1.217,58,1.689,60,1.178,63,1.231,73,1.617,75,1.289,80,1.804,104,2.225,108,1.369,127,1.557,133,1.231,137,1.458,144,2.287,145,1.804,146,1.804,158,1.557,186,2.432,187,2.164,190,1.745,191,2.457,192,2.244,194,1.671,197,2.118,200,2.164,201,2.65,214,1.458,225,1.032,233,1.369,235,1.671,238,2.432,239,2.141,241,1.458,249,1.557,270,1.704,279,1.369,288,1.289,293,2.164,304,2.287,308,2.382,315,0.719,318,1.151,331,3.418,335,1.964,349,1.671,350,3.178,351,0.929,352,3.766,353,2.287,354,2.839,355,3.367,356,2.839,357,2.164,358,2.839,359,1.964,360,1.964,361,1.369,362,2.839,363,2.839,364,3.572,365,4.012,366,2.839,367,2.432,368,1.964,369,4.676,370,2.164,371,4.169,372,4.621,373,2.839,374,2.01,375,2.65,376,1.671,377,2.287,378,1.964,379,2.839,380,1.964,381,2.432,382,2.839,383,2.839,384,2.839,385,2.839,386,2.164,387,2.839,388,1.458,389,1.804,390,2.839,391,1.289,392,2.908,393,2.164,394,1.458,395,2.382,396,1.964,397,1.964,398,2.432,399,1.804,400,3.178,401,1.964,402,2.432,403,2.839,404,2.432,405,2.164,406,2.839,407,1.217,408,1.804,409,1.289,410,2.164,411,2.839,412,2.164,413,2.839,414,2.839,415,4.169,416,2.839,417,2.839,418,2.432,419,2.65,420,2.839,421,1.671,422,2.432,423,2.164,424,1.557,425,2.839,426,2.164,427,2.839,428,2.432,429,1.671,430,2.839,431,1.671,432,1.964,433,2.839,434,2.164,435,2.839,436,2.839,437,2.884,438,1.804,439,1.804,440,2.164,441,1.557,442,2.164,443,1.964,444,2.432,445,2.432,446,2.839,447,2.839,448,2.839,449,2.839,450,3.572,451,1.964,452,2.432,453,1.458,454,2.839]],["title/classes/DragLayerConnectionClass.html",[94,1.404,455,2.943]],["body/classes/DragLayerConnectionClass.html",[3,0.536,4,0.399,16,2.578,19,0.5,20,0.829,22,3.927,25,1.583,26,0.02,27,1.353,28,0.574,29,1.216,30,1.028,31,1.513,32,0.015,33,0.015,63,1.313,67,2.44,71,1.592,96,1.617,104,2.178,108,3.281,109,4.328,110,4.863,111,1.907,114,3.608,116,3.877,120,3.391,121,3.391,132,3.811,133,1.313,135,3.811,136,3.811,137,2.284,143,3.811,304,2.44,351,1.456,369,3.077,392,2.619,455,3.391,456,3.811,457,3.811,458,2.02,459,5.677,460,5.677,461,5.677,462,3.391,463,1.907,464,2.145]],["title/interfaces/DragLayerMonitor.html",[0,0.881,392,2.273]],["body/interfaces/DragLayerMonitor.html",[2,1.098,3,0.644,4,0.48,6,1.354,18,2.053,19,0.602,20,0.928,26,0.018,30,0.879,32,0.017,33,0.017,74,2.293,133,1.58,190,1.286,217,3.083,304,2.935,391,2.43,392,3.15,464,2.58,465,4.584,466,3.702,467,2.58,468,2.935,469,2.43,470,2.935,471,4.079,472,3.702]],["title/directives/DragPreviewDirective.html",[320,2.118,473,2.671]],["body/directives/DragPreviewDirective.html",[3,0.593,4,0.442,6,1.246,18,1.889,19,0.554,20,0.883,26,0.019,28,0.499,30,0.809,31,1.312,32,0.016,33,0.016,40,1.996,42,1.454,44,1.996,128,3.592,190,1.454,305,2.259,310,1.889,315,1.246,318,2.452,342,2.375,353,3.319,355,3.106,359,3.407,458,2.237,473,3.407,474,2.375,475,3.407,476,2.375,477,3.13,478,3.13,479,3.754,480,3.754,481,3.754,482,3.407,483,5.611,484,4.162,485,3.845]],["title/interfaces/DragPreviewOptions.html",[0,0.881,128,2.118]],["body/interfaces/DragPreviewOptions.html",[2,0.673,3,0.395,4,0.294,6,0.83,19,0.369,26,0.017,28,0.506,29,1.339,32,0.012,33,0.012,44,1.329,46,2.1,71,1.297,73,1.073,74,1.982,127,2.537,128,1.799,158,1.799,162,2.084,190,1.655,218,2.268,225,1.681,234,1.681,243,2.374,270,1.131,305,1.131,315,1.17,318,2.358,324,1.683,333,3.191,350,2.5,351,2.084,355,3.535,359,2.268,365,2.268,374,1.581,388,1.683,394,2.374,395,2.23,412,2.5,463,1.982,464,2.23,469,2.433,486,2.5,487,5.818,488,5.818,489,4.59,490,5.818,491,5.818,492,3.776,493,4.025,494,4.025,495,4.984,496,5.818,497,3.747,498,3.525,499,4.624,500,3.279,501,4.624,502,4.624,503,4.987,504,4.984,505,2.809,506,4.624,507,4.624,508,3.279,509,4.59,510,2.5,511,2.5,512,3.279,513,2.5,514,2.5,515,1.799,516,2.084,517,3.279,518,3.279,519,3.279,520,1.799,521,2.809,522,4.624,523,3.279,524,2.809,525,3.279,526,3.279,527,3.279,528,3.279,529,3.279,530,2.084,531,2.5,532,4.624,533,1.405,534,3.279,535,1.93,536,3.279,537,3.279,538,1.93,539,2.268,540,3.199,541,3.962]],["title/interfaces/DragSource.html",[0,0.881,305,1.332]],["body/interfaces/DragSource.html",[2,0.62,3,0.364,4,0.271,6,0.764,9,2.867,17,1.372,18,1.159,19,0.34,20,0.747,25,1.23,26,0.02,27,1.213,28,0.565,29,0.995,30,0.977,31,0.805,32,0.012,33,0.012,41,1.295,42,0.892,44,2.271,46,1.981,54,2.194,58,1.224,60,1.108,63,1.288,95,1.504,99,2.628,100,3.325,101,3.325,103,3.902,106,3.902,127,3.398,128,2.392,130,2.567,139,2.588,140,2.403,141,2.239,144,1.657,145,1.92,146,1.92,149,1.835,154,1.224,159,2.588,170,1.457,181,2.567,183,1.778,190,1.23,191,1.224,197,1.295,225,1.098,270,1.042,279,2.103,283,2.628,285,1.457,295,0.805,305,2.136,306,1.295,308,1.457,309,2.09,311,3.325,313,1.224,315,1.296,317,1.92,318,1.767,324,2.628,336,0.939,341,2.09,355,1.551,360,3.017,419,3.562,421,1.778,424,1.657,429,1.778,431,1.778,474,2.103,476,2.468,484,2.772,492,1.657,520,2.392,533,2.194,542,2.303,543,1.92,544,2.588,545,2.303,546,2.303,547,2.588,548,1.92,549,3.02,550,3.017,551,3.017,552,3.017,553,2.772,554,3.02,555,1.778,556,2.303,557,2.303,558,3.02,559,2.303,560,3.736,561,3.736,562,3.325,563,3.736,564,3.736,565,3.02,566,2.588,567,2.09,568,3.736,569,2.588,570,2.09,571,2.303,572,2.772,573,2.588,574,2.09,575,2.303,576,3.02,577,3.02,578,4.361,579,1.92,580,3.02,581,3.02,582,3.02,583,3.02,584,3.02,585,3.02,586,3.02,587,3.02,588,3.02,589,3.02,590,3.02,591,1.551]],["title/directives/DragSourceDirective.html",[320,2.118,592,2.671]],["body/directives/DragSourceDirective.html",[3,0.537,4,0.4,6,1.129,18,1.711,19,0.501,20,0.83,26,0.02,28,0.562,30,0.733,31,1.189,32,0.015,33,0.015,40,1.808,42,1.317,44,1.808,60,1.231,74,1.912,80,2.835,95,1.538,99,2.92,130,3.685,140,1.912,141,2.29,149,1.46,179,2.626,230,2.026,270,1.538,305,2.44,310,1.711,315,1.129,318,1.808,342,2.151,351,1.46,353,3.119,355,2.29,374,2.151,458,2.026,463,1.912,464,2.151,469,2.026,474,2.151,475,3.086,476,2.151,479,3.4,480,3.4,481,3.4,482,3.086,484,3.979,485,3.614,489,3.822,539,3.086,592,3.086,593,5.687,594,5.687,595,3.822,596,3.822,597,2.026,598,3.822,599,4.461,600,4.461,601,4.461]],["title/interfaces/DragSourceMonitor.html",[0,0.881,602,1.982]],["body/interfaces/DragSourceMonitor.html",[2,0.76,3,0.446,4,0.332,6,0.937,17,1.681,18,1.42,19,0.416,20,0.834,26,0.019,30,1.194,32,0.013,33,0.013,60,0.801,66,2.284,74,2.448,75,1.681,88,1.785,104,1.42,133,1.093,151,2.03,190,1.373,217,2.783,230,1.681,234,1.346,239,2.582,269,2.352,287,2.03,295,1.522,310,1.929,313,1.5,314,2.352,315,0.937,324,1.9,336,2.213,337,2.156,391,1.681,426,2.822,431,2.179,442,2.822,464,2.425,466,2.561,467,1.785,468,2.03,469,3.002,470,2.759,471,3.834,472,2.561,477,2.352,511,2.822,515,2.03,538,2.179,553,3.196,570,2.561,579,2.352,602,1.9,603,3.171,604,3.701,605,4.297,606,4.24,607,3.952,608,3.171,609,2.961,610,1.9,611,3.701,612,3.171,613,2.03,614,3.701,615,3.701,616,3.171,617,2.822,618,3.701,619,3.171,620,3.171,621,2.822,622,3.895,623,3.363,624,2.561,625,3.196,626,3.171,627,2.822,628,3.171,629,3.171,630,3.171,631,3.171,632,3.171,633,2.822,634,3.171,635,3.171,636,3.479,637,2.822,638,3.171]],["title/classes/DragSourceMonitorClass.html",[94,1.404,639,2.943]],["body/classes/DragSourceMonitorClass.html",[3,0.513,4,0.382,19,0.479,20,0.806,25,1.327,26,0.02,27,1.195,28,0.534,29,1.074,30,1.205,31,1.135,32,0.015,33,0.015,67,2.337,71,1.549,96,1.549,111,1.826,119,4.238,217,2.782,254,3.509,257,3.606,458,1.935,462,3.247,602,2.187,605,3.893,606,4.238,607,4.238,639,3.247,640,2.947,641,4.73,642,5.248,643,4.67,644,4.67,645,4.67,646,4.67,647,4.67,648,4.67,649,4.67,650,3.65,651,4.26]],["title/interfaces/DragSourceOptions.html",[0,0.881,130,2.273]],["body/interfaces/DragSourceOptions.html",[2,0.978,3,0.574,4,0.427,6,1.206,19,0.536,26,0.019,28,0.393,29,1.153,32,0.016,33,0.016,42,1.407,60,1.031,71,1.663,73,1.56,75,2.164,130,2.805,140,2.042,158,3.252,225,1.732,305,2.044,339,2.805,351,1.56,370,3.632,395,2.297,423,3.632,438,3.028,486,3.632,539,3.296,540,4.101,652,4.764,653,5.528,654,4.464,655,4.805,656,5.078,657,5.078,658,4.764,659,3.296,660,4.764,661,4.082,662,4.764,663,4.764,664,4.764,665,4.764,666,4.082,667,4.764,668,4.764]],["title/interfaces/DragSourceSpec.html",[0,0.881,313,1.565]],["body/interfaces/DragSourceSpec.html",[0,1.055,2,0.521,3,0.306,4,0.228,6,0.643,17,1.742,18,0.974,19,0.285,20,0.56,25,1.33,26,0.02,27,1.115,28,0.535,29,1.299,30,0.909,31,0.677,32,0.01,33,0.012,42,0.75,54,1.088,58,1.029,60,0.55,66,2.512,69,1.224,71,0.712,74,1.644,75,1.153,81,1.757,88,1.85,133,1.783,140,1.088,148,1.614,154,1.029,160,1.495,161,1.393,171,1.088,179,1.495,181,1.495,190,1.238,192,1.153,197,1.088,204,1.757,208,1.393,217,1.742,225,1.395,233,2.484,239,1.304,247,1.757,270,2.145,283,1.304,291,1.936,295,1.022,296,2.175,299,2.438,308,1.85,310,1.472,313,1.029,314,2.438,315,1.472,325,1.936,331,2.654,335,1.757,336,1.719,337,1.644,342,1.224,348,1.393,349,1.495,351,1.513,357,1.936,361,1.85,391,1.742,393,1.936,394,1.304,395,2.23,407,1.088,429,3.425,432,1.757,443,1.757,453,1.97,467,1.85,469,1.153,470,1.393,492,2.104,513,1.936,514,1.936,515,1.393,530,1.614,533,1.088,535,1.495,543,1.614,546,1.936,555,1.495,574,1.757,579,1.614,591,2.84,597,1.153,602,3.384,605,2.438,610,2.645,613,1.393,622,1.614,623,3.033,625,1.614,638,2.175,653,2.175,654,2.654,655,1.757,666,2.175,669,2.175,670,1.936,671,1.936,672,1.495,673,1.614,674,1.757,675,2.175,676,1.936,677,2.539,678,2.539,679,2.539,680,2.539,681,2.175,682,1.936,683,2.539,684,3.286,685,4.624,686,2.539,687,3.836,688,3.836,689,2.175,690,1.757,691,1.936,692,2.539,693,3.836,694,2.539,695,2.539,696,2.539,697,2.539,698,2.539,699,2.539,700,2.175,701,1.757,702,2.539,703,2.175,704,2.175,705,2.539,706,2.654,707,1.936,708,2.539,709,1.936,710,2.539,711,2.175,712,2.175,713,2.175,714,2.539,715,2.175,716,2.539,717,2.539,718,2.539,719,2.175,720,2.539,721,2.539,722,2.539,723,1.757,724,2.539,725,1.495,726,2.175,727,2.539,728,2.539,729,2.539,730,2.539,731,1.495,732,3.836,733,1.936,734,2.539,735,2.175,736,2.539,737,2.175,738,2.539,739,1.936,740,2.175,741,2.539,742,2.175,743,2.539,744,2.924,745,2.539,746,1.757,747,1.757,748,2.654,749,2.175,750,1.936,751,1.495,752,2.175,753,2.175,754,2.175,755,1.936,756,2.175]],["title/interfaces/DropTarget.html",[0,0.881,306,1.655]],["body/interfaces/DropTarget.html",[2,0.826,3,0.485,4,0.361,6,1.019,7,3.069,9,2.874,17,1.828,18,1.544,19,0.453,20,0.777,25,1.279,26,0.018,27,1.152,28,0.57,29,1.034,30,1.042,31,1.073,32,0.014,33,0.014,42,1.189,46,1.828,54,1.725,58,1.631,60,0.871,63,1.189,69,1.941,73,1.318,95,1.388,99,2.731,102,4.558,103,4.543,104,1.544,107,4.558,118,3.381,127,3.269,142,3.449,144,2.208,145,2.558,146,2.558,149,1.951,154,1.631,157,1.828,181,2.37,183,2.37,190,0.967,191,1.631,197,2.28,279,1.941,283,2.067,285,1.941,295,1.588,305,1.835,306,2.554,309,2.785,316,2.37,317,2.558,318,2.156,324,3.059,336,1.852,341,2.785,421,2.37,429,2.37,474,1.941,476,2.565,520,2.208,533,2.28,548,2.558,550,2.785,551,2.785,552,2.785,553,2.558,560,3.449,561,3.449,562,3.069,563,3.449,564,3.449,566,3.449,567,2.785,568,4.558,569,3.449,570,2.785,571,3.069,572,2.558,613,2.208,731,2.37,757,4.025]],["title/directives/DropTargetDirective.html",[320,2.118,758,2.943]],["body/directives/DropTargetDirective.html",[3,0.534,4,0.398,6,1.123,11,3.336,18,1.702,19,0.499,20,0.827,25,1.066,26,0.019,27,0.96,28,0.561,29,0.863,30,0.931,31,1.51,32,0.015,33,0.015,60,0.96,80,2.819,95,1.53,99,2.909,109,4.32,118,4.181,149,1.452,179,2.611,230,2.015,270,1.53,295,1.182,306,2.98,318,1.798,405,4.32,458,2.015,474,2.139,475,3.069,476,2.139,479,3.382,480,3.382,481,3.382,482,3.069,484,3.968,485,3.601,595,3.8,596,3.8,597,2.015,598,3.8,758,3.382,759,6.58,760,6.58,761,5.667,762,5.667,763,4.855,764,5.667,765,5.667,766,4.436,767,3.382]],["title/interfaces/DropTargetMonitor.html",[0,0.881,768,1.982]],["body/interfaces/DropTargetMonitor.html",[2,0.765,3,0.449,4,0.334,6,0.943,17,1.693,18,1.43,19,0.419,20,0.837,25,0.896,26,0.019,27,0.807,28,0.473,29,0.725,30,1.188,32,0.013,33,0.013,44,1.51,60,0.807,66,1.693,74,2.457,75,2.295,88,1.797,104,1.43,133,1.1,190,1.214,219,3.211,221,3.618,234,1.355,239,2.594,287,2.044,295,1.638,310,1.938,311,2.841,314,2.369,324,1.914,336,2.26,337,2.166,342,1.797,391,1.693,394,1.914,407,1.598,431,2.194,464,2.437,466,2.578,467,1.797,468,2.044,469,3.008,470,2.772,471,3.852,472,2.578,477,2.369,511,2.841,520,2.044,553,3.211,570,2.578,579,2.369,606,4.252,607,3.966,608,3.193,609,2.194,621,2.841,622,3.906,624,2.578,625,3.211,626,3.193,627,2.841,628,3.193,629,4.329,630,3.193,631,3.193,632,3.193,633,4.37,634,3.193,635,3.193,636,2.578,637,3.852,725,2.194,768,1.914,769,3.193,770,3.727,771,3.193,772,5.053,773,3.727,774,2.841,775,2.841,776,3.193,777,3.193,778,2.841,779,3.727]],["title/classes/DropTargetMonitorClass.html",[94,1.404,780,2.943]],["body/classes/DropTargetMonitorClass.html",[3,0.491,4,0.366,19,0.458,20,0.783,25,1.441,26,0.02,27,1.298,28,0.546,29,1.166,30,1.197,31,1.086,32,0.014,33,0.014,44,1.652,67,2.236,71,1.505,74,2.57,96,1.482,111,1.747,119,4.148,219,3.409,221,3.53,254,3.409,257,3.53,310,2.058,351,1.334,458,1.851,462,3.108,463,1.747,464,1.966,606,4.148,607,4.148,641,4.596,643,4.571,644,4.571,645,4.571,646,4.571,647,4.571,648,4.571,649,4.571,650,3.492,768,2.093,771,3.492,776,3.492,780,3.108,781,2.82,782,5.996,783,4.076]],["title/interfaces/DropTargetSpec.html",[0,0.881,157,1.753]],["body/interfaces/DropTargetSpec.html",[2,0.712,3,0.418,4,0.311,6,0.878,17,2.708,19,0.39,20,0.702,25,1.505,26,0.018,27,1.195,28,0.517,29,1.338,30,0.98,31,1.282,32,0.013,33,0.013,60,0.751,66,2.185,69,2.32,73,1.136,74,1.487,75,2.185,81,3.328,88,2.32,133,1.631,148,2.205,151,1.903,154,1.406,157,1.576,160,2.043,161,2.639,165,2.205,171,1.487,179,2.043,190,0.834,192,1.576,208,1.903,221,3.251,223,2.973,225,1.262,233,1.673,239,2.835,247,2.401,270,1.905,295,1.727,299,2.205,308,2.876,310,1.846,313,1.95,314,2.205,315,1.218,325,2.645,336,2.066,337,1.487,351,1.136,361,2.32,364,2.973,377,1.903,391,1.576,401,2.401,407,1.487,438,2.205,453,1.781,464,1.673,467,1.673,469,1.576,472,2.401,478,2.205,513,2.645,520,1.903,553,2.205,597,1.576,609,2.043,610,2.47,622,2.205,623,2.043,624,2.401,625,2.205,633,3.668,637,2.645,670,2.645,671,2.645,672,2.043,673,3.058,674,2.401,701,3.821,719,2.973,747,2.401,748,3.328,749,2.973,750,2.645,751,2.043,752,2.973,753,2.973,754,2.973,755,2.645,756,2.973,768,3.479,784,2.973,785,3.47,786,2.973,787,3.47,788,3.47,789,2.401,790,2.973,791,2.973,792,3.47,793,3.47,794,3.47,795,3.47,796,3.47,797,3.47,798,2.973,799,3.47,800,3.47,801,2.973]],["title/interfaces/FactoryArgs.html",[0,0.881,113,2.671]],["body/interfaces/FactoryArgs.html",[2,1.066,3,0.626,4,0.466,19,0.584,26,0.019,28,0.574,32,0.017,33,0.017,63,2.177,71,1.753,97,3.058,98,3.058,113,3.594,802,6.704,803,6.704,804,6.704,805,6.704]],["title/interfaces/MonitorBase.html",[0,0.881,468,2.118]],["body/interfaces/MonitorBase.html",[2,0.763,3,0.448,4,0.333,6,0.941,19,0.418,20,0.836,26,0.02,28,0.307,30,1.194,32,0.013,33,0.013,96,1.352,133,1.098,140,1.594,141,1.909,149,1.651,181,2.189,190,1.213,234,2.642,278,2.573,308,3.435,313,1.507,315,0.941,318,2.044,377,2.767,394,3.476,395,3.367,396,2.573,399,3.206,400,4.893,468,2.04,470,2.04,497,3.779,498,4.681,643,4.365,644,4.365,645,4.365,646,4.365,647,4.365,648,4.365,649,4.365,806,3.186,807,3.186,808,6.419,809,5.26,810,3.718,811,5.045,812,4.905,813,3.718,814,2.835,815,5.045,816,3.718,817,3.186]],["title/interfaces/Offset.html",[0,0.881,497,2.273]],["body/interfaces/Offset.html",[2,1.08,3,0.634,4,0.472,6,1.332,19,0.592,26,0.019,28,0.556,32,0.017,33,0.017,71,1.767,88,2.538,445,5.775,492,3.832,497,3.098,818,4.012,819,4.012,820,5.263,821,5.263,822,5.985,823,5.985]],["title/classes/Reconnector.html",[94,1.404,824,2.943]],["body/classes/Reconnector.html",[3,0.572,4,0.426,19,0.534,25,1.142,26,0.02,27,1.028,28,0.572,29,1.395,31,1.266,32,0.016,33,0.016,44,2.398,63,1.403,71,1.66,96,1.727,108,2.291,111,2.036,127,3.535,187,4.511,234,1.727,255,4.093,258,4.458,344,4.511,351,1.937,463,2.536,824,3.621,825,4.07,826,5.917,827,4.75,828,4.75,829,4.75,830,4.75]],["title/classes/Source.html",[94,1.404,315,0.977]],["body/classes/Source.html",[3,0.554,4,0.413,19,0.517,20,0.846,25,1.603,26,0.02,27,1.375,28,0.55,29,1.235,30,1.13,31,1.545,32,0.015,33,0.015,63,1.358,96,1.673,111,1.972,116,3.925,125,3.507,133,1.712,171,1.972,217,2.634,305,1.587,313,2.35,315,1.164,458,2.089,591,3.261,602,2.978,605,4.036,623,3.739,642,4.969,767,4.421,831,3.507,832,4.969,833,3.942,834,4.601,835,4.601,836,3.942]],["title/classes/SourceConnector.html",[94,1.404,837,2.943]],["body/classes/SourceConnector.html",[3,0.572,4,0.426,19,0.534,20,0.864,25,1.422,26,0.02,27,1.281,28,0.531,29,1.15,30,0.972,31,1.577,32,0.016,33,0.016,42,1.903,71,1.66,96,1.727,111,2.036,123,2.796,234,2.151,252,3.286,253,3.76,254,3.76,255,4.458,256,3.621,257,3.483,258,3.286,303,5.393,305,1.638,351,1.555,458,2.157,463,2.036,483,4.07,837,3.621,838,4.07,839,4.75,840,4.75,841,4.75]],["title/interfaces/SourceConstructor.html",[0,0.881,842,2.671]],["body/interfaces/SourceConstructor.html",[2,1.185,3,0.695,4,0.518,26,0.018,32,0.018,33,0.018,97,3.398,98,3.398,842,3.994]],["title/classes/Target.html",[94,1.404,295,1.029]],["body/classes/Target.html",[3,0.556,4,0.414,19,0.519,20,0.848,25,1.604,26,0.02,27,1.377,28,0.55,29,1.237,30,1.131,31,1.695,32,0.015,33,0.015,63,1.362,96,1.678,111,1.978,116,3.929,125,3.517,133,1.878,157,2.639,161,3.488,171,1.978,221,3.744,295,1.229,306,1.978,336,1.977,458,2.095,767,4.429,768,2.983,832,4.978,833,3.953,836,3.953,843,3.517,844,5.81,845,4.614]],["title/classes/TargetConnector.html",[94,1.404,846,2.943]],["body/classes/TargetConnector.html",[3,0.576,4,0.428,19,0.537,20,0.867,25,1.427,26,0.02,27,1.285,28,0.533,29,1.155,30,0.976,31,1.582,32,0.016,33,0.016,42,1.908,71,1.666,96,1.737,111,2.048,123,2.813,234,2.159,253,3.774,254,3.774,255,4.47,256,3.643,257,3.496,258,3.306,303,5.401,306,2.048,351,1.564,458,2.17,463,2.048,838,4.094,846,3.643,847,3.643,848,4.779,849,4.779]],["title/interfaces/TargetConstructor.html",[0,0.881,850,2.671]],["body/interfaces/TargetConstructor.html",[2,1.185,3,0.695,4,0.518,26,0.018,32,0.018,33,0.018,97,3.398,98,3.398,850,3.994]],["title/changelog.html",[396,2.264,851,2.803,852,3.272]],["body/changelog.html",[4,0.374,11,4.159,16,1.894,26,0.014,32,0.014,33,0.014,73,1.366,170,2.012,192,1.894,204,2.886,288,3.164,289,4.101,361,2.012,474,2.012,610,3.577,853,4.172,854,4.172,855,4.172,856,3.574,857,4.172,858,3.574,859,3.574,860,4.172,861,3.574,862,6.839,863,6.428,864,4.172,865,6.967,866,4.82,867,4.172,868,6.428,869,5.446,870,4.666,871,5.446,872,5.446,873,4.172,874,4.172,875,4.172,876,4.172,877,4.172,878,3.574,879,3.574,880,4.172,881,3.574,882,4.172,883,3.574,884,4.172,885,4.172,886,4.172,887,6.064,888,4.172,889,4.172,890,4.172,891,4.172,892,6.064,893,4.172,894,4.172,895,4.172,896,4.172,897,4.172]],["title/coverage.html",[898,4.433]],["body/coverage.html",[0,1.615,1,1.721,4,0.223,5,2.88,26,0.02,28,0.205,32,0.01,33,0.01,34,1.721,35,2.613,41,1.066,63,1.963,85,1.721,94,2.301,95,0.858,97,3.398,98,3.398,113,1.721,123,1.465,128,1.365,130,1.465,144,1.365,145,3.241,146,3.241,154,1.008,157,1.13,207,1.897,231,4.226,252,3.159,257,1.465,267,1.721,295,1.007,304,1.365,305,0.858,306,1.066,313,1.008,315,0.956,320,2.505,369,1.721,392,1.465,455,1.897,456,2.132,457,2.132,465,2.132,466,3.159,468,1.365,473,1.721,475,3.159,486,2.88,494,5.063,497,1.465,592,1.721,602,1.277,603,2.132,639,1.897,640,3.528,669,2.132,670,2.88,758,1.897,768,1.277,769,2.132,780,1.897,781,3.159,784,2.132,806,2.132,807,2.132,818,1.897,819,1.897,824,1.897,825,2.132,831,2.88,837,1.897,842,1.721,843,2.88,846,1.897,847,2.88,850,1.721,898,2.132,899,1.721,900,2.488,901,6.166,902,5.483,903,5.099,904,5.099,905,2.488,906,2.488,907,2.488,908,2.488,909,2.488,910,2.488,911,2.488,912,3.778,913,3.778,914,2.488,915,4.567,916,7.045,917,2.132,918,2.132,919,2.488,920,2.132,921,3.778,922,2.132,923,3.778,924,2.132,925,2.132,926,2.132,927,2.132,928,2.132,929,2.132,930,2.132,931,2.132,932,2.132,933,3.236,934,2.132,935,2.132,936,2.132,937,2.132,938,2.488,939,5.139,940,2.132,941,5.998,942,2.132,943,2.132,944,2.132,945,2.132,946,1.897,947,2.132,948,2.132,949,2.132,950,2.132,951,2.132,952,2.132,953,2.488,954,2.488]],["title/dependencies.html",[866,2.264,955,3.956]],["body/dependencies.html",[8,2.955,26,0.02,32,0.017,33,0.017,76,1.959,77,3.171,879,4.615,955,5.471,956,5.387,957,5.387,958,5.387,959,5.387,960,6.387,961,4.106,962,5.387,963,5.387,964,5.387]],["title/miscellaneous/functions.html",[441,2.533,965,1.926]],["body/miscellaneous/functions.html",[19,0.391,25,1.706,26,0.019,27,1.537,28,0.594,29,1.381,30,0.909,32,0.013,33,0.013,42,1.915,67,3.558,74,2.065,114,3.794,116,3.991,140,2.065,157,2.188,171,2.065,207,3.673,252,2.406,295,1.284,305,1.662,306,2.065,313,1.953,315,1.22,441,1.907,602,1.785,640,2.406,768,1.785,781,2.406,831,2.651,843,2.651,847,2.651,920,4.128,922,4.128,924,4.128,927,4.128,928,4.128,929,4.128,931,2.979,932,4.128,933,4.128,934,4.128,935,4.128,936,4.128,937,4.128,948,2.979,949,4.128,950,2.979,951,4.128,952,2.979,965,2.047,966,3.477,967,3.477,968,3.477,969,3.477,970,2.979,971,3.477,972,3.477,973,2.979,974,3.477,975,4.818,976,3.477,977,3.477,978,4.818,979,3.477,980,4.818,981,3.477,982,3.477,983,3.477,984,3.477,985,3.477,986,3.477,987,3.477,988,3.477,989,4.818,990,3.477,991,3.477,992,3.477,993,3.477,994,4.818,995,3.477]],["title/index.html",[19,0.368,396,2.264,851,2.803]],["body/index.html",[2,0.514,4,0.224,16,1.137,26,0.01,32,0.01,33,0.01,38,2.626,40,1.538,42,1.51,47,1.908,54,1.627,58,1.014,60,0.992,69,1.83,73,0.82,76,2.564,77,2.698,90,2.145,96,0.91,116,1.474,137,1.285,149,0.82,158,1.373,161,1.373,179,2.234,190,1.229,194,1.474,197,1.073,201,1.591,208,1.373,212,2.854,213,1.732,214,2.626,225,0.91,230,1.724,233,2.467,243,1.285,248,1.474,269,2.412,270,0.863,272,1.732,285,1.207,288,2.879,289,2.234,295,0.667,327,2.145,331,2.626,335,1.732,336,1.59,339,2.234,349,2.698,350,1.908,353,2.514,361,2.21,368,1.732,376,1.474,386,1.908,388,1.949,397,1.732,398,3.252,407,1.627,408,2.913,424,1.373,432,1.732,439,1.591,440,1.908,470,1.373,493,1.732,504,2.145,510,1.908,514,1.908,515,1.373,530,1.591,531,1.908,533,1.627,538,2.234,544,2.145,562,1.908,597,2.73,610,1.285,613,2.082,625,1.591,672,1.474,676,1.908,681,2.145,682,1.908,689,2.145,690,1.732,691,1.908,704,2.145,725,2.234,731,1.474,737,3.252,739,1.908,746,1.732,747,2.626,748,1.732,755,1.908,777,2.145,789,1.732,798,2.145,801,2.145,866,1.732,870,2.145,881,2.145,899,2.626,996,2.504,997,3.927,998,3.795,999,2.504,1000,2.504,1001,2.504,1002,2.504,1003,3.9,1004,2.145,1005,1.908,1006,2.504,1007,1.908,1008,2.626,1009,2.504,1010,2.504,1011,2.504,1012,2.504,1013,1.908,1014,2.504,1015,2.504,1016,2.145,1017,2.504,1018,2.504,1019,2.504,1020,2.504,1021,2.504,1022,2.145,1023,2.145,1024,2.504,1025,1.908,1026,2.504,1027,2.504,1028,2.145,1029,2.504,1030,2.504,1031,2.504,1032,1.591,1033,2.504,1034,2.504,1035,2.504,1036,2.145,1037,2.504,1038,2.145,1039,1.908,1040,2.504,1041,2.504,1042,2.145,1043,2.504,1044,2.504,1045,3.795,1046,2.504,1047,1.908,1048,2.504,1049,2.504,1050,2.145,1051,2.893,1052,2.145,1053,3.252,1054,2.504,1055,2.504,1056,2.145,1057,2.504,1058,2.504,1059,1.908,1060,2.504,1061,2.145,1062,2.145,1063,2.504,1064,2.504,1065,2.504,1066,2.504,1067,2.504,1068,2.504,1069,2.504,1070,2.145,1071,2.504,1072,2.504,1073,1.908,1074,2.504,1075,2.504,1076,2.504,1077,2.145,1078,2.145,1079,2.504,1080,2.504,1081,2.504,1082,2.504,1083,2.504,1084,2.504,1085,2.504,1086,2.504,1087,2.504,1088,2.145,1089,2.504,1090,2.504,1091,2.504,1092,2.504,1093,2.504,1094,2.504,1095,2.504,1096,2.504,1097,2.504,1098,2.504,1099,2.504,1100,1.732,1101,1.908,1102,2.504,1103,2.504,1104,2.626,1105,2.504,1106,2.504,1107,2.504,1108,1.908,1109,1.908,1110,4.584,1111,3.795,1112,2.504,1113,2.504,1114,2.504,1115,2.504,1116,1.908,1117,2.504,1118,2.504,1119,2.504,1120,2.504,1121,3.795,1122,2.504,1123,2.504,1124,2.504,1125,2.504,1126,2.145,1127,2.504,1128,2.504,1129,1.732,1130,2.504,1131,2.504,1132,5.115,1133,2.145,1134,2.145,1135,2.504,1136,2.504,1137,2.504,1138,2.504,1139,2.504,1140,2.504,1141,2.145,1142,2.504,1143,2.504,1144,2.504,1145,2.504,1146,2.145,1147,1.908,1148,3.927,1149,2.504,1150,3.252,1151,2.504]],["title/modules.html",[260,3.58]],["body/modules.html",[26,0.018,32,0.018,33,0.018,87,3.201,260,4.037,1152,5]],["title/overview.html",[1153,4.433]],["body/overview.html",[2,1.164,26,0.018,32,0.018,33,0.018,96,2.062,259,3.604,267,3.924,333,3.611,474,2.735,1153,4.859,1154,3.604,1155,5.671,1156,5.671]],["title/properties.html",[71,1.295,866,2.264]],["body/properties.html",[6,1.35,11,3.139,26,0.02,32,0.017,33,0.017,71,1.496,76,2.606,190,1.526,212,2.286,288,2.422,336,1.973,597,2.883,861,4.569,1148,4.569,1150,4.569,1157,5.333,1158,5.333,1159,5.333,1160,5.333,1161,5.333]],["title/miscellaneous/typealiases.html",[965,1.926,1162,4.618]],["body/miscellaneous/typealiases.html",[19,0.564,26,0.019,28,0.414,32,0.016,33,0.016,46,2.278,63,2.03,118,3.889,140,2.947,141,3.53,170,2.951,336,1.559,337,2.15,818,3.825,819,4.665,965,2.953,1100,4.234,1163,5.017,1164,6.119,1165,7.049,1166,6.119,1167,6.119,1168,6.119,1169,5.017,1170,5.017]],["title/miscellaneous/variables.html",[965,1.926,1171,3.956]],["body/miscellaneous/variables.html",[19,0.385,26,0.02,28,0.489,32,0.013,33,0.013,41,2.767,42,1.906,44,1.932,46,1.556,50,2.935,60,1.284,65,2.37,68,2.935,72,2.611,73,1.121,76,2.526,77,4.2,95,1.645,97,2.017,98,3.229,114,3.03,141,2.448,158,1.879,165,2.177,197,1.468,234,1.246,295,0.913,315,0.867,351,2.318,426,2.611,463,3.035,464,2.645,640,2.37,774,4.181,781,2.37,789,4.582,842,2.37,850,2.37,917,4.085,918,4.085,925,4.085,926,4.085,930,4.085,939,2.935,940,4.085,942,4.085,943,4.085,944,4.085,945,4.085,946,3.635,947,4.085,965,2.017,970,4.085,973,2.935,1104,2.37,1171,2.935,1172,6.623,1173,4.768,1174,5.485,1175,5.53,1176,6.455,1177,5.485,1178,2.611,1179,3.426,1180,3.426,1181,4.768,1182,3.426,1183,3.426,1184,3.426,1185,3.426,1186,2.935,1187,2.935,1188,3.426]],["title/additional-documentation/quickstart.html",[409,1.486,1007,2.494,1189,1.68]],["body/additional-documentation/quickstart.html",[2,0.453,10,1.892,11,1.3,12,1.892,16,1.003,26,0.02,28,0.284,32,0.009,33,0.011,38,2.384,40,1.94,41,0.946,42,2.028,43,1.892,46,1.003,49,3.631,54,0.946,58,1.396,59,2.384,60,1.036,63,1.533,65,1.528,66,1.565,70,1.683,71,0.619,73,0.723,76,2.09,87,2.626,88,1.065,89,3.631,92,1.892,93,2.952,94,0.803,96,0.803,104,0.847,119,1.528,127,2.325,133,1.017,141,1.134,149,1.567,158,2.848,161,1.211,162,1.403,163,1.683,168,1.403,170,1.065,171,0.946,190,1.53,191,1.396,192,1.003,194,1.3,197,1.477,212,2.226,214,2.176,233,1.065,234,0.803,243,1.134,248,2.029,253,1.403,259,2.693,260,1.528,262,1.892,270,1.462,277,1.892,283,1.134,285,1.662,287,1.211,288,2.358,289,2.029,294,3.653,295,0.588,299,1.403,308,1.662,310,0.847,315,1.212,318,0.895,326,1.683,336,1.614,337,0.946,339,1.3,348,1.211,351,1.387,353,3.153,355,1.769,368,1.528,370,1.683,372,1.683,374,2.044,376,1.3,378,1.528,386,1.683,388,2.825,389,3.043,391,1.003,408,2.693,421,2.495,424,1.89,437,2.384,440,2.627,441,1.211,451,2.932,453,1.769,463,0.946,469,1.003,470,1.211,476,1.662,493,1.528,494,1.528,515,1.89,516,1.403,530,1.403,533,2.052,535,1.3,538,1.3,539,2.932,547,1.892,548,1.403,550,1.528,572,1.403,597,1.565,605,1.403,609,1.3,610,1.134,623,1.3,636,2.384,661,1.892,673,1.403,674,1.528,676,1.683,703,1.892,725,1.3,740,1.892,750,1.683,789,1.528,817,1.892,899,1.528,1004,1.892,1005,1.683,1008,1.528,1016,1.892,1022,1.892,1036,1.892,1061,1.892,1088,1.892,1101,1.683,1104,2.384,1129,1.528,1147,1.683,1152,2.952,1154,2.19,1190,2.208,1191,1.683,1192,2.208,1193,5.193,1194,1.892,1195,3.446,1196,2.952,1197,3.631,1198,2.208,1199,1.892,1200,2.208,1201,2.208,1202,3.3,1203,2.208,1204,2.208,1205,1.683,1206,1.528,1207,1.892,1208,3.446,1209,2.495,1210,3.446,1211,2.208,1212,1.892,1213,2.208,1214,2.208,1215,2.208,1216,2.208,1217,2.208,1218,1.892,1219,1.528,1220,2.952,1221,1.892,1222,1.892,1223,1.528,1224,1.528,1225,2.208,1226,2.208,1227,2.208,1228,1.892,1229,3.446,1230,2.208,1231,2.208,1232,2.952,1233,2.208,1234,2.208,1235,1.683,1236,2.208,1237,1.892,1238,2.208,1239,2.208,1240,2.208,1241,2.208,1242,1.683,1243,1.892,1244,2.208,1245,2.208,1246,3.446,1247,3.446,1248,2.208,1249,3.446,1250,2.208,1251,3.446,1252,2.208,1253,2.208,1254,3.446,1255,2.208,1256,2.208,1257,2.208,1258,2.208,1259,2.208,1260,2.208,1261,2.208,1262,2.208,1263,2.208,1264,2.208,1265,2.208,1266,2.208,1267,2.208,1268,2.208,1269,2.208,1270,1.683,1271,2.208,1272,2.952,1273,1.892,1274,2.208,1275,2.208,1276,2.208,1277,2.208,1278,2.208,1279,2.208,1280,3.446,1281,1.892,1282,1.892,1283,2.208,1284,2.208,1285,1.892,1286,2.952,1287,2.208,1288,2.208,1289,1.892,1290,2.208,1291,1.892,1292,2.208,1293,2.208]],["title/additional-documentation/guide.html",[409,1.486,1189,1.68,1224,2.264]],["body/additional-documentation/guide.html",[17,2.344,20,0.753,26,0.017,32,0.017,33,0.017,40,2.092,45,3.281,60,1.348,76,1.877,95,2.147,99,2.65,104,2.389,149,2.038,191,2.523,192,2.344,241,2.65,279,2.489,281,3.935,288,2.344,316,3.039,333,2.831,375,3.281,376,3.039,442,3.935,474,2.489,477,3.281,478,3.281,548,3.281,1223,3.571,1294,3.571,1295,3.571,1296,4.422,1297,3.281,1298,5.162,1299,5.162,1300,3.571,1301,5.162]],["title/additional-documentation/guide/1.-creating-connections.html",[333,1.375,409,1.139,1189,1.287,1294,1.734,1295,1.734]],["body/additional-documentation/guide/1.-creating-connections.html",[8,2.354,9,2.675,16,1.341,20,0.626,23,1.517,26,0.02,28,0.244,32,0.011,33,0.011,40,2.048,41,1.266,54,1.266,60,0.929,63,0.872,69,1.424,73,0.967,76,1.56,95,2.12,104,1.939,108,2.069,133,0.872,144,1.62,149,1.816,154,2.388,157,1.341,170,2.069,171,1.266,182,3.677,190,1.031,192,1.949,197,2.526,225,1.074,228,2.252,231,1.877,233,1.424,235,1.739,241,3.025,243,2.203,249,2.354,270,2.241,271,2.531,272,2.044,274,2.531,278,2.044,279,2.964,283,2.203,285,1.424,291,2.252,293,3.271,294,1.877,295,1.347,304,1.62,305,1.48,306,1.839,310,1.646,313,1.197,315,1.279,316,1.739,336,0.918,337,1.266,343,2.531,348,1.62,349,1.739,351,0.967,365,2.044,388,1.517,389,1.877,395,2.069,407,1.266,410,2.252,419,1.877,429,1.739,437,2.044,444,2.531,476,2.069,492,1.62,515,1.62,516,1.877,533,1.266,575,2.252,591,1.517,617,3.271,659,2.044,684,3.677,763,3.677,1047,3.271,1051,2.252,1073,2.252,1100,2.044,1109,2.252,1191,2.252,1202,1.877,1205,2.252,1206,2.044,1209,1.739,1219,2.044,1237,2.531,1289,2.531,1294,2.969,1295,3.497,1297,1.877,1302,4.229,1303,4.291,1304,3.853,1305,4.291,1306,2.954,1307,2.954,1308,2.531,1309,2.969,1310,2.252,1311,2.954,1312,2.954,1313,2.954,1314,2.954,1315,2.954,1316,3.677,1317,3.271,1318,2.954,1319,2.531,1320,2.954,1321,2.954,1322,2.954,1323,2.954,1324,2.531,1325,2.252,1326,2.954,1327,2.954,1328,2.954,1329,2.252,1330,2.954,1331,2.954,1332,2.954,1333,4.291,1334,5.547,1335,2.531,1336,2.954,1337,2.954,1338,2.531,1339,2.531,1340,3.677,1341,2.954,1342,2.954,1343,2.954,1344,2.954,1345,2.954,1346,2.954,1347,2.531,1348,2.531]],["title/additional-documentation/guide/2.-connecting-to-dom.html",[149,0.821,209,1.734,409,1.139,1189,1.287,1297,1.593]],["body/additional-documentation/guide/2.-connecting-to-dom.html",[20,0.445,23,1.565,26,0.02,27,0.95,32,0.012,33,0.012,40,2.518,41,1.307,42,1.296,44,1.236,60,1.219,73,1.437,95,1.514,108,2.117,111,1.882,128,1.673,133,0.9,149,1.843,151,2.409,157,1.385,160,1.795,162,1.938,190,1.539,191,1.236,192,1.385,212,1.307,225,1.109,246,3.347,263,2.612,269,1.938,278,2.109,279,1.47,285,1.47,295,0.812,305,1.775,308,1.47,313,1.779,315,1.111,316,2.585,317,1.938,318,2.746,320,1.673,336,1.6,337,1.307,339,1.795,342,1.47,348,1.673,351,0.998,353,1.673,355,3.191,359,3.038,360,3.56,365,2.109,369,2.109,374,1.47,375,2.791,376,1.795,377,2.409,380,2.109,388,1.565,389,1.938,394,2.254,395,1.47,407,1.307,421,1.795,434,2.324,437,3.038,438,3.949,439,2.791,453,2.254,467,2.117,473,2.109,485,1.938,503,3.347,516,1.938,533,1.307,535,1.795,540,3.038,555,1.795,556,2.324,557,2.324,559,2.324,591,1.565,592,2.109,655,2.109,659,2.109,675,2.612,701,2.109,706,2.109,723,2.109,731,1.795,735,2.612,746,3.038,751,3.029,778,2.324,1013,2.324,1032,1.938,1050,2.612,1126,2.612,1178,2.324,1191,2.324,1296,3.762,1297,1.938,1300,2.109,1304,3.347,1349,3.049,1350,3.049,1351,3.049,1352,4.391,1353,4.391,1354,3.049,1355,3.049,1356,4.391,1357,4.391,1358,4.391,1359,4.391,1360,3.762,1361,4.391,1362,3.049,1363,3.049,1364,2.612,1365,3.049,1366,2.612,1367,2.612,1368,3.049,1369,4.391,1370,3.049,1371,3.049,1372,4.391,1373,3.049,1374,3.049,1375,2.612,1376,3.049,1377,3.049,1378,3.049,1379,3.049,1380,2.612,1381,3.049,1382,3.049,1383,3.049,1384,2.324,1385,3.049,1386,2.612,1387,3.049,1388,2.612,1389,2.612,1390,3.049,1391,3.049,1392,3.049]],["title/additional-documentation/guide/3.-monitoring-state.html",[191,1.016,409,1.139,1154,1.593,1189,1.287,1300,1.734]],["body/additional-documentation/guide/3.-monitoring-state.html",[2,0.93,8,1.749,20,0.662,23,2.708,26,0.02,28,0.374,30,0.524,32,0.012,33,0.012,54,1.366,58,1.292,60,0.981,63,0.941,69,1.537,71,1.272,76,1.159,95,1.563,104,2.329,133,1.916,137,2.327,151,2.487,168,2.026,171,2.261,181,1.877,183,1.877,190,1.09,191,2.138,194,1.877,202,2.731,208,1.749,212,1.366,214,2.327,217,1.448,219,2.026,225,2.089,230,2.059,231,2.026,235,2.669,237,3.136,243,1.637,247,3.136,248,3.105,270,1.563,283,1.637,285,1.537,295,1.531,306,1.366,310,2.024,324,1.637,336,1.64,361,1.537,374,1.537,377,1.749,391,2.059,392,1.877,399,2.881,401,2.206,405,2.43,407,1.366,408,2.026,424,1.749,441,1.749,443,2.206,453,2.327,467,1.537,468,1.749,469,1.448,478,2.026,492,1.749,497,1.877,530,2.881,533,1.366,543,3.651,573,2.731,602,1.637,610,1.637,613,2.487,619,2.731,654,2.206,672,1.877,674,2.206,723,2.206,744,2.43,748,2.206,751,1.877,768,1.637,775,4.021,809,2.731,856,2.731,1003,2.43,1032,2.026,1101,2.43,1199,2.731,1206,2.206,1209,3.382,1219,2.206,1228,2.731,1243,2.731,1300,2.206,1302,3.456,1364,2.731,1384,2.43,1393,2.731,1394,2.731,1395,3.456,1396,2.731,1397,3.188,1398,5.275,1399,3.884,1400,3.188,1401,3.188,1402,3.188,1403,4.533,1404,3.188,1405,2.731,1406,2.731,1407,2.731,1408,3.188,1409,3.188,1410,3.188,1411,3.188,1412,4.533,1413,3.188,1414,2.731,1415,3.188,1416,2.731,1417,3.188,1418,2.43,1419,2.731,1420,2.731,1421,4.533,1422,3.188,1423,3.188,1424,2.731,1425,3.188,1426,3.884,1427,3.188,1428,3.188,1429,3.188,1430,3.188,1431,2.43,1432,2.731,1433,3.188,1434,3.188,1435,3.188,1436,2.731]],["title/additional-documentation/chess-tutorial.html",[409,1.289,1008,1.964,1059,2.164,1189,1.458]],["body/additional-documentation/chess-tutorial.html",[0,0.329,4,0.253,8,1.336,9,0.383,11,0.467,16,1.57,20,0.289,23,0.74,26,0.02,27,0.172,28,0.065,30,0.13,32,0.004,33,0.004,40,0.987,41,1.86,42,0.234,45,0.504,46,0.655,54,0.34,59,3.223,60,0.804,61,0.68,63,0.426,66,1.688,69,0.955,73,0.472,75,1.436,76,1.15,87,0.435,88,0.383,94,1.639,96,0.289,99,0.407,104,0.553,108,0.695,111,0.618,133,0.426,137,1.25,140,0.849,148,1.548,149,0.472,152,0.68,154,1.401,155,0.68,162,0.916,163,0.605,168,0.916,170,0.383,173,1.235,183,0.467,190,1.184,191,0.802,192,0.36,193,0.68,194,0.467,196,0.68,197,2.057,208,0.435,209,3.118,212,0.34,213,1.37,214,1.017,215,0.605,217,0.655,218,0.549,219,1.795,221,1.861,225,1.257,226,0.68,230,2.179,231,0.504,233,1.525,235,0.467,241,1.25,243,1.25,244,0.68,246,2.41,249,1.549,253,0.504,259,0.916,261,0.605,267,1.685,269,2.197,270,1.739,279,1.174,283,0.407,285,0.383,287,1.549,288,1.283,289,0.848,294,3.274,295,0.842,299,1.795,310,0.304,315,0.8,318,0.322,324,0.74,333,2.38,336,1.632,337,0.849,339,0.467,342,0.383,344,0.605,349,0.467,352,1.509,353,0.435,355,1.25,360,1.37,361,1.174,367,1.235,374,1.362,375,0.504,376,0.467,377,0.791,378,0.549,380,0.997,388,2.228,389,0.504,391,0.655,393,0.605,394,0.74,395,0.695,397,1.685,399,0.504,400,3.166,401,1.685,402,0.68,404,0.68,407,0.849,409,0.36,410,1.856,418,1.696,419,2.197,422,0.68,423,1.856,424,0.435,428,0.68,431,0.848,434,0.605,438,0.504,439,0.916,441,0.435,450,1.235,451,1.37,453,1.017,463,0.849,467,0.695,469,0.36,476,0.383,477,0.916,482,1.954,492,0.791,494,1.37,495,0.68,498,1.099,503,0.605,505,1.235,509,0.68,510,1.099,516,0.916,520,0.791,521,1.235,524,1.696,531,1.099,533,1.355,535,0.848,538,0.848,540,0.549,541,0.68,542,0.605,543,0.504,546,0.605,550,0.549,551,0.549,552,0.549,555,2.035,556,0.605,557,0.605,559,0.605,572,0.504,575,0.605,579,0.504,591,0.407,597,1.106,609,0.467,610,0.407,612,0.68,613,2.038,616,0.68,617,1.856,621,0.605,622,1.258,627,0.605,636,0.549,655,2.571,657,0.68,659,0.549,671,0.605,672,1.433,673,0.504,682,0.605,690,0.997,691,0.605,700,0.68,701,0.549,706,1.685,707,0.605,709,1.099,711,2.42,712,0.68,713,0.68,715,0.68,723,0.549,725,0.467,731,0.467,733,1.099,739,4.201,742,0.68,744,0.605,746,0.549,751,1.166,775,0.605,786,0.68,790,0.68,791,3.717,812,0.68,814,0.605,822,4.111,823,4.22,858,0.68,859,1.235,878,1.235,883,0.68,901,3.861,961,2.635,997,1.696,1003,1.856,1007,0.605,1008,1.685,1013,1.856,1023,0.68,1025,0.605,1028,0.68,1032,0.916,1047,0.605,1051,1.099,1053,0.68,1056,0.68,1059,2.833,1062,1.696,1070,0.68,1073,0.605,1077,0.68,1100,0.549,1108,1.509,1109,0.605,1116,0.605,1129,0.549,1133,0.68,1147,0.605,1154,1.258,1194,0.68,1202,1.795,1205,1.856,1206,0.549,1207,1.696,1209,1.663,1219,0.549,1220,0.68,1221,2.42,1222,2.42,1223,1.37,1224,0.997,1232,1.696,1235,0.605,1242,1.099,1270,0.605,1273,0.68,1282,1.235,1286,1.235,1302,1.099,1304,1.509,1308,1.235,1309,1.685,1310,1.856,1317,0.605,1324,3.558,1325,0.605,1329,0.605,1338,0.68,1339,0.68,1340,0.68,1347,1.696,1348,0.68,1360,0.68,1367,0.68,1375,0.68,1380,0.68,1384,1.099,1388,0.68,1389,0.68,1393,0.68,1394,0.68,1395,0.605,1396,0.68,1399,0.68,1405,0.68,1406,0.68,1407,0.68,1414,1.235,1416,0.68,1418,1.099,1419,0.68,1420,0.68,1424,0.68,1432,0.68,1436,0.68,1437,0.794,1438,3.456,1439,6.179,1440,0.68,1441,0.794,1442,0.794,1443,1.441,1444,1.98,1445,4.339,1446,1.441,1447,3.456,1448,4.507,1449,2.435,1450,4.507,1451,3.716,1452,1.98,1453,3.716,1454,1.441,1455,0.794,1456,0.794,1457,0.605,1458,1.98,1459,0.794,1460,0.794,1461,0.794,1462,1.441,1463,1.099,1464,0.794,1465,1.98,1466,0.794,1467,0.794,1468,3.716,1469,2.435,1470,1.441,1471,0.794,1472,2.435,1473,1.441,1474,0.794,1475,4.153,1476,0.794,1477,0.794,1478,1.441,1479,1.98,1480,0.794,1481,0.794,1482,0.794,1483,0.794,1484,0.794,1485,0.794,1486,1.441,1487,0.794,1488,1.98,1489,1.98,1490,0.794,1491,1.441,1492,0.794,1493,1.441,1494,1.441,1495,0.794,1496,0.794,1497,0.794,1498,1.441,1499,0.794,1500,0.794,1501,0.794,1502,0.794,1503,2.825,1504,0.68,1505,1.98,1506,2.435,1507,3.162,1508,0.794,1509,0.794,1510,2.435,1511,0.794,1512,0.794,1513,1.441,1514,0.794,1515,0.794,1516,0.794,1517,0.794,1518,0.794,1519,1.441,1520,2.825,1521,0.794,1522,0.794,1523,0.794,1524,0.794,1525,1.441,1526,2.825,1527,1.235,1528,0.794,1529,0.794,1530,0.68,1531,0.794,1532,0.794,1533,0.794,1534,0.794,1535,1.441,1536,1.441,1537,0.794,1538,0.794,1539,0.794,1540,0.794,1541,0.68,1542,0.794,1543,0.794,1544,0.794,1545,0.794,1546,0.794,1547,0.794,1548,1.441,1549,0.794,1550,5.344,1551,0.794,1552,0.794,1553,0.794,1554,0.794,1555,0.794,1556,1.441,1557,0.794,1558,2.709,1559,0.794,1560,0.794,1561,0.794,1562,3.162,1563,2.086,1564,0.68,1565,0.68,1566,0.794,1567,3.947,1568,2.825,1569,0.794,1570,0.68,1571,0.794,1572,0.794,1573,0.794,1574,1.441,1575,0.794,1576,0.794,1577,0.794,1578,0.794,1579,0.794,1580,0.794,1581,1.441,1582,1.441,1583,0.794,1584,0.794,1585,1.441,1586,0.794,1587,0.794,1588,0.794,1589,0.794,1590,0.794,1591,0.794,1592,0.794,1593,0.794,1594,0.794,1595,0.794,1596,0.794,1597,1.696,1598,0.794,1599,0.794,1600,1.441,1601,0.794,1602,1.441,1603,1.441,1604,0.794,1605,0.794,1606,1.441,1607,1.98,1608,0.794,1609,1.441,1610,0.794,1611,1.441,1612,0.794,1613,0.794,1614,0.794,1615,0.794,1616,0.794,1617,0.794,1618,1.441,1619,1.441,1620,0.794,1621,0.794,1622,0.794,1623,0.794,1624,0.794,1625,0.794,1626,0.794,1627,0.68,1628,1.441,1629,0.794,1630,0.794,1631,0.794,1632,0.794,1633,0.794,1634,0.794,1635,0.794,1636,0.794,1637,0.794,1638,0.794,1639,0.68,1640,0.794,1641,1.441,1642,0.794,1643,0.794,1644,0.794,1645,3.716,1646,0.68,1647,0.794,1648,0.794,1649,0.794,1650,2.086,1651,0.794,1652,1.441,1653,0.794,1654,0.794,1655,0.794,1656,0.794,1657,1.98,1658,0.794,1659,0.794,1660,0.794,1661,0.794,1662,0.794,1663,1.441,1664,0.794,1665,1.441,1666,0.794,1667,0.794,1668,1.441,1669,0.68,1670,0.68,1671,0.794,1672,0.794,1673,0.794,1674,1.441,1675,0.794,1676,0.68,1677,0.794,1678,0.794,1679,0.794,1680,0.794,1681,0.794,1682,0.794,1683,0.794,1684,0.794,1685,0.68,1686,0.794,1687,0.794,1688,0.794,1689,0.794,1690,0.794,1691,0.794,1692,0.794,1693,2.825,1694,2.086,1695,0.794,1696,0.794,1697,1.441,1698,0.794,1699,1.98,1700,0.68,1701,1.441,1702,0.794,1703,0.794,1704,0.794,1705,0.794,1706,0.794,1707,0.794,1708,0.794,1709,0.794,1710,0.794,1711,0.794,1712,0.794,1713,0.794,1714,0.794,1715,0.794,1716,0.794,1717,0.794,1718,1.441,1719,1.441,1720,0.794,1721,0.794,1722,0.794,1723,0.794,1724,0.794,1725,0.794,1726,0.794,1727,0.794,1728,0.794,1729,0.794,1730,0.794,1731,0.794,1732,0.794,1733,0.794,1734,0.794,1735,0.794,1736,0.794,1737,0.794,1738,0.794,1739,0.794,1740,0.794,1741,0.794,1742,2.825,1743,0.794,1744,0.794,1745,0.794,1746,0.794,1747,1.441,1748,0.794,1749,1.441,1750,0.794,1751,1.441,1752,0.794,1753,0.794,1754,0.794,1755,0.794,1756,0.794]],["title/additional-documentation/translating-react-code.html",[212,1.075,214,1.287,409,1.139,1039,1.911,1189,1.287]],["body/additional-documentation/translating-react-code.html",[2,0.367,9,1.406,18,0.687,20,0.261,23,1.893,26,0.02,28,0.304,30,0.294,32,0.008,33,0.008,40,1.494,41,0.767,51,2.222,54,1.25,58,2.033,59,2.017,60,0.798,63,1.382,66,1.675,69,1.406,71,0.502,73,1.207,76,2.263,88,0.863,94,1.341,95,1.466,99,2.182,100,1.365,101,2.811,104,1.118,106,1.365,133,1.683,137,1.497,140,0.767,149,1.642,151,0.982,154,1.181,160,1.716,165,1.138,168,1.138,170,0.863,171,2.006,180,1.534,183,1.716,190,1.022,191,1.181,197,2.363,198,1.534,200,1.365,201,1.138,204,1.239,208,0.982,209,1.239,212,2.854,213,1.239,214,2.402,215,1.365,217,1.93,218,2.017,225,0.651,230,2.125,234,1.341,235,1.054,236,1.534,237,1.239,239,0.919,241,0.919,243,0.919,248,2.171,249,0.982,270,2.256,279,1.778,281,1.365,287,0.982,288,1.324,305,1.005,308,0.863,309,1.239,310,1.631,312,1.534,315,0.453,316,1.054,317,1.138,320,1.599,322,1.534,323,2.498,326,1.365,328,1.534,333,0.982,341,1.239,342,1.778,348,0.982,349,1.054,351,0.586,357,1.365,361,1.778,368,1.239,372,1.365,374,0.863,375,1.853,378,3.237,380,1.239,388,1.497,394,1.497,395,1.406,397,2.017,399,1.138,407,0.767,408,2.344,419,2.344,424,0.982,431,1.054,432,1.239,439,1.138,441,0.982,443,1.239,451,1.239,452,1.534,453,2.182,463,0.767,467,0.863,474,1.406,476,0.863,478,1.853,484,1.138,485,2.344,493,1.239,515,2.332,520,0.982,535,1.716,538,1.054,542,1.365,543,2.344,545,1.365,548,1.138,551,1.239,555,1.054,571,1.365,572,1.138,574,1.239,591,1.497,597,2.907,613,1.599,620,1.534,623,1.716,654,1.239,656,1.534,672,2.502,673,1.138,690,1.239,706,1.239,709,2.222,731,2.754,733,1.365,751,1.054,814,1.365,899,2.017,1025,1.365,1032,1.138,1038,1.534,1039,1.365,1042,1.534,1078,1.534,1104,2.017,1108,1.365,1129,2.551,1134,1.534,1141,1.534,1146,1.534,1154,1.138,1178,1.365,1186,1.534,1187,1.534,1202,2.974,1209,1.716,1212,1.534,1223,2.017,1270,1.365,1272,2.498,1281,2.498,1285,1.534,1291,1.534,1295,2.941,1297,1.138,1309,1.239,1319,1.534,1325,2.222,1329,1.365,1335,1.534,1431,1.365,1440,2.498,1457,1.365,1463,1.365,1504,1.534,1527,1.534,1530,1.534,1541,1.534,1558,2.498,1563,1.534,1564,1.534,1597,2.498,1639,1.534,1646,1.534,1650,1.534,1669,1.534,1670,1.534,1676,1.534,1685,2.498,1694,3.159,1700,1.534,1757,1.79,1758,1.79,1759,1.79,1760,1.79,1761,1.79,1762,1.79,1763,1.79,1764,1.79,1765,1.79,1766,1.79,1767,1.79,1768,1.79,1769,1.79,1770,1.79,1771,2.915,1772,6.224,1773,5.016,1774,1.79,1775,1.79,1776,1.79,1777,2.915,1778,2.498,1779,1.79,1780,1.79,1781,1.79,1782,1.79,1783,1.79,1784,1.79,1785,1.79,1786,1.79,1787,1.79,1788,1.79,1789,1.79,1790,1.79,1791,3.688,1792,2.915,1793,2.915,1794,1.79,1795,1.79,1796,2.915,1797,4.251,1798,3.688,1799,1.79,1800,2.915,1801,1.79,1802,1.79,1803,1.79,1804,1.79,1805,1.79,1806,1.79,1807,1.79,1808,1.79,1809,1.79,1810,1.79,1811,2.915,1812,1.79,1813,1.79,1814,1.79,1815,1.79,1816,1.79,1817,1.79,1818,1.79,1819,1.79,1820,1.79,1821,1.79,1822,1.79,1823,1.79,1824,1.79,1825,1.79,1826,1.79,1827,1.79,1828,1.79,1829,1.79,1830,1.79,1831,1.79,1832,1.79,1833,1.79,1834,1.79,1835,1.79,1836,1.79,1837,1.79,1838,3.159,1839,1.79,1840,1.534,1841,1.79,1842,1.79,1843,1.79,1844,1.79,1845,1.79,1846,1.79,1847,2.915,1848,1.79,1849,1.79,1850,1.79,1851,1.79]],["title/additional-documentation/testing.html",[409,1.486,567,2.264,1189,1.68]],["body/additional-documentation/testing.html",[16,1.208,26,0.02,32,0.011,33,0.011,37,2.028,42,2.033,51,2.028,58,1.078,60,0.86,66,1.208,67,2.609,73,0.871,76,2.231,77,1.566,87,1.46,94,0.967,114,1.691,148,1.691,149,0.871,151,2.18,154,1.61,161,1.46,167,2.28,190,1.578,191,1.078,201,1.691,212,2.538,217,1.208,230,1.208,233,1.283,234,0.967,237,1.841,241,1.366,249,2.18,259,1.691,261,2.028,270,1.947,272,2.749,287,1.46,288,1.805,289,2.339,294,3.899,295,1.504,315,1.429,336,1.907,337,1.14,342,1.283,348,1.46,352,2.028,361,1.283,374,1.283,377,1.46,381,2.28,391,1.208,407,1.703,412,2.028,421,2.339,429,1.566,533,2.038,545,2.028,552,1.841,555,2.339,567,3.905,574,1.841,591,1.366,597,1.208,609,1.566,624,4.461,707,2.028,725,1.566,726,2.28,747,1.841,774,2.028,778,2.028,946,2.028,961,2.028,1005,2.028,1052,2.28,1116,2.028,1175,2.28,1196,2.28,1197,2.28,1202,2.525,1209,1.566,1218,3.404,1224,1.841,1235,2.028,1242,3.625,1294,1.841,1309,1.841,1310,2.028,1316,2.28,1317,2.028,1366,2.28,1386,3.404,1395,2.028,1418,2.028,1426,2.28,1431,2.028,1457,2.028,1463,2.028,1565,2.28,1570,2.28,1627,3.404,1778,4.519,1838,2.28,1840,2.28,1852,3.974,1853,3.974,1854,2.661,1855,2.661,1856,2.661,1857,2.661,1858,2.661,1859,2.661,1860,2.661,1861,2.661,1862,2.661,1863,2.661,1864,2.661,1865,2.661,1866,2.661,1867,2.661,1868,2.661,1869,2.661,1870,3.974,1871,3.974,1872,2.661,1873,3.974,1874,2.661,1875,2.661,1876,2.661,1877,2.661,1878,3.974,1879,3.974,1880,2.661,1881,2.661,1882,2.661,1883,2.661,1884,2.661,1885,2.661,1886,2.661,1887,2.661,1888,2.661,1889,2.661,1890,4.756,1891,2.661,1892,2.661,1893,2.661,1894,2.661,1895,2.661,1896,2.661,1897,2.661,1898,2.661,1899,2.661,1900,2.661,1901,2.661,1902,2.661,1903,2.661]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"interfaces/SourceConstructor.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"interfaces/TargetConstructor.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["0",{"_index":494,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"coverage.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["0..63",{"_index":1553,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["0.1.1",{"_index":896,"title":{},"body":{"changelog.html":{}}}],["0.1.2",{"_index":894,"title":{},"body":{"changelog.html":{}}}],["0.11.0",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["0.25",{"_index":1679,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["0.5",{"_index":495,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["0/1",{"_index":916,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":914,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":915,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["02",{"_index":887,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":869,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":868,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":864,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":897,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":863,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":895,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":333,"title":{"additional-documentation/guide/1.-creating-connections.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragPreviewOptions.html":{},"overview.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["1.0.0",{"_index":891,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":889,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":888,"title":{},"body":{"changelog.html":{}}}],["1.0.3",{"_index":886,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":941,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":901,"title":{},"body":{"coverage.html":{},"additional-documentation/chess-tutorial.html":{}}}],["12.5",{"_index":1536,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["13.0.0",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["14",{"_index":893,"title":{},"body":{"changelog.html":{}}}],["16.0.0",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":890,"title":{},"body":{"changelog.html":{}}}],["1px",{"_index":1532,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["2",{"_index":209,"title":{"additional-documentation/guide/2.-connecting-to-dom.html":{}},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["2.0.0",{"_index":877,"title":{},"body":{"changelog.html":{}}}],["2.0.1",{"_index":867,"title":{},"body":{"changelog.html":{}}}],["2.0.2",{"_index":861,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["2.3.0",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1156,"title":{},"body":{"overview.html":{}}}],["2021",{"_index":892,"title":{},"body":{"changelog.html":{}}}],["2022",{"_index":862,"title":{},"body":{"changelog.html":{}}}],["2c0127e",{"_index":876,"title":{},"body":{"changelog.html":{}}}],["2d",{"_index":1084,"title":{},"body":{"index.html":{}}}],["3",{"_index":1154,"title":{"additional-documentation/guide/3.-monitoring-state.html":{}},"body":{"overview.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["3/3",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1650,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["4/4",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":1471,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["5",{"_index":1563,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["5.5",{"_index":1730,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["5/5",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["54px",{"_index":1473,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["560px",{"_index":1540,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["6",{"_index":1837,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["6/6",{"_index":905,"title":{},"body":{"coverage.html":{}}}],["64",{"_index":1452,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["7",{"_index":875,"title":{},"body":{"changelog.html":{}}}],["7.0.0",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["700",{"_index":1664,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["70px",{"_index":1476,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["75",{"_index":906,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1556,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["8/8",{"_index":938,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":910,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["8x8",{"_index":1525,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["9",{"_index":1155,"title":{},"body":{"overview.html":{}}}],["above",{"_index":378,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["abramov",{"_index":1000,"title":{},"body":{"index.html":{}}}],["absolute",{"_index":1519,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["abstraction",{"_index":1046,"title":{},"body":{"index.html":{}}}],["accept",{"_index":1217,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["accepts",{"_index":91,"title":{},"body":{"interfaces/BackendInput.html":{}}}],["access",{"_index":1431,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["accessors",{"_index":109,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"directives/DropTargetDirective.html":{}}}],["accomplish",{"_index":1800,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["achieve",{"_index":1495,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["action",{"_index":667,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["actions",{"_index":81,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["actual",{"_index":1758,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["actually",{"_index":1077,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["add",{"_index":16,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"classes/DragLayerConnectionClass.html":{},"changelog.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["add(teardown",{"_index":120,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"classes/DragLayerConnectionClass.html":{}}}],["add(teardownlogic",{"_index":21,"title":{},"body":{"interfaces/AddSubscription.html":{}}}],["added",{"_index":1541,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["adding",{"_index":1192,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["additional",{"_index":1189,"title":{"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}},"body":{}}],["addsubscription",{"_index":1,"title":{"interfaces/AddSubscription.html":{}},"body":{"interfaces/AddSubscription.html":{},"injectables/DndService.html":{},"coverage.html":{}}}],["advanced",{"_index":1289,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["advantage",{"_index":1034,"title":{},"body":{"index.html":{}}}],["advice",{"_index":411,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["affected",{"_index":1492,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["again",{"_index":1199,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["aliases",{"_index":1163,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1508,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["allow",{"_index":1635,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["allowing",{"_index":763,"title":{},"body":{"directives/DropTargetDirective.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["allows",{"_index":476,"title":{},"body":{"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["already",{"_index":520,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["alt",{"_index":696,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["alternate",{"_index":1228,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["alternatives",{"_index":1095,"title":{},"body":{"index.html":{}}}],["always",{"_index":1384,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["ambitious",{"_index":1057,"title":{},"body":{"index.html":{}}}],["amend",{"_index":1606,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["anchorx",{"_index":487,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["anchory",{"_index":488,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["angular",{"_index":597,"title":{},"body":{"directives/DragSourceDirective.html":{},"interfaces/DragSourceSpec.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["angular's",{"_index":61,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"additional-documentation/chess-tutorial.html":{}}}],["angular/common",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":961,"title":{},"body":{"dependencies.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["angular/core/testing",{"_index":1875,"title":{},"body":{"additional-documentation/testing.html":{}}}],["angular/platform",{"_index":1876,"title":{},"body":{"additional-documentation/testing.html":{}}}],["another",{"_index":746,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["answer",{"_index":1643,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["any,node",{"_index":828,"title":{},"body":{"classes/Reconnector.html":{}}}],["anything",{"_index":434,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["anyway",{"_index":752,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["aot",{"_index":49,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"additional-documentation/quickstart.html":{}}}],["api",{"_index":51,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["apis",{"_index":1020,"title":{},"body":{"index.html":{}}}],["app",{"_index":1222,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["app.module.ts",{"_index":1261,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["appear",{"_index":753,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["appearance",{"_index":1687,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["appearance—even",{"_index":741,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["applies",{"_index":599,"title":{},"body":{"directives/DragSourceDirective.html":{}}}],["apply",{"_index":521,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["applying",{"_index":1385,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["appmodule",{"_index":1198,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["approach",{"_index":1805,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["appropriate",{"_index":326,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["aptly",{"_index":55,"title":{},"body":{"interfaces/BackendFactoryInput.html":{}}}],["arbitrarily",{"_index":1500,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["arbitrary",{"_index":1849,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["area",{"_index":1067,"title":{},"body":{"index.html":{}}}],["arecollectsequal",{"_index":949,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["arecollectsequal(a",{"_index":977,"title":{},"body":{"miscellaneous/functions.html":{}}}],["aren't",{"_index":1128,"title":{},"body":{"index.html":{}}}],["areoptionsequal",{"_index":951,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["areoptionsequal(nextoptions",{"_index":979,"title":{},"body":{"miscellaneous/functions.html":{}}}],["argument",{"_index":323,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/translating-react-code.html":{}}}],["arguments",{"_index":1809,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["around",{"_index":246,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["array",{"_index":1100,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["array(64).fill(0).map((_",{"_index":1524,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["arrow",{"_index":1272,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["ask",{"_index":448,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["asking",{"_index":329,"title":{},"body":{"injectables/DndService.html":{}}}],["assembly",{"_index":1246,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["assertion",{"_index":990,"title":{},"body":{"miscellaneous/functions.html":{}}}],["assign",{"_index":689,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["assigning",{"_index":319,"title":{},"body":{"injectables/DndService.html":{}}}],["associated",{"_index":1834,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["assumes",{"_index":1454,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["assuming",{"_index":1729,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["assumptions",{"_index":1686,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["async",{"_index":1395,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["asynchronous",{"_index":1847,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["attach",{"_index":1304,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["attached",{"_index":1339,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["attaching",{"_index":1490,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["attention",{"_index":1512,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["automatic",{"_index":436,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["automatically",{"_index":560,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["available",{"_index":391,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["avoid",{"_index":714,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["avoiding",{"_index":301,"title":{},"body":{"injectables/DndService.html":{}}}],["aware",{"_index":1813,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["b",{"_index":978,"title":{},"body":{"miscellaneous/functions.html":{}}}],["backend",{"_index":42,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["backend';generally",{"_index":1258,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["backend's",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backend.simulatebegindrag([source",{"_index":1894,"title":{},"body":{"additional-documentation/testing.html":{}}}],["backend.simulatedrop",{"_index":1899,"title":{},"body":{"additional-documentation/testing.html":{}}}],["backend.simulateenddrag",{"_index":1900,"title":{},"body":{"additional-documentation/testing.html":{}}}],["backend.simulatehover([target",{"_index":1896,"title":{},"body":{"additional-documentation/testing.html":{}}}],["backendconnector",{"_index":830,"title":{},"body":{"classes/Reconnector.html":{}}}],["backendexample",{"_index":1869,"title":{},"body":{"additional-documentation/testing.html":{}}}],["backendfactory",{"_index":65,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{}}}],["backendfactoryfactory",{"_index":57,"title":{},"body":{"interfaces/BackendFactoryInput.html":{}}}],["backendfactoryinput",{"_index":34,"title":{"interfaces/BackendFactoryInput.html":{}},"body":{"interfaces/BackendFactoryInput.html":{},"modules/DndModule.html":{},"coverage.html":{}}}],["backendinput",{"_index":85,"title":{"interfaces/BackendInput.html":{}},"body":{"interfaces/BackendInput.html":{},"modules/DndModule.html":{},"coverage.html":{}}}],["backendnext",{"_index":1006,"title":{},"body":{"index.html":{}}}],["backendorbackendfactory",{"_index":265,"title":{},"body":{"modules/DndModule.html":{}}}],["backends",{"_index":38,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"index.html":{},"additional-documentation/quickstart.html":{}}}],["backendyou",{"_index":1190,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["background",{"_index":1399,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["backgroundcolor",{"_index":1488,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["bare",{"_index":1096,"title":{},"body":{"index.html":{}}}],["base",{"_index":147,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["base.ts",{"_index":807,"title":{},"body":{"interfaces/MonitorBase.html":{},"coverage.html":{}}}],["based",{"_index":424,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["basic",{"_index":1463,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["basics",{"_index":1456,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["batches",{"_index":1030,"title":{},"body":{"index.html":{}}}],["bbb",{"_index":1596,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["become",{"_index":792,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["becomes",{"_index":366,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["before",{"_index":814,"title":{},"body":{"interfaces/MonitorBase.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["beforeeach",{"_index":1884,"title":{},"body":{"additional-documentation/testing.html":{}}}],["beforeeach(async",{"_index":1882,"title":{},"body":{"additional-documentation/testing.html":{}}}],["begindrag",{"_index":591,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"classes/Source.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["begindrag(monitor",{"_index":702,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["behaviorsubject",{"_index":1568,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["behaviour",{"_index":316,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["behavioursubject",{"_index":1576,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["being",{"_index":394,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["belong",{"_index":1135,"title":{},"body":{"index.html":{}}}],["below",{"_index":1366,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/testing.html":{}}}],["benefit",{"_index":1143,"title":{},"body":{"index.html":{}}}],["best",{"_index":680,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["better",{"_index":1585,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["between",{"_index":493,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["beyond",{"_index":1318,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["bg",{"_index":1742,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["big",{"_index":1502,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["biggest",{"_index":1790,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["binding",{"_index":598,"title":{},"body":{"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["bit",{"_index":1641,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["black",{"_index":1448,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["blindly",{"_index":611,"title":{},"body":{"interfaces/DragSourceMonitor.html":{}}}],["block",{"_index":1503,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["blocks",{"_index":1050,"title":{},"body":{"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["board",{"_index":739,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["boardcomponent",{"_index":1451,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["boardsquarecomponent",{"_index":1693,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["body",{"_index":1484,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["boilerplate",{"_index":1572,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["bones",{"_index":1097,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":74,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"miscellaneous/functions.html":{}}}],["boolean;then",{"_index":1485,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["border",{"_index":1531,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["born",{"_index":1121,"title":{},"body":{"index.html":{}}}],["both",{"_index":673,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["bottom",{"_index":511,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["bound",{"_index":229,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["bounding",{"_index":1352,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["box",{"_index":1372,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["break",{"_index":1441,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["breaking",{"_index":1605,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["brevity's",{"_index":1538,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["broadcast",{"_index":1573,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["broken",{"_index":601,"title":{},"body":{"directives/DragSourceDirective.html":{}}}],["browse",{"_index":1152,"title":{},"body":{"modules.html":{},"additional-documentation/quickstart.html":{}}}],["browser",{"_index":1235,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["browsers",{"_index":658,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["browsing",{"_index":1227,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["bug",{"_index":870,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["build",{"_index":878,"title":{},"body":{"changelog.html":{},"additional-documentation/chess-tutorial.html":{}}}],["builder",{"_index":1089,"title":{},"body":{"index.html":{}}}],["building",{"_index":997,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["bump",{"_index":865,"title":{},"body":{"changelog.html":{}}}],["c.candrop",{"_index":1737,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["c.isdragging",{"_index":232,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["c.isover",{"_index":1736,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["cad",{"_index":1085,"title":{},"body":{"index.html":{}}}],["call",{"_index":283,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["callback",{"_index":160,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["callbacks",{"_index":248,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["called",{"_index":239,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/translating-react-code.html":{}}}],["calling",{"_index":1267,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["came",{"_index":1684,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["can't",{"_index":1270,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["candrag",{"_index":605,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"classes/Source.html":{},"additional-documentation/quickstart.html":{}}}],["candrag(monitor",{"_index":718,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["candrop",{"_index":221,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"additional-documentation/chess-tutorial.html":{}}}],["candrop(monitor",{"_index":787,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["canmoveknight",{"_index":1607,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["canmoveknight(to",{"_index":1613,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["capturedraggingstate",{"_index":489,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{}}}],["card",{"_index":736,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["cards",{"_index":1075,"title":{},"body":{"index.html":{}}}],["carry",{"_index":1432,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["case",{"_index":223,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DropTargetSpec.html":{}}}],["cases",{"_index":350,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"index.html":{}}}],["cat",{"_index":1398,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["cats",{"_index":1397,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["center",{"_index":1509,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["certain",{"_index":356,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["chain",{"_index":631,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["change",{"_index":361,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"changelog.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["changelog",{"_index":852,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":192,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"changelog.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["changing",{"_index":1414,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["character",{"_index":1467,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["check",{"_index":725,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["checking",{"_index":795,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["checks",{"_index":203,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["chess",{"_index":1059,"title":{"additional-documentation/chess-tutorial.html":{}},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["chessboard",{"_index":1546,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["child",{"_index":636,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["choose",{"_index":240,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["chrome",{"_index":84,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{}}}],["circumstances",{"_index":679,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["class",{"_index":94,"title":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{}},"body":{"coverage.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["classes",{"_index":96,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"index.html":{},"overview.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["clean",{"_index":286,"title":{},"body":{"injectables/DndService.html":{}}}],["clearer",{"_index":1599,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["clearly",{"_index":1561,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["click",{"_index":1232,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["client",{"_index":449,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["closed",{"_index":110,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{}}}],["code",{"_index":214,"title":{"additional-documentation/translating-react-code.html":{}},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["codebase",{"_index":1136,"title":{},"body":{"index.html":{}}}],["coll",{"_index":1741,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["collect",{"_index":1797,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["collect((props",{"_index":1817,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["collected",{"_index":215,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["color",{"_index":1489,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["colour",{"_index":1479,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["columns",{"_index":1534,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["combination",{"_index":1403,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["combine",{"_index":1823,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["comes",{"_index":1816,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["commence",{"_index":1211,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["commit",{"_index":859,"title":{},"body":{"changelog.html":{},"additional-documentation/chess-tutorial.html":{}}}],["commits",{"_index":858,"title":{},"body":{"changelog.html":{},"additional-documentation/chess-tutorial.html":{}}}],["common",{"_index":278,"title":{},"body":{"injectables/DndService.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["community",{"_index":1142,"title":{},"body":{"index.html":{}}}],["compared",{"_index":1767,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["compatibility",{"_index":12,"title":{},"body":{"interfaces/AddSubscription.html":{},"additional-documentation/quickstart.html":{}}}],["compatible",{"_index":789,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{}}}],["compilation",{"_index":62,"title":{},"body":{"interfaces/BackendFactoryInput.html":{}}}],["complete",{"_index":1457,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["completely",{"_index":52,"title":{},"body":{"interfaces/BackendFactoryInput.html":{}}}],["completions",{"_index":1292,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["complex",{"_index":998,"title":{},"body":{"index.html":{}}}],["component",{"_index":270,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceSpec.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["component's",{"_index":574,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["component.fireaction(monitor.getitem",{"_index":1775,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["component.source.gethandlerid",{"_index":1891,"title":{},"body":{"additional-documentation/testing.html":{}}}],["component.target.gethandlerid",{"_index":1892,"title":{},"body":{"additional-documentation/testing.html":{}}}],["componentfixture",{"_index":1873,"title":{},"body":{"additional-documentation/testing.html":{}}}],["components",{"_index":249,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["composing",{"_index":1801,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["comprehensive",{"_index":1040,"title":{},"body":{"index.html":{}}}],["comprehensively",{"_index":1283,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["compute",{"_index":1631,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["computed",{"_index":1690,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["concept",{"_index":1794,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["concepts",{"_index":1208,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["conceptually",{"_index":1673,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["concerned",{"_index":1501,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["configuration",{"_index":90,"title":{},"body":{"interfaces/BackendInput.html":{},"index.html":{}}}],["configure",{"_index":37,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"additional-documentation/testing.html":{}}}],["configuring",{"_index":48,"title":{},"body":{"interfaces/BackendFactoryInput.html":{}}}],["confusing",{"_index":1670,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["confusion",{"_index":762,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["connect",{"_index":99,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["connect(fn",{"_index":122,"title":{},"body":{"classes/Connection.html":{}}}],["connect.connectdragsource",{"_index":1777,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["connectdragpreview",{"_index":100,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"additional-documentation/translating-react-code.html":{}}}],["connectdragpreview(elementornode",{"_index":549,"title":{},"body":{"interfaces/DragSource.html":{}}}],["connectdragpreview(node",{"_index":126,"title":{},"body":{"classes/Connection.html":{}}}],["connectdragsource",{"_index":101,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"additional-documentation/translating-react-code.html":{}}}],["connectdragsource(elementornode",{"_index":565,"title":{},"body":{"interfaces/DragSource.html":{}}}],["connectdragsource(node",{"_index":129,"title":{},"body":{"classes/Connection.html":{}}}],["connectdroptarget",{"_index":102,"title":{},"body":{"classes/Connection.html":{},"interfaces/DropTarget.html":{}}}],["connectdroptarget(elementornode",{"_index":757,"title":{},"body":{"interfaces/DropTarget.html":{}}}],["connectdroptarget(node",{"_index":131,"title":{},"body":{"classes/Connection.html":{}}}],["connected",{"_index":317,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["connecting",{"_index":1297,"title":{"additional-documentation/guide/2.-connecting-to-dom.html":{}},"body":{"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["connection",{"_index":95,"title":{"classes/Connection.html":{}},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["connection's",{"_index":1298,"title":{},"body":{"additional-documentation/guide.html":{}}}],["connection.ts",{"_index":457,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"coverage.html":{}}}],["connection.unsubscribe",{"_index":273,"title":{},"body":{"injectables/DndService.html":{}}}],["connectionbase",{"_index":144,"title":{"interfaces/ConnectionBase.html":{}},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"coverage.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["connectionbase.unsubscribe",{"_index":1808,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["connections",{"_index":1295,"title":{"additional-documentation/guide/1.-creating-connections.html":{}},"body":{"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/translating-react-code.html":{}}}],["connector",{"_index":123,"title":{"interfaces/Connector.html":{}},"body":{"classes/Connection.html":{},"interfaces/Connector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"coverage.html":{}}}],["connectors",{"_index":1835,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["connects",{"_index":1831,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["consider",{"_index":1191,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["considered",{"_index":728,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["console.log('dropped",{"_index":1364,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["const",{"_index":555,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["constant",{"_index":1654,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["constants",{"_index":1663,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["constants.ts",{"_index":1656,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["construct",{"_index":1863,"title":{},"body":{"additional-documentation/testing.html":{}}}],["constructor",{"_index":111,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["constructor(backend",{"_index":838,"title":{},"body":{"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["constructor(backendconnector",{"_index":827,"title":{},"body":{"classes/Reconnector.html":{}}}],["constructor(factoryargs",{"_index":112,"title":{},"body":{"classes/Connection.html":{}}}],["constructor(manager",{"_index":462,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{}}}],["constructor(private",{"_index":1309,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["constructor(spec",{"_index":833,"title":{},"body":{"classes/Source.html":{},"classes/Target.html":{}}}],["constructors",{"_index":292,"title":{},"body":{"injectables/DndService.html":{}}}],["consumers",{"_index":1184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contain",{"_index":15,"title":{},"body":{"interfaces/AddSubscription.html":{}}}],["containercomponent",{"_index":1542,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["content",{"_index":619,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["context",{"_index":68,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"miscellaneous/variables.html":{}}}],["contributors",{"_index":1137,"title":{},"body":{"index.html":{}}}],["convenience",{"_index":1331,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["convenient",{"_index":159,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSource.html":{}}}],["conventional",{"_index":857,"title":{},"body":{"changelog.html":{}}}],["convert",{"_index":1552,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["cookie",{"_index":1106,"title":{},"body":{"index.html":{}}}],["cool",{"_index":1528,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["coord",{"_index":1550,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["coord.ts",{"_index":1551,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["coordinate",{"_index":445,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/Offset.html":{}}}],["coordinates",{"_index":450,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["copy",{"_index":654,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["copying",{"_index":662,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["core",{"_index":77,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/testing.html":{}}}],["core's",{"_index":189,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["cormacrelf",{"_index":1122,"title":{},"body":{"index.html":{}}}],["corollary",{"_index":321,"title":{},"body":{"injectables/DndService.html":{}}}],["correctly",{"_index":1259,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["corresponds",{"_index":663,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["couples",{"_index":716,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["course",{"_index":1763,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["coverage",{"_index":898,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":279,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["createbackend",{"_index":1247,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["createconnector",{"_index":802,"title":{},"body":{"interfaces/FactoryArgs.html":{}}}],["created",{"_index":1349,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["createhandler",{"_index":803,"title":{},"body":{"interfaces/FactoryArgs.html":{}}}],["createmonitor",{"_index":804,"title":{},"body":{"interfaces/FactoryArgs.html":{}}}],["creates",{"_index":309,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/translating-react-code.html":{}}}],["createsourceconnector",{"_index":920,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createsourceconnector(backend",{"_index":982,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createsourcefactory",{"_index":922,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createsourcefactory(spec",{"_index":983,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createsourcemonitor",{"_index":924,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createsourcemonitor(manager",{"_index":984,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createtargetconnector",{"_index":927,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createtargetconnector(backend",{"_index":985,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createtargetfactory",{"_index":928,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createtargetfactory(spec",{"_index":986,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createtargetmonitor",{"_index":929,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createtargetmonitor(manager",{"_index":987,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createtestbackend",{"_index":1870,"title":{},"body":{"additional-documentation/testing.html":{}}}],["creating",{"_index":1294,"title":{"additional-documentation/guide/1.-creating-connections.html":{}},"body":{"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/testing.html":{}}}],["css",{"_index":1013,"title":{},"body":{"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["current",{"_index":399,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["currently",{"_index":774,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"miscellaneous/variables.html":{},"additional-documentation/testing.html":{}}}],["currentoptions",{"_index":980,"title":{},"body":{"miscellaneous/functions.html":{}}}],["currentposition",{"_index":1609,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["cursor",{"_index":540,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceOptions.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["custom",{"_index":365,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["customisations",{"_index":652,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["customise",{"_index":1360,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["customize",{"_index":1747,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["cutter",{"_index":1107,"title":{},"body":{"index.html":{}}}],["d",{"_index":1868,"title":{},"body":{"additional-documentation/testing.html":{}}}],["d5aa05b",{"_index":880,"title":{},"body":{"changelog.html":{}}}],["dan",{"_index":999,"title":{},"body":{"index.html":{}}}],["data",{"_index":331,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["data:image/png;base64",{"_index":1750,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["dead",{"_index":1658,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["deadline",{"_index":1112,"title":{},"body":{"index.html":{}}}],["debug",{"_index":72,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"miscellaneous/variables.html":{}}}],["debugging",{"_index":79,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{}}}],["decisions",{"_index":1430,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["declarations",{"_index":261,"title":{},"body":{"modules/DndModule.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["declared",{"_index":1810,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["decorating",{"_index":1796,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["decorators",{"_index":1803,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["decreased",{"_index":523,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["deep",{"_index":1496,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["default",{"_index":351,"title":{},"body":{"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["defer",{"_index":1851,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["define",{"_index":691,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["defined",{"_index":609,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["definitions",{"_index":1260,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["degradation",{"_index":756,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["deleting",{"_index":1063,"title":{},"body":{"index.html":{}}}],["demo",{"_index":1282,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["demonstrations",{"_index":1093,"title":{},"body":{"index.html":{}}}],["demos",{"_index":1770,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["depend",{"_index":1846,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["dependencies",{"_index":955,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":1872,"title":{},"body":{"additional-documentation/testing.html":{}}}],["depending",{"_index":401,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["depends",{"_index":1151,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":36,"title":{},"body":{"interfaces/BackendFactoryInput.html":{}}}],["derive",{"_index":1410,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["describe",{"_index":1651,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["describe(mycomponent.name",{"_index":1877,"title":{},"body":{"additional-documentation/testing.html":{}}}],["described",{"_index":1855,"title":{},"body":{"additional-documentation/testing.html":{}}}],["describing",{"_index":705,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["description",{"_index":6,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"properties.html":{}}}],["designed",{"_index":386,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{}}}],["desirable",{"_index":527,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["desktop",{"_index":1233,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["desktops",{"_index":1234,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["destroy",{"_index":281,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/guide.html":{},"additional-documentation/translating-react-code.html":{}}}],["destroy.unsubscribe",{"_index":284,"title":{},"body":{"injectables/DndService.html":{}}}],["destroyed",{"_index":182,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["destroying",{"_index":1320,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["destructive",{"_index":668,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["details",{"_index":726,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/testing.html":{}}}],["detection",{"_index":747,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/testing.html":{}}}],["determine",{"_index":719,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["devices",{"_index":1230,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["diagramming",{"_index":1079,"title":{},"body":{"index.html":{}}}],["diddrop",{"_index":606,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{}}}],["difference",{"_index":1791,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["differences",{"_index":1764,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["different",{"_index":453,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["differently",{"_index":1879,"title":{},"body":{"additional-documentation/testing.html":{}}}],["difficult",{"_index":1710,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["directive",{"_index":320,"title":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}},"body":{"injectables/DndService.html":{},"coverage.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["directives",{"_index":474,"title":{},"body":{"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"changelog.html":{},"overview.html":{},"additional-documentation/guide.html":{},"additional-documentation/translating-react-code.html":{}}}],["directly",{"_index":551,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["disappears",{"_index":1644,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["disconnect",{"_index":826,"title":{},"body":{"classes/Reconnector.html":{}}}],["discover",{"_index":1387,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["discussed",{"_index":1146,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["discussion",{"_index":786,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["dispatched",{"_index":632,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["displacement",{"_index":811,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["display",{"_index":423,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["distinctuntilchanged",{"_index":202,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["div",{"_index":1506,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["divs",{"_index":1517,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["dnd",{"_index":76,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"dependencies.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["dnd's",{"_index":322,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/translating-react-code.html":{}}}],["dnd.dragsource('item",{"_index":1783,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["dnd/core",{"_index":289,"title":{},"body":{"injectables/DndService.html":{},"changelog.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["dnd/multi",{"_index":440,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{}}}],["dnd/ng",{"_index":1161,"title":{},"body":{"properties.html":{}}}],["dnd/sortable",{"_index":1011,"title":{},"body":{"index.html":{}}}],["dnddirective",{"_index":479,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["dndmodule",{"_index":87,"title":{"modules/DndModule.html":{}},"body":{"interfaces/BackendInput.html":{},"modules/DndModule.html":{},"modules.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["dndmodule.forroot",{"_index":1197,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/testing.html":{}}}],["dndservice",{"_index":154,"title":{"injectables/DndService.html":{}},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetSpec.html":{},"coverage.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["dndservice#draglayer",{"_index":1306,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["dndservice#dragsource",{"_index":1303,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["dndservice#droptarget",{"_index":1305,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["dndservice.draglayer",{"_index":387,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["dndservice.dragsource",{"_index":1768,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["dndservice.droptarget(types",{"_index":175,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["dndzone",{"_index":115,"title":{},"body":{"classes/Connection.html":{}}}],["dock",{"_index":504,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"index.html":{}}}],["docs",{"_index":452,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/translating-react-code.html":{}}}],["documentation",{"_index":899,"title":{},"body":{"coverage.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["documented",{"_index":856,"title":{},"body":{"changelog.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["doesn't",{"_index":538,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceMonitor.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["doing",{"_index":715,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["dom",{"_index":149,"title":{"additional-documentation/guide/2.-connecting-to-dom.html":{}},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/MonitorBase.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["don't",{"_index":243,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragPreviewOptions.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["done",{"_index":1325,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["down",{"_index":1073,"title":{},"body":{"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["drag",{"_index":190,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"index.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["drag/drop",{"_index":1055,"title":{},"body":{"index.html":{}}}],["drag/listen",{"_index":330,"title":{},"body":{"injectables/DndService.html":{}}}],["drag_drop_backend",{"_index":940,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["drag_drop_backend_debug_mode",{"_index":942,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["drag_drop_backend_factory",{"_index":943,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["drag_drop_backend_options",{"_index":944,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["drag_drop_global_context",{"_index":945,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["drag_drop_manager",{"_index":946,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/testing.html":{}}}],["dragdropmanager",{"_index":114,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{},"additional-documentation/testing.html":{}}}],["dragdropmonitor",{"_index":650,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{}}}],["draggable",{"_index":439,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragged",{"_index":395,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragging",{"_index":233,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["draggingclassapplied",{"_index":1880,"title":{},"body":{"additional-documentation/testing.html":{}}}],["draglayer",{"_index":304,"title":{"interfaces/DragLayer.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"coverage.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["draglayer(subscription",{"_index":307,"title":{},"body":{"injectables/DndService.html":{}}}],["draglayer.listen",{"_index":390,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["draglayerconnectionclass",{"_index":455,"title":{"classes/DragLayerConnectionClass.html":{}},"body":{"classes/DragLayerConnectionClass.html":{},"coverage.html":{}}}],["draglayermonitor",{"_index":392,"title":{"interfaces/DragLayerMonitor.html":{}},"body":{"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"coverage.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["dragpreview",{"_index":483,"title":{},"body":{"directives/DragPreviewDirective.html":{},"classes/SourceConnector.html":{}}}],["dragpreview]=\"source",{"_index":1369,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragpreviewdirective",{"_index":473,"title":{"directives/DragPreviewDirective.html":{}},"body":{"directives/DragPreviewDirective.html":{},"coverage.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragpreviewoptions",{"_index":128,"title":{"interfaces/DragPreviewOptions.html":{}},"body":{"classes/Connection.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"coverage.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragsource",{"_index":305,"title":{"interfaces/DragSource.html":{}},"body":{"injectables/DndService.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DropTarget.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragsource's",{"_index":604,"title":{},"body":{"interfaces/DragSourceMonitor.html":{}}}],["dragsource('item",{"_index":1776,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["dragsource(type",{"_index":312,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragsource.connectdragpreview",{"_index":1392,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragsource.listen",{"_index":1676,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragsource.settype",{"_index":1187,"title":{},"body":{"miscellaneous/variables.html":{},"additional-documentation/translating-react-code.html":{}}}],["dragsource]=\"itemsource",{"_index":1833,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["dragsource]=\"source",{"_index":1382,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragsourceconnector",{"_index":839,"title":{},"body":{"classes/SourceConnector.html":{}}}],["dragsourcedecorator",{"_index":1164,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dragsourcedirective",{"_index":592,"title":{"directives/DragSourceDirective.html":{}},"body":{"directives/DragSourceDirective.html":{},"coverage.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragsourcefactory",{"_index":1166,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dragsourcemonitor",{"_index":602,"title":{"interfaces/DragSourceMonitor.html":{}},"body":{"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"classes/Source.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["dragsourcemonitor.id",{"_index":730,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["dragsourcemonitor.isdragging",{"_index":1677,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["dragsourcemonitorclass",{"_index":639,"title":{"classes/DragSourceMonitorClass.html":{}},"body":{"classes/DragSourceMonitorClass.html":{},"coverage.html":{}}}],["dragsourceoptions",{"_index":130,"title":{"interfaces/DragSourceOptions.html":{}},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"coverage.html":{}}}],["dragsourcespec",{"_index":313,"title":{"interfaces/DragSourceSpec.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"classes/Source.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["dragsourcespec.begindrag",{"_index":425,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["dragsourcetype",{"_index":593,"title":{},"body":{"directives/DragSourceDirective.html":{}}}],["dragula",{"_index":1111,"title":{},"body":{"index.html":{}}}],["draw",{"_index":1081,"title":{},"body":{"index.html":{}}}],["drill",{"_index":1072,"title":{},"body":{"index.html":{}}}],["drive",{"_index":1565,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["drop",{"_index":336,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["drop(monitor",{"_index":788,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["dropeffect",{"_index":653,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{}}}],["dropped",{"_index":701,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["dropping",{"_index":163,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["dropresult",{"_index":314,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{}}}],["drops",{"_index":1636,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["droptarget",{"_index":306,"title":{"interfaces/DropTarget.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["droptarget's",{"_index":770,"title":{},"body":{"interfaces/DropTargetMonitor.html":{}}}],["droptarget(types",{"_index":347,"title":{},"body":{"injectables/DndService.html":{}}}],["droptarget.listen",{"_index":1723,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["droptarget.settypes",{"_index":1188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["droptargetconnector",{"_index":848,"title":{},"body":{"classes/TargetConnector.html":{}}}],["droptargetdecorator",{"_index":1167,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["droptargetdirective",{"_index":758,"title":{"directives/DropTargetDirective.html":{}},"body":{"directives/DropTargetDirective.html":{},"coverage.html":{}}}],["droptargetfactory",{"_index":1168,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["droptargetmonitor",{"_index":768,"title":{"interfaces/DropTargetMonitor.html":{}},"body":{"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["droptargetmonitor.candrop",{"_index":1724,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["droptargetmonitor.isover",{"_index":1725,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["droptargetmonitorclass",{"_index":780,"title":{"classes/DropTargetMonitorClass.html":{}},"body":{"classes/DropTargetMonitorClass.html":{},"coverage.html":{}}}],["droptargetspec",{"_index":157,"title":{"interfaces/DropTargetSpec.html":{}},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["droptargetspec.candrop",{"_index":1405,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["droptargetspec.drop",{"_index":1436,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["droptargettype",{"_index":759,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["droptargettypes",{"_index":760,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["dt",{"_index":174,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["dt.add(subj.pipe",{"_index":184,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["dumb",{"_index":416,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["duplication",{"_index":406,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["duration",{"_index":166,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["during",{"_index":688,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["dx",{"_index":1614,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["dy",{"_index":1616,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["dynamic",{"_index":341,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/translating-react-code.html":{}}}],["dynamically",{"_index":568,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["e.g",{"_index":1376,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["each",{"_index":1209,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["earlier",{"_index":1722,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["easier",{"_index":586,"title":{},"body":{"interfaces/DragSource.html":{}}}],["easily",{"_index":552,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["easy",{"_index":272,"title":{},"body":{"injectables/DndService.html":{},"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/testing.html":{}}}],["editor",{"_index":1290,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["eee",{"_index":1400,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["effectively",{"_index":413,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["efficient",{"_index":1821,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["element",{"_index":318,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["element's",{"_index":1351,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["elementornode",{"_index":564,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["elementref",{"_index":1832,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["elementref.nativeelement",{"_index":554,"title":{},"body":{"interfaces/DragSource.html":{}}}],["elements",{"_index":375,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["elsewhere",{"_index":1564,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["emit",{"_index":1216,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["emits",{"_index":1659,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["empty",{"_index":537,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["emulate",{"_index":211,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["enable",{"_index":78,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{}}}],["enabled",{"_index":1251,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["enabled/disabled",{"_index":614,"title":{},"body":{"interfaces/DragSourceMonitor.html":{}}}],["encapsulation",{"_index":1494,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["encountered",{"_index":1264,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["enddrag",{"_index":623,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"classes/Source.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["enddrag(monitor",{"_index":721,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["ends",{"_index":335,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["enough",{"_index":1498,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["enters",{"_index":1029,"title":{},"body":{"index.html":{}}}],["entire",{"_index":1418,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["equality",{"_index":205,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["erasedto",{"_index":385,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["ergonomic",{"_index":1044,"title":{},"body":{"index.html":{}}}],["error",{"_index":1263,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["es6",{"_index":1843,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["eslint",{"_index":882,"title":{},"body":{"changelog.html":{}}}],["especially",{"_index":1341,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["essentially",{"_index":195,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["etc",{"_index":1828,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["etcthen",{"_index":1358,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["even",{"_index":431,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["event",{"_index":621,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/chess-tutorial.html":{}}}],["events",{"_index":421,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/testing.html":{}}}],["everything",{"_index":1335,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/translating-react-code.html":{}}}],["exact",{"_index":1864,"title":{},"body":{"additional-documentation/testing.html":{}}}],["exactly",{"_index":1424,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["example",{"_index":58,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["examples",{"_index":408,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["except",{"_index":1648,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["execute",{"_index":1624,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["executing",{"_index":1621,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["exist",{"_index":251,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["existing",{"_index":358,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["exiting",{"_index":164,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["expect",{"_index":686,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["expect(draggingclassapplied()).tobefalsy",{"_index":1901,"title":{},"body":{"additional-documentation/testing.html":{}}}],["expect(draggingclassapplied()).tobetruthy",{"_index":1895,"title":{},"body":{"additional-documentation/testing.html":{}}}],["experience",{"_index":755,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{}}}],["explicitly",{"_index":634,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["export",{"_index":59,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["exported",{"_index":1244,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["exports",{"_index":262,"title":{},"body":{"modules/DndModule.html":{},"additional-documentation/quickstart.html":{}}}],["express",{"_index":1548,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["expresses",{"_index":1404,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["extended",{"_index":785,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["extends",{"_index":18,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/translating-react-code.html":{}}}],["extension",{"_index":83,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{}}}],["extra",{"_index":690,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["f8fb0df",{"_index":885,"title":{},"body":{"changelog.html":{}}}],["fact",{"_index":1120,"title":{},"body":{"index.html":{}}}],["factory.ts",{"_index":98,"title":{},"body":{"classes/Connection.html":{},"interfaces/FactoryArgs.html":{},"interfaces/SourceConstructor.html":{},"interfaces/TargetConstructor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["factoryargs",{"_index":113,"title":{"interfaces/FactoryArgs.html":{}},"body":{"classes/Connection.html":{},"interfaces/FactoryArgs.html":{},"coverage.html":{}}}],["fairly",{"_index":1762,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["false",{"_index":464,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"miscellaneous/variables.html":{}}}],["familiar",{"_index":1455,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["famous",{"_index":1074,"title":{},"body":{"index.html":{}}}],["fancy",{"_index":1590,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["far",{"_index":1826,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["faster",{"_index":1113,"title":{},"body":{"index.html":{}}}],["feature",{"_index":659,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["features",{"_index":881,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["few",{"_index":1070,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["figure",{"_index":1715,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"interfaces/SourceConstructor.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"interfaces/TargetConstructor.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["find",{"_index":1116,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["finished",{"_index":1459,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["fire",{"_index":247,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["fireaction",{"_index":1780,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["fireaction(item",{"_index":1786,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["fired",{"_index":1350,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["fires",{"_index":242,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["first",{"_index":1308,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["fit",{"_index":1021,"title":{},"body":{"index.html":{}}}],["five",{"_index":1804,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["fix",{"_index":872,"title":{},"body":{"changelog.html":{}}}],["fixed",{"_index":402,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["fixes",{"_index":871,"title":{},"body":{"changelog.html":{}}}],["fixture",{"_index":1878,"title":{},"body":{"additional-documentation/testing.html":{}}}],["fixture.componentinstance",{"_index":1888,"title":{},"body":{"additional-documentation/testing.html":{}}}],["fixture.debugelement.query(by.css('.dragging",{"_index":1881,"title":{},"body":{"additional-documentation/testing.html":{}}}],["fixture.detectchanges",{"_index":1890,"title":{},"body":{"additional-documentation/testing.html":{}}}],["flag",{"_index":615,"title":{},"body":{"interfaces/DragSourceMonitor.html":{}}}],["flight",{"_index":1023,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["floating",{"_index":1653,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["flow",{"_index":1019,"title":{},"body":{"index.html":{}}}],["flows",{"_index":379,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["fly",{"_index":583,"title":{},"body":{"interfaces/DragSource.html":{}}}],["fn",{"_index":125,"title":{},"body":{"classes/Connection.html":{},"classes/Source.html":{},"classes/Target.html":{}}}],["folder",{"_index":1069,"title":{},"body":{"index.html":{}}}],["follow",{"_index":376,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["following",{"_index":168,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["follows",{"_index":1367,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["font",{"_index":1469,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["foreground",{"_index":1480,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["forget",{"_index":277,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/quickstart.html":{}}}],["form",{"_index":1368,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["forroot",{"_index":70,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"modules/DndModule.html":{},"additional-documentation/quickstart.html":{}}}],["forroot(backendorbackendfactory",{"_index":264,"title":{},"body":{"modules/DndModule.html":{}}}],["forrootto",{"_index":1204,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["found",{"_index":1134,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["four",{"_index":1458,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["free",{"_index":1822,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["frequently",{"_index":800,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["fresh",{"_index":1560,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["friendly",{"_index":1022,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["full",{"_index":1033,"title":{},"body":{"index.html":{}}}],["function",{"_index":63,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"interfaces/FactoryArgs.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/Target.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["functioning",{"_index":1806,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["functions",{"_index":441,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/DragLayer.html":{},"miscellaneous/functions.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["funky",{"_index":1755,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["game",{"_index":1438,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["gameservice",{"_index":1567,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["gameservice.canmoveknight",{"_index":1632,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["gameservice.moveknight",{"_index":1600,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["general",{"_index":442,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceMonitor.html":{},"additional-documentation/guide.html":{}}}],["getclientoffset",{"_index":643,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getclosed",{"_index":143,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{}}}],["getdifferencefrominitialoffset",{"_index":644,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getdropresult",{"_index":607,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{}}}],["gethandlerid",{"_index":103,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["getinitialclientoffset",{"_index":645,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getinitialsourceclientoffset",{"_index":646,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getitem",{"_index":647,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getitemtype",{"_index":648,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["gets",{"_index":744,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["getsourceclientoffset",{"_index":649,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/MonitorBase.html":{}}}],["getstyle",{"_index":1486,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["getting",{"_index":851,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["gifs",{"_index":1094,"title":{},"body":{"index.html":{}}}],["github",{"_index":1147,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["give",{"_index":1594,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["given",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gives",{"_index":1819,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["glance",{"_index":1672,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["global",{"_index":372,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["globalmonitor",{"_index":835,"title":{},"body":{"classes/Source.html":{}}}],["gme",{"_index":1707,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["go",{"_index":1558,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["goals",{"_index":1026,"title":{},"body":{"index.html":{}}}],["going",{"_index":791,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["good",{"_index":299,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["grab",{"_index":1386,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/testing.html":{}}}],["graphical",{"_index":1087,"title":{},"body":{"index.html":{}}}],["green",{"_index":1719,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["greenplus",{"_index":699,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["grid",{"_index":1526,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["grouping",{"_index":227,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["groupings",{"_index":582,"title":{},"body":{"interfaces/DragSource.html":{}}}],["guidance",{"_index":1708,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["guide",{"_index":1224,"title":{"additional-documentation/guide.html":{}},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["guidelines",{"_index":860,"title":{},"body":{"changelog.html":{}}}],["habit",{"_index":300,"title":{},"body":{"injectables/DndService.html":{}}}],["handle",{"_index":438,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["handled",{"_index":553,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{}}}],["handler",{"_index":1627,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["handlerid",{"_index":258,"title":{},"body":{"interfaces/Connector.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["handles",{"_index":1346,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["handlesquareclick",{"_index":1620,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["handlesquareclick(pos",{"_index":1602,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["hanging",{"_index":245,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["happen",{"_index":1647,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["happens",{"_index":1056,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["happily",{"_index":210,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["hard",{"_index":713,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["having",{"_index":276,"title":{},"body":{"injectables/DndService.html":{}}}],["head",{"_index":1253,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["heavy",{"_index":1702,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["height",{"_index":1475,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["help",{"_index":1141,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["helpful",{"_index":1428,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["here",{"_index":69,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["here's",{"_index":1597,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["hide",{"_index":534,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["high",{"_index":1027,"title":{},"body":{"index.html":{}}}],["higher",{"_index":1792,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["highlighted",{"_index":1435,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["hinders",{"_index":1417,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["hint",{"_index":665,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["hoist",{"_index":332,"title":{},"body":{"injectables/DndService.html":{}}}],["hold",{"_index":1549,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["hook",{"_index":344,"title":{},"body":{"injectables/DndService.html":{},"classes/Reconnector.html":{},"additional-documentation/chess-tutorial.html":{}}}],["hooks",{"_index":253,"title":{},"body":{"interfaces/Connector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["horizontal",{"_index":500,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["horse",{"_index":1756,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["host",{"_index":1505,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["hover",{"_index":161,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/testing.html":{}}}],["hover(monitor",{"_index":799,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["hovered",{"_index":778,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/testing.html":{}}}],["hovering",{"_index":775,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["hovers",{"_index":801,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"index.html":{}}}],["html",{"_index":1483,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["html5",{"_index":353,"title":{},"body":{"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["html5backend",{"_index":89,"title":{},"body":{"interfaces/BackendInput.html":{},"additional-documentation/quickstart.html":{}}}],["html5dropresult",{"_index":693,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["https",{"_index":1752,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["https://github.com/ng",{"_index":1160,"title":{},"body":{"properties.html":{}}}],["icon",{"_index":700,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["id",{"_index":429,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/testing.html":{}}}],["idea",{"_index":717,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["identical",{"_index":1721,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["identifier",{"_index":257,"title":{},"body":{"interfaces/Connector.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"coverage.html":{}}}],["ids",{"_index":1889,"title":{},"body":{"additional-documentation/testing.html":{}}}],["ie",{"_index":532,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["ie11",{"_index":600,"title":{},"body":{"directives/DragSourceDirective.html":{}}}],["illegal",{"_index":1625,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["illustrate",{"_index":1766,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["image",{"_index":360,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["imaginary",{"_index":1257,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["imagine",{"_index":1840,"title":{},"body":{"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["img",{"_index":556,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["img.onload",{"_index":557,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["img.src",{"_index":559,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["immediate",{"_index":563,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["immediately",{"_index":513,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["implement",{"_index":1051,"title":{},"body":{"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["implementation",{"_index":1421,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["implemented",{"_index":1231,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["implementing",{"_index":1444,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["implements",{"_index":458,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"classes/DragSourceMonitorClass.html":{},"directives/DropTargetDirective.html":{},"classes/DropTargetMonitorClass.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{}}}],["import",{"_index":294,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["important",{"_index":432,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["importing",{"_index":1254,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["imports",{"_index":1196,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/testing.html":{}}}],["improvements",{"_index":1145,"title":{},"body":{"index.html":{}}}],["include",{"_index":1207,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["includes",{"_index":1243,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["including",{"_index":444,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["incorporate",{"_index":1701,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["independent",{"_index":1543,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["index",{"_index":19,"title":{"index.html":{}},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicator",{"_index":1709,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["indices",{"_index":1554,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["inferring",{"_index":678,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"interfaces/SourceConstructor.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"interfaces/TargetConstructor.html":{}}}],["information",{"_index":543,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["initial",{"_index":812,"title":{},"body":{"interfaces/MonitorBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["initialized",{"_index":1203,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["initialtype",{"_index":117,"title":{},"body":{"classes/Connection.html":{}}}],["initiated",{"_index":638,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{}}}],["inject",{"_index":1205,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["injectable",{"_index":267,"title":{"injectables/DndService.html":{}},"body":{"coverage.html":{},"overview.html":{},"additional-documentation/chess-tutorial.html":{}}}],["injectables",{"_index":268,"title":{},"body":{"injectables/DndService.html":{}}}],["injected",{"_index":1798,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["injection",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{},"additional-documentation/testing.html":{}}}],["injectiontoken",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('dnd",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inline",{"_index":1024,"title":{},"body":{"index.html":{}}}],["input",{"_index":419,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["inputs",{"_index":485,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["inside",{"_index":467,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["inspired",{"_index":1213,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["install",{"_index":1867,"title":{},"body":{"additional-documentation/testing.html":{}}}],["installation",{"_index":1004,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["instance",{"_index":1206,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["instantiate",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instead",{"_index":515,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/translating-react-code.html":{}}}],["instructions",{"_index":1268,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["interaction",{"_index":1242,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["interactions",{"_index":1052,"title":{},"body":{"index.html":{},"additional-documentation/testing.html":{}}}],["interactive",{"_index":1374,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["interactivity",{"_index":420,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["interest",{"_index":1759,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["interested",{"_index":1575,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["interesting",{"_index":1646,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AddSubscription.html":{},"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"interfaces/SourceConstructor.html":{},"interfaces/TargetConstructor.html":{}},"body":{"interfaces/DragSourceSpec.html":{},"coverage.html":{},"additional-documentation/chess-tutorial.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"interfaces/DragLayer.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"interfaces/SourceConstructor.html":{},"interfaces/TargetConstructor.html":{},"index.html":{},"overview.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["internally",{"_index":155,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["internalmonitor",{"_index":641,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{}}}],["internals",{"_index":328,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/translating-react-code.html":{}}}],["interpolate",{"_index":506,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["introducing",{"_index":1588,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["invariant",{"_index":932,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["invariant(assertion",{"_index":988,"title":{},"body":{"miscellaneous/functions.html":{}}}],["investigate",{"_index":1359,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["isblack",{"_index":1559,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["iscallingcandrag",{"_index":925,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["iscallingcandrop",{"_index":930,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["iscallingisdragging",{"_index":926,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isdragging",{"_index":217,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"classes/Source.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["isdragging(globalmonitor",{"_index":834,"title":{},"body":{"classes/Source.html":{}}}],["isdragging(monitor",{"_index":727,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["isdraggingobj",{"_index":1427,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["isdraggingplain",{"_index":1425,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["ish.ts",{"_index":819,"title":{},"body":{"interfaces/Offset.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["isn't",{"_index":612,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"additional-documentation/chess-tutorial.html":{}}}],["isolate",{"_index":1859,"title":{},"body":{"additional-documentation/testing.html":{}}}],["isolation",{"_index":1856,"title":{},"body":{"additional-documentation/testing.html":{}}}],["isover",{"_index":219,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["isover(options",{"_index":771,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{}}}],["issue",{"_index":1140,"title":{},"body":{"index.html":{}}}],["issues",{"_index":1132,"title":{},"body":{"index.html":{}}}],["isticking",{"_index":459,"title":{},"body":{"classes/DragLayerConnectionClass.html":{}}}],["it's",{"_index":706,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["it('should",{"_index":1893,"title":{},"body":{"additional-documentation/testing.html":{}}}],["item",{"_index":308,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["item's",{"_index":813,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["items",{"_index":339,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceOptions.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["itemsource",{"_index":1782,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["itemsourcespec",{"_index":1771,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["itemtypes",{"_index":1657,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["itemtypes.knight",{"_index":1660,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["itself",{"_index":1420,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["javascript",{"_index":704,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["jest",{"_index":1853,"title":{},"body":{"additional-documentation/testing.html":{}}}],["job",{"_index":1370,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["jones",{"_index":1356,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["js",{"_index":674,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["jsx",{"_index":1829,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["kanban",{"_index":738,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["keep",{"_index":616,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"additional-documentation/chess-tutorial.html":{}}}],["key",{"_index":697,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["keys",{"_index":1423,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["keywords",{"_index":1157,"title":{},"body":{"properties.html":{}}}],["kinds",{"_index":1241,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["knight",{"_index":1439,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knight's",{"_index":1574,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knightcomponent",{"_index":1445,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knightposition",{"_index":1562,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knightposition$|async",{"_index":1592,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knights",{"_index":1652,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["knightsource",{"_index":1665,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["know",{"_index":709,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["kp",{"_index":1612,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["laid",{"_index":1409,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["large",{"_index":1338,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["largely",{"_index":1036,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["last",{"_index":627,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/chess-tutorial.html":{}}}],["lastly",{"_index":1746,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["later",{"_index":733,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["layer",{"_index":369,"title":{},"body":{"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"coverage.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["layers",{"_index":412,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"additional-documentation/testing.html":{}}}],["lazy",{"_index":1200,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["leaked",{"_index":302,"title":{},"body":{"injectables/DndService.html":{}}}],["learn",{"_index":512,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["learnable",{"_index":1712,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["learning",{"_index":1114,"title":{},"body":{"index.html":{}}}],["leave",{"_index":244,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["left",{"_index":505,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["let's",{"_index":1520,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["lets",{"_index":80,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"interfaces/DragLayer.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["level",{"_index":1049,"title":{},"body":{"index.html":{}}}],["libraries",{"_index":1639,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["library",{"_index":1104,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["license",{"_index":1148,"title":{},"body":{"index.html":{},"properties.html":{}}}],["lifecycle",{"_index":343,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["lifetime",{"_index":346,"title":{},"body":{"injectables/DndService.html":{}}}],["lifting",{"_index":1703,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["lightgoldenrodyellow",{"_index":1401,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["lightweight",{"_index":1570,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["limitations",{"_index":357,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/translating-react-code.html":{}}}],["limitedsupplyofpaper",{"_index":1276,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["line",{"_index":1474,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["linearly",{"_index":507,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["liners",{"_index":1279,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["lines",{"_index":1748,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["link",{"_index":656,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"additional-documentation/translating-react-code.html":{}}}],["linked",{"_index":1504,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["links",{"_index":1082,"title":{},"body":{"index.html":{}}}],["list",{"_index":546,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["listen",{"_index":104,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["listen()/subscribe",{"_index":156,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["listen(m",{"_index":236,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/translating-react-code.html":{}}}],["listen(mapfn",{"_index":132,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{}}}],["listen(mapto",{"_index":186,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{}}}],["listens",{"_index":1860,"title":{},"body":{"additional-documentation/testing.html":{}}}],["lists",{"_index":737,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["literal",{"_index":772,"title":{},"body":{"interfaces/DropTargetMonitor.html":{}}}],["little",{"_index":1668,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["live",{"_index":1462,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["lives",{"_index":1017,"title":{},"body":{"index.html":{}}}],["load",{"_index":1389,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["loaded",{"_index":1201,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["log",{"_index":853,"title":{},"body":{"changelog.html":{}}}],["logic",{"_index":617,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["long",{"_index":1749,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["longer",{"_index":250,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["look",{"_index":1221,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["looking",{"_index":1319,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/translating-react-code.html":{}}}],["looks",{"_index":1674,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["loops",{"_index":1522,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["lot",{"_index":1219,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["lots",{"_index":274,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["lower",{"_index":1048,"title":{},"body":{"index.html":{}}}],["luna",{"_index":1092,"title":{},"body":{"index.html":{}}}],["m.candrop",{"_index":1733,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["m.candrop());what",{"_index":1408,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["m.isdragging",{"_index":237,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["m.isover",{"_index":1407,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["macos",{"_index":1065,"title":{},"body":{"index.html":{}}}],["made",{"_index":562,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"index.html":{}}}],["maintain",{"_index":1328,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["maintaining",{"_index":1124,"title":{},"body":{"index.html":{}}}],["maintains",{"_index":188,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["make",{"_index":388,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["makes",{"_index":1685,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["making",{"_index":751,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["managed",{"_index":1807,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["manager",{"_index":67,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"miscellaneous/functions.html":{},"additional-documentation/testing.html":{}}}],["manager.getbackend",{"_index":1886,"title":{},"body":{"additional-documentation/testing.html":{}}}],["mandated",{"_index":1765,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["manually",{"_index":1186,"title":{},"body":{"miscellaneous/variables.html":{},"additional-documentation/translating-react-code.html":{}}}],["many",{"_index":349,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["map",{"_index":1731,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["map(coll",{"_index":1740,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["mapfn",{"_index":136,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{}}}],["mapto",{"_index":238,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{}}}],["marker",{"_index":1183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["match",{"_index":502,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["matching",{"_index":33,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"interfaces/SourceConstructor.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"interfaces/TargetConstructor.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["math.abs(dx",{"_index":1618,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["math.abs(dy",{"_index":1619,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["math.floor(i",{"_index":1557,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["maximally",{"_index":1043,"title":{},"body":{"index.html":{}}}],["maybe",{"_index":280,"title":{},"body":{"injectables/DndService.html":{}}}],["mcfly",{"_index":1357,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["mean",{"_index":1516,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["meaning",{"_index":1054,"title":{},"body":{"index.html":{}}}],["means",{"_index":503,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["merging",{"_index":1068,"title":{},"body":{"index.html":{}}}],["mesource",{"_index":1354,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["metadata",{"_index":481,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["metarget",{"_index":1362,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["method",{"_index":17,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide.html":{}}}],["methods",{"_index":20,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["midflight",{"_index":362,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["minimal",{"_index":708,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["miscellaneous",{"_index":965,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1150,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mobile",{"_index":1229,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["mode",{"_index":50,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":576,"title":{},"body":{"interfaces/DragSource.html":{}}}],["modern",{"_index":1529,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["modify",{"_index":724,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["module",{"_index":259,"title":{"modules/DndModule.html":{}},"body":{"overview.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["module's",{"_index":1477,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["modulenamemapper",{"_index":1854,"title":{},"body":{"additional-documentation/testing.html":{}}}],["modules",{"_index":260,"title":{"modules.html":{}},"body":{"modules/DndModule.html":{},"modules.html":{},"additional-documentation/quickstart.html":{}}}],["modulewithproviders",{"_index":266,"title":{},"body":{"modules/DndModule.html":{}}}],["moment",{"_index":1628,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["monitor",{"_index":133,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"classes/Source.html":{},"classes/Target.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["monitor.candrop",{"_index":222,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["monitor.diddrop",{"_index":1281,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["monitor.getdropresult",{"_index":687,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["monitor.getitem",{"_index":675,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["monitor.isdragging",{"_index":218,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["monitor.isover",{"_index":220,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["monitor.ts",{"_index":466,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"coverage.html":{}}}],["monitorbase",{"_index":468,"title":{"interfaces/MonitorBase.html":{}},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/MonitorBase.html":{},"coverage.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["monitoring",{"_index":1300,"title":{"additional-documentation/guide/3.-monitoring-state.html":{}},"body":{"additional-documentation/guide.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["monitors",{"_index":1412,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["moot",{"_index":1812,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["more",{"_index":54,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["mounted",{"_index":745,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["mouse",{"_index":377,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["movable",{"_index":1060,"title":{},"body":{"index.html":{}}}],["move",{"_index":655,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["moved",{"_index":383,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["moveknight",{"_index":1638,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["moveknight(to",{"_index":1581,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["moves",{"_index":384,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["moving",{"_index":735,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["msg",{"_index":989,"title":{},"body":{"miscellaneous/functions.html":{}}}],["much",{"_index":1598,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["multi",{"_index":10,"title":{},"body":{"interfaces/AddSubscription.html":{},"additional-documentation/quickstart.html":{}}}],["multibackend",{"_index":93,"title":{},"body":{"interfaces/BackendInput.html":{},"additional-documentation/quickstart.html":{}}}],["multibackend(html5totouch",{"_index":1248,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["multiple",{"_index":1802,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["mutable",{"_index":1099,"title":{},"body":{"index.html":{}}}],["mutate",{"_index":1012,"title":{},"body":{"index.html":{}}}],["mybackend",{"_index":1262,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["mybackendfactory",{"_index":64,"title":{},"body":{"interfaces/BackendFactoryInput.html":{}}}],["mycomponent",{"_index":1778,"title":{},"body":{"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["mydraggeditemtype",{"_index":683,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["mydropresult",{"_index":694,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["name",{"_index":27,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragSource.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["named",{"_index":56,"title":{},"body":{"interfaces/BackendFactoryInput.html":{}}}],["neat",{"_index":1323,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["necessarily",{"_index":1102,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":47,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/DragLayer.html":{},"index.html":{}}}],["need",{"_index":533,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["nested",{"_index":633,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{}}}],["never",{"_index":1419,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["new",{"_index":41,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["next",{"_index":516,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["nextoptions",{"_index":981,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ng",{"_index":288,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"changelog.html":{},"index.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["ng2",{"_index":1110,"title":{},"body":{"index.html":{}}}],["ngfor",{"_index":1347,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["ngif",{"_index":226,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["ngif=\"aaa",{"_index":1595,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["ngmodule",{"_index":1195,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["ngonchanges",{"_index":484,"title":{},"body":{"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/translating-react-code.html":{}}}],["ngondestroy",{"_index":241,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["ngoninit",{"_index":575,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["ngrx",{"_index":1571,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["ngrx/store",{"_index":798,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"index.html":{}}}],["ngstyle",{"_index":1491,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["ngswitch",{"_index":403,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["ngx",{"_index":1158,"title":{},"body":{"properties.html":{}}}],["ngzone.run",{"_index":754,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["noble",{"_index":1604,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["node",{"_index":127,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"classes/Reconnector.html":{},"additional-documentation/quickstart.html":{}}}],["node,options",{"_index":829,"title":{},"body":{"classes/Reconnector.html":{}}}],["nodes",{"_index":1083,"title":{},"body":{"index.html":{}}}],["nohtml5preview",{"_index":594,"title":{},"body":{"directives/DragSourceDirective.html":{}}}],["non",{"_index":764,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["none",{"_index":657,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["notable",{"_index":854,"title":{},"body":{"changelog.html":{}}}],["notation",{"_index":1814,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["note",{"_index":610,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"changelog.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["nothing",{"_index":790,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["notice",{"_index":1514,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["noticed",{"_index":1240,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["notified",{"_index":193,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["notifies",{"_index":722,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["notifying",{"_index":334,"title":{},"body":{"injectables/DndService.html":{}}}],["now",{"_index":397,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["null",{"_index":234,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"injectables/DndService.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/MonitorBase.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["number",{"_index":492,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/Offset.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["o",{"_index":187,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"classes/Reconnector.html":{}}}],["obja",{"_index":995,"title":{},"body":{"miscellaneous/functions.html":{}}}],["objb",{"_index":994,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":310,"title":{},"body":{"injectables/DndService.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["objects",{"_index":208,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["observable",{"_index":137,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["observable.combinelatest",{"_index":1824,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["observable.map",{"_index":196,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["observables",{"_index":1727,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["observe",{"_index":1726,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["obvious",{"_index":1711,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["occur",{"_index":519,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["offer",{"_index":1307,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["offers",{"_index":1218,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/testing.html":{}}}],["offset",{"_index":497,"title":{"interfaces/Offset.html":{}},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"coverage.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["offsetx",{"_index":490,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["offsety",{"_index":491,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["once",{"_index":285,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["onchanges",{"_index":480,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["one",{"_index":197,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["ones",{"_index":1287,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["onload",{"_index":1390,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["onpush",{"_index":1035,"title":{},"body":{"index.html":{}}}],["op",{"_index":1866,"title":{},"body":{"additional-documentation/testing.html":{}}}],["opacity",{"_index":524,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["operation",{"_index":470,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/MonitorBase.html":{},"index.html":{},"additional-documentation/quickstart.html":{}}}],["operations",{"_index":1212,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["opposed",{"_index":779,"title":{},"body":{"interfaces/DropTargetMonitor.html":{}}}],["optimisation",{"_index":1411,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["optimise",{"_index":1415,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["optimises",{"_index":1422,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["optimization",{"_index":199,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["option",{"_index":664,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["optional",{"_index":29,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":629,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["options",{"_index":44,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"classes/Reconnector.html":{},"miscellaneous/variables.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["optionshere",{"_index":1269,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["order",{"_index":1793,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["original",{"_index":535,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["others",{"_index":1001,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":472,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{}}}],["out",{"_index":1003,"title":{},"body":{"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["output",{"_index":200,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"additional-documentation/translating-react-code.html":{}}}],["outside",{"_index":625,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{}}}],["over",{"_index":407,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["overall",{"_index":1383,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["overlay",{"_index":1728,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["overlaystyle",{"_index":1738,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["override",{"_index":729,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["overrides",{"_index":635,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["overview",{"_index":1153,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":637,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{}}}],["owner's",{"_index":608,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["p",{"_index":135,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{}}}],["package",{"_index":866,"title":{"dependencies.html":{},"properties.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["packages",{"_index":1010,"title":{},"body":{"index.html":{}}}],["page",{"_index":409,"title":{"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["papercount",{"_index":1275,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["parameter",{"_index":291,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragSource.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{}}}],["parent",{"_index":579,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/chess-tutorial.html":{}}}],["parentid",{"_index":577,"title":{},"body":{"interfaces/DragSource.html":{}}}],["part",{"_index":1223,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["particular",{"_index":545,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["particularly",{"_index":1434,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["parts",{"_index":1700,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["pass",{"_index":342,"title":{},"body":{"injectables/DndService.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["passed",{"_index":671,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["paste",{"_index":1789,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["pattern",{"_index":45,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{}}}],["patterns",{"_index":1836,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["paying",{"_index":1511,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["peer",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["per",{"_index":404,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["perfectly",{"_index":1691,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["perform",{"_index":364,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DropTargetSpec.html":{}}}],["performance",{"_index":748,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["pick",{"_index":707,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["picked",{"_index":1682,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["piece",{"_index":410,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["pieces",{"_index":1061,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["pipe",{"_index":1396,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["pipeline",{"_index":1091,"title":{},"body":{"index.html":{}}}],["pipes",{"_index":1429,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["place",{"_index":723,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["placed",{"_index":1544,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["places",{"_index":797,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["placing",{"_index":1547,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["plain",{"_index":88,"title":{},"body":{"interfaces/BackendInput.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/Offset.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["planning",{"_index":433,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["play",{"_index":1461,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["players",{"_index":1683,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["plenty",{"_index":1105,"title":{},"body":{"index.html":{}}}],["plural",{"_index":765,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["point",{"_index":1510,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["pointer",{"_index":773,"title":{},"body":{"interfaces/DropTargetMonitor.html":{}}}],["poor",{"_index":1344,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["populated",{"_index":1850,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["posing",{"_index":1371,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["position",{"_index":400,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["possibile",{"_index":454,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["possible",{"_index":1037,"title":{},"body":{"index.html":{}}}],["potential",{"_index":1144,"title":{},"body":{"index.html":{}}}],["power",{"_index":1118,"title":{},"body":{"index.html":{}}}],["powered",{"_index":1002,"title":{},"body":{"index.html":{}}}],["powerful",{"_index":1109,"title":{},"body":{"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["practice",{"_index":430,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["precisely",{"_index":1031,"title":{},"body":{"index.html":{}}}],["prefer",{"_index":39,"title":{},"body":{"interfaces/BackendFactoryInput.html":{}}}],["presents",{"_index":1761,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["preserves",{"_index":1695,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["pressed",{"_index":698,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["prevent",{"_index":677,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["preview",{"_index":355,"title":{},"body":{"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["previews",{"_index":437,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["previously",{"_index":570,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{}}}],["primary",{"_index":1795,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["private",{"_index":1706,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["probably",{"_index":224,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["problem",{"_index":1139,"title":{},"body":{"index.html":{}}}],["problems",{"_index":1237,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["procedure",{"_index":1720,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["process",{"_index":1689,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["produced",{"_index":340,"title":{},"body":{"injectables/DndService.html":{}}}],["product",{"_index":1460,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["program",{"_index":1086,"title":{},"body":{"index.html":{}}}],["progress",{"_index":471,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["project",{"_index":855,"title":{},"body":{"changelog.html":{}}}],["projected",{"_index":816,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["properties",{"_index":71,"title":{"properties.html":{}},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"interfaces/Connector.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragPreviewOptions.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/FactoryArgs.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["property",{"_index":572,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["props",{"_index":1772,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["props.someproperty",{"_index":1774,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["props.type",{"_index":1839,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["prospective",{"_index":1608,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["provide",{"_index":158,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceOptions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{}}}],["provides",{"_index":435,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["providing",{"_index":86,"title":{},"body":{"interfaces/BackendInput.html":{}}}],["public",{"_index":303,"title":{},"body":{"injectables/DndService.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["pulls",{"_index":427,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["purely",{"_index":417,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["put",{"_index":711,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["queries",{"_index":325,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["query",{"_index":1088,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["quick",{"_index":1769,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["quickstart",{"_index":1007,"title":{"additional-documentation/quickstart.html":{}},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["quite",{"_index":1108,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["rapidly",{"_index":1413,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["rare",{"_index":529,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["rarely",{"_index":526,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["re",{"_index":1028,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["react",{"_index":212,"title":{"additional-documentation/translating-react-code.html":{}},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"index.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["react.component",{"_index":1779,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["react/react",{"_index":1788,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["read",{"_index":451,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["reading",{"_index":1443,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["real",{"_index":1296,"title":{},"body":{"additional-documentation/guide.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["really",{"_index":1515,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["rears",{"_index":1252,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["reasons",{"_index":749,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{}}}],["received",{"_index":793,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["receivehandlerid",{"_index":254,"title":{},"body":{"interfaces/Connector.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["receivehandlerid(handlerid",{"_index":256,"title":{},"body":{"interfaces/Connector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["receivehandlerid(sourceid",{"_index":651,"title":{},"body":{"classes/DragSourceMonitorClass.html":{}}}],["receivehandlerid(targetid",{"_index":783,"title":{},"body":{"classes/DropTargetMonitorClass.html":{}}}],["receivemonitor",{"_index":844,"title":{},"body":{"classes/Target.html":{}}}],["receivemonitor(monitor",{"_index":845,"title":{},"body":{"classes/Target.html":{}}}],["receivetype",{"_index":105,"title":{},"body":{"classes/Connection.html":{}}}],["receivetype(type",{"_index":138,"title":{},"body":{"classes/Connection.html":{}}}],["recent",{"_index":1579,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["recently",{"_index":1897,"title":{},"body":{"additional-documentation/testing.html":{}}}],["recognises",{"_index":692,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["recommended",{"_index":1337,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["reconnect",{"_index":255,"title":{},"body":{"interfaces/Connector.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{}}}],["reconnector",{"_index":824,"title":{"classes/Reconnector.html":{}},"body":{"classes/Reconnector.html":{},"coverage.html":{}}}],["recorded",{"_index":628,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["rectangle",{"_index":1353,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["red",{"_index":1718,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["reduce",{"_index":405,"title":{},"body":{"interfaces/DragLayer.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["redundant",{"_index":1589,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["redux",{"_index":82,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{}}}],["refer",{"_index":548,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/translating-react-code.html":{}}}],["reference",{"_index":204,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceSpec.html":{},"changelog.html":{},"additional-documentation/translating-react-code.html":{}}}],["refers",{"_index":1284,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["reflected",{"_index":525,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["registered",{"_index":338,"title":{},"body":{"injectables/DndService.html":{}}}],["registerhandler",{"_index":805,"title":{},"body":{"interfaces/FactoryArgs.html":{}}}],["registers",{"_index":1210,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["registersource",{"_index":935,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["registersource(type",{"_index":991,"title":{},"body":{"miscellaneous/functions.html":{}}}],["registertarget",{"_index":937,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["registertarget(type",{"_index":992,"title":{},"body":{"miscellaneous/functions.html":{}}}],["regular",{"_index":1286,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["related",{"_index":544,"title":{},"body":{"interfaces/DragSource.html":{},"index.html":{}}}],["relative",{"_index":498,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["released",{"_index":1149,"title":{},"body":{"index.html":{}}}],["relevant",{"_index":478,"title":{},"body":{"directives/DragPreviewDirective.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["remember",{"_index":1301,"title":{},"body":{"additional-documentation/guide.html":{}}}],["reminded",{"_index":1185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":883,"title":{},"body":{"changelog.html":{},"additional-documentation/chess-tutorial.html":{}}}],["renamed",{"_index":1827,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["renaming",{"_index":1255,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["render",{"_index":374,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["rendered",{"_index":381,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/testing.html":{}}}],["rendering",{"_index":352,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["renders",{"_index":1521,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["repeat(8",{"_index":1535,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["replace",{"_index":1698,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["replacing",{"_index":1626,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["replay",{"_index":1578,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["replicate",{"_index":618,"title":{},"body":{"interfaces/DragSourceMonitor.html":{}}}],["repository",{"_index":1159,"title":{},"body":{"properties.html":{}}}],["represent",{"_index":148,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["representing",{"_index":626,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["represents",{"_index":7,"title":{},"body":{"interfaces/AddSubscription.html":{},"injectables/DndService.html":{},"interfaces/DropTarget.html":{}}}],["require",{"_index":167,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/testing.html":{}}}],["required",{"_index":703,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/quickstart.html":{}}}],["requires",{"_index":1245,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["resolve",{"_index":1293,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["resolving",{"_index":1265,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["resorting",{"_index":536,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["respectively",{"_index":1215,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["respond",{"_index":1299,"title":{},"body":{"additional-documentation/guide.html":{}}}],["responsible",{"_index":1446,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["rest",{"_index":1848,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["result",{"_index":622,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["result.dropeffect",{"_index":695,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["resulting",{"_index":1394,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["results",{"_index":32,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"interfaces/SourceConstructor.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"interfaces/TargetConstructor.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["resurrected",{"_index":734,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["retain",{"_index":740,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/quickstart.html":{}}}],["return",{"_index":66,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/ConnectionBase.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["returned",{"_index":181,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"interfaces/MonitorBase.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["returning",{"_index":630,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{}}}],["returns",{"_index":30,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"interfaces/DragLayerMonitor.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"miscellaneous/functions.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["reusable",{"_index":820,"title":{},"body":{"interfaces/Offset.html":{}}}],["reuse",{"_index":422,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["rgba(0,0,0,0",{"_index":1743,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["right",{"_index":508,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["root",{"_index":817,"title":{},"body":{"interfaces/MonitorBase.html":{},"additional-documentation/quickstart.html":{}}}],["rows",{"_index":1537,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["ruin",{"_index":1692,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["rules",{"_index":1062,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["run",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{}}}],["runs",{"_index":179,"title":{},"body":{"interfaces/ConnectionBase.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceSpec.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{}}}],["rxjs",{"_index":8,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"dependencies.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["rxjs/operators",{"_index":1732,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["sake",{"_index":1539,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["same",{"_index":23,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["sane",{"_index":1214,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["save",{"_index":1393,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["scalars",{"_index":206,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["scope",{"_index":1587,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["screen",{"_index":1377,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["screenshot",{"_index":359,"title":{},"body":{"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["screenshotting",{"_index":518,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["seamlessly",{"_index":1238,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["seconds",{"_index":1071,"title":{},"body":{"index.html":{}}}],["section",{"_index":1478,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["see",{"_index":73,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetSpec.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["seem",{"_index":1640,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["seen",{"_index":1714,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["selecting",{"_index":1379,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["selector",{"_index":482,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{},"additional-documentation/chess-tutorial.html":{}}}],["sense",{"_index":1518,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["sensible",{"_index":528,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["separate",{"_index":414,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["separated",{"_index":1629,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["serves",{"_index":1655,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["service",{"_index":1583,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["set",{"_index":324,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTarget.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["setdroptargettype(t",{"_index":766,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["setting",{"_index":596,"title":{},"body":{"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["settype",{"_index":106,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{},"additional-documentation/translating-react-code.html":{}}}],["settype(type",{"_index":139,"title":{},"body":{"classes/Connection.html":{},"interfaces/DragSource.html":{}}}],["settype/settypes",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settypes",{"_index":107,"title":{},"body":{"classes/Connection.html":{},"interfaces/DropTarget.html":{}}}],["settypes(type",{"_index":142,"title":{},"body":{"classes/Connection.html":{},"interfaces/DropTarget.html":{}}}],["shallow",{"_index":776,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{}}}],["shallowequal",{"_index":207,"title":{},"body":{"interfaces/ConnectionBase.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["shallowequal(obja",{"_index":993,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shortcut",{"_index":595,"title":{},"body":{"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{}}}],["shorthand",{"_index":1278,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["shouldn't",{"_index":750,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{}}}],["show",{"_index":1291,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["showoverlay",{"_index":1734,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["shows",{"_index":661,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"additional-documentation/quickstart.html":{}}}],["sick",{"_index":1123,"title":{},"body":{"index.html":{}}}],["sidebar",{"_index":1225,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["similar",{"_index":731,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["simple",{"_index":269,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceMonitor.html":{},"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["simpler",{"_index":794,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["simply",{"_index":293,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["simulate",{"_index":566,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["simulation",{"_index":1861,"title":{},"body":{"additional-documentation/testing.html":{}}}],["single",{"_index":1340,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["situations",{"_index":1327,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["sixtyfour",{"_index":1523,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["size",{"_index":1472,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["sized",{"_index":1343,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["sizes",{"_index":501,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["slash",{"_index":874,"title":{},"body":{"changelog.html":{}}}],["slightly",{"_index":1669,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["small",{"_index":198,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/translating-react-code.html":{}}}],["smaller",{"_index":1373,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["smart",{"_index":415,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["solid",{"_index":1533,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["solution",{"_index":1586,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["solutions",{"_index":1045,"title":{},"body":{"index.html":{}}}],["solve",{"_index":1236,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["somebackend",{"_index":43,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"additional-documentation/quickstart.html":{}}}],["somedragsourceconnection.connectdragpreview(img",{"_index":1391,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["someimaginarybackendwithnamedexports",{"_index":1256,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["someone",{"_index":1713,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["someproperty",{"_index":1773,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["something",{"_index":393,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["sometimes",{"_index":363,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["somewhere",{"_index":428,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["sortable",{"_index":1098,"title":{},"body":{"index.html":{}}}],["source",{"_index":315,"title":{"classes/Source.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/MonitorBase.html":{},"classes/Source.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["source's",{"_index":796,"title":{},"body":{"interfaces/DropTargetSpec.html":{}}}],["source.ts",{"_index":934,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sourceconnection",{"_index":917,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sourceconnector",{"_index":837,"title":{"classes/SourceConnector.html":{}},"body":{"classes/SourceConnector.html":{},"coverage.html":{}}}],["sourceconstructor",{"_index":842,"title":{"interfaces/SourceConstructor.html":{}},"body":{"interfaces/SourceConstructor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sourceid",{"_index":642,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"classes/Source.html":{}}}],["sources",{"_index":348,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["space",{"_index":1499,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["span",{"_index":1465,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["spec",{"_index":171,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"classes/Source.html":{},"classes/Target.html":{},"miscellaneous/functions.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["spec.hover",{"_index":177,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["spec.hover(monitor",{"_index":178,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["special",{"_index":370,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceOptions.html":{},"additional-documentation/quickstart.html":{}}}],["specific",{"_index":1053,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["specification.ts",{"_index":670,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"coverage.html":{}}}],["specifics",{"_index":1226,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["specified",{"_index":165,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DropTargetSpec.html":{},"miscellaneous/variables.html":{},"additional-documentation/translating-react-code.html":{}}}],["specifies",{"_index":496,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["specify",{"_index":477,"title":{},"body":{"directives/DragPreviewDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/guide.html":{},"additional-documentation/chess-tutorial.html":{}}}],["specifying",{"_index":660,"title":{},"body":{"interfaces/DragSourceOptions.html":{}}}],["specs",{"_index":1274,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["spirit",{"_index":1716,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["spot",{"_index":382,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["square",{"_index":1450,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["squarecomponent",{"_index":1447,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["squarecomponents",{"_index":1630,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["squares",{"_index":1453,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["src/.../arecollectsequal.ts",{"_index":966,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../areoptionsequal.ts",{"_index":967,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../connection",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../createsourceconnector.ts",{"_index":968,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../createsourcefactory.ts",{"_index":969,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../createsourcemonitor.ts",{"_index":970,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../createtargetconnector.ts",{"_index":971,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../createtargetfactory.ts",{"_index":972,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../createtargetmonitor.ts",{"_index":973,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../invariant.ts",{"_index":974,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../register",{"_index":975,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../shallowequal.ts",{"_index":976,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../tokens.ts",{"_index":1172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../type",{"_index":1169,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../wrappers.ts",{"_index":1165,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/connection",{"_index":145,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"coverage.html":{}}}],["src/connector.service.ts",{"_index":5,"title":{},"body":{"interfaces/AddSubscription.html":{},"injectables/DndService.html":{},"coverage.html":{}}}],["src/connectors.ts",{"_index":486,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceOptions.html":{},"coverage.html":{}}}],["src/dnd.directive.ts",{"_index":475,"title":{},"body":{"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"directives/DropTargetDirective.html":{},"coverage.html":{}}}],["src/dnd.module.ts",{"_index":35,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"modules/DndModule.html":{},"coverage.html":{}}}],["src/drag",{"_index":669,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"coverage.html":{}}}],["src/drop",{"_index":784,"title":{},"body":{"interfaces/DropTargetSpec.html":{},"coverage.html":{}}}],["src/internal/connection",{"_index":97,"title":{},"body":{"classes/Connection.html":{},"interfaces/FactoryArgs.html":{},"interfaces/SourceConstructor.html":{},"interfaces/TargetConstructor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/internal/createsourceconnector.ts",{"_index":252,"title":{},"body":{"interfaces/Connector.html":{},"classes/SourceConnector.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/internal/createsourcefactory.ts",{"_index":831,"title":{},"body":{"classes/Source.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/internal/createsourcemonitor.ts",{"_index":640,"title":{},"body":{"classes/DragSourceMonitorClass.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/internal/createtargetconnector.ts",{"_index":847,"title":{},"body":{"classes/TargetConnector.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/internal/createtargetfactory.ts",{"_index":843,"title":{},"body":{"classes/Target.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/internal/createtargetmonitor.ts",{"_index":781,"title":{},"body":{"classes/DropTargetMonitorClass.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/internal/drag",{"_index":456,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"coverage.html":{}}}],["src/internal/invariant.ts",{"_index":931,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/internal/reconnector.ts",{"_index":825,"title":{},"body":{"classes/Reconnector.html":{},"coverage.html":{}}}],["src/internal/register",{"_index":933,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/layer",{"_index":465,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"coverage.html":{}}}],["src/monitor",{"_index":806,"title":{},"body":{"interfaces/MonitorBase.html":{},"coverage.html":{}}}],["src/source",{"_index":603,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"coverage.html":{}}}],["src/target",{"_index":769,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"coverage.html":{}}}],["src/tokens.ts",{"_index":939,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/type",{"_index":818,"title":{},"body":{"interfaces/Offset.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/arecollectsequal.ts",{"_index":948,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/areoptionsequal.ts",{"_index":950,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/shallowequal.ts",{"_index":952,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/wrappers.ts",{"_index":1170,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stage",{"_index":1688,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["stamping",{"_index":1066,"title":{},"body":{"index.html":{}}}],["standard",{"_index":13,"title":{},"body":{"interfaces/AddSubscription.html":{}}}],["start",{"_index":380,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["started",{"_index":396,"title":{"changelog.html":{},"index.html":{}},"body":{"interfaces/DragLayer.html":{},"interfaces/MonitorBase.html":{}}}],["starts",{"_index":514,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["state",{"_index":191,"title":{"additional-documentation/guide/3.-monitoring-state.html":{}},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["statements",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":263,"title":{},"body":{"modules/DndModule.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["statically",{"_index":1266,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["stationary",{"_index":1675,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["step",{"_index":1645,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["steps",{"_index":1220,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["still",{"_index":1545,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["store",{"_index":1310,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["strange",{"_index":1321,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["strategy",{"_index":1633,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["strictly",{"_index":777,"title":{},"body":{"interfaces/DropTargetMonitor.html":{},"index.html":{}}}],["string",{"_index":140,"title":{},"body":{"classes/Connection.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/MonitorBase.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["strings",{"_index":1842,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["string|symbol",{"_index":1845,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["strong",{"_index":681,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{}}}],["structure",{"_index":1345,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["struggle",{"_index":1127,"title":{},"body":{"index.html":{}}}],["style",{"_index":213,"title":{},"body":{"interfaces/ConnectionBase.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["styles",{"_index":1468,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["styling",{"_index":522,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["sub",{"_index":1009,"title":{},"body":{"index.html":{}}}],["subj",{"_index":172,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["subj.next",{"_index":176,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["subject",{"_index":173,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["subs",{"_index":1332,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["subscribe",{"_index":235,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["subscribe(callback",{"_index":185,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["subscriber",{"_index":371,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["subscribers",{"_index":1580,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["subscribes",{"_index":1820,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["subscribing",{"_index":542,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["subscription",{"_index":9,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["subscription#add",{"_index":24,"title":{},"body":{"interfaces/AddSubscription.html":{}}}],["subscription.add",{"_index":150,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["subscription.add(conn",{"_index":1330,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["subscriptionlike",{"_index":14,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/ConnectionBase.html":{}}}],["subscriptions",{"_index":228,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["successful",{"_index":1637,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["such",{"_index":530,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["suffice",{"_index":354,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["sufficient",{"_index":720,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["sufficiently",{"_index":1288,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["superpowers",{"_index":1103,"title":{},"body":{"index.html":{}}}],["supplied",{"_index":426,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceMonitor.html":{},"miscellaneous/variables.html":{}}}],["supplies",{"_index":1818,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["supply",{"_index":1838,"title":{},"body":{"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["supplying",{"_index":1857,"title":{},"body":{"additional-documentation/testing.html":{}}}],["support",{"_index":539,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceOptions.html":{},"additional-documentation/quickstart.html":{}}}],["supports",{"_index":290,"title":{},"body":{"injectables/DndService.html":{}}}],["sure",{"_index":389,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["switch",{"_index":1239,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["symbol",{"_index":141,"title":{},"body":{"classes/Connection.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/MonitorBase.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{}}}],["symbols",{"_index":1844,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["syntax",{"_index":1273,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["t",{"_index":767,"title":{},"body":{"directives/DropTargetDirective.html":{},"classes/Source.html":{},"classes/Target.html":{}}}],["table",{"_index":954,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":1482,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["take",{"_index":1032,"title":{},"body":{"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["target",{"_index":295,"title":{"classes/Target.html":{}},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"classes/Target.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["target(s",{"_index":1898,"title":{},"body":{"additional-documentation/testing.html":{}}}],["target.ts",{"_index":936,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["targetconnection",{"_index":918,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["targetconnector",{"_index":846,"title":{"classes/TargetConnector.html":{}},"body":{"classes/TargetConnector.html":{},"coverage.html":{}}}],["targetconstructor",{"_index":850,"title":{"interfaces/TargetConstructor.html":{}},"body":{"interfaces/TargetConstructor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["targetid",{"_index":782,"title":{},"body":{"classes/DropTargetMonitorClass.html":{}}}],["targets",{"_index":337,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["taste",{"_index":1119,"title":{},"body":{"index.html":{}}}],["tconnector",{"_index":124,"title":{},"body":{"classes/Connection.html":{},"interfaces/Connector.html":{}}}],["tear",{"_index":1311,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["teardown",{"_index":121,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"classes/DragLayerConnectionClass.html":{}}}],["teardownlogic",{"_index":22,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"classes/DragLayerConnectionClass.html":{}}}],["technically",{"_index":743,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["tedious",{"_index":275,"title":{},"body":{"injectables/DndService.html":{}}}],["tell",{"_index":1671,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["template",{"_index":230,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"directives/DropTargetDirective.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["template's",{"_index":1830,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["templates",{"_index":1015,"title":{},"body":{"index.html":{}}}],["tempted",{"_index":710,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["ten",{"_index":1326,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["terms",{"_index":1825,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["test",{"_index":624,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/testing.html":{}}}],["testable",{"_index":1858,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testbackend",{"_index":1871,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testbed",{"_index":1874,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testbed.configuretestingmodule",{"_index":1883,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testbed.createcomponent(mycomponent",{"_index":1887,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testbed.get(drag_drop_manager",{"_index":1885,"title":{},"body":{"additional-documentation/testing.html":{}}}],["testing",{"_index":567,"title":{"additional-documentation/testing.html":{}},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/testing.html":{}}}],["tests",{"_index":1865,"title":{},"body":{"additional-documentation/testing.html":{}}}],["text",{"_index":1380,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["that's",{"_index":547,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/quickstart.html":{}}}],["there's",{"_index":1130,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":1811,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["thing",{"_index":1129,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["things",{"_index":1047,"title":{},"body":{"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["think",{"_index":1133,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["this.black",{"_index":1487,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.cat.id",{"_index":1313,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.collected$.pipe",{"_index":1739,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.collected$.pipe(map(c",{"_index":1735,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.currentposition",{"_index":1611,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.destroy",{"_index":297,"title":{},"body":{"injectables/DndService.html":{}}}],["this.destroy.add(xxx.subscribe",{"_index":282,"title":{},"body":{"injectables/DndService.html":{}}}],["this.destroy.unsubscribe",{"_index":298,"title":{},"body":{"injectables/DndService.html":{}}}],["this.dnd.dragsource",{"_index":684,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.dnd.dragsource(\"cat",{"_index":1312,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.dnd.dragsource('dragme",{"_index":1355,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["this.dnd.dragsource('paper",{"_index":1277,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["this.dnd.dragsource('test",{"_index":1902,"title":{},"body":{"additional-documentation/testing.html":{}}}],["this.dnd.dragsource(itemtypes.knight",{"_index":1666,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.dnd.dragsource(null",{"_index":578,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.dnd.droptarget",{"_index":296,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceSpec.html":{}}}],["this.dnd.droptarget('cat",{"_index":1402,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["this.dnd.droptarget('dragme",{"_index":1363,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["this.dnd.droptarget('test",{"_index":1903,"title":{},"body":{"additional-documentation/testing.html":{}}}],["this.dnd.droptarget([\"cat",{"_index":1314,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.dnd.droptarget(itemtypes.knight",{"_index":1699,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.dragpreview.hook",{"_index":841,"title":{},"body":{"classes/SourceConnector.html":{}}}],["this.dragsource.hook",{"_index":840,"title":{},"body":{"classes/SourceConnector.html":{}}}],["this.droptarget.hook",{"_index":849,"title":{},"body":{"classes/TargetConnector.html":{}}}],["this.fireaction(monitor.getitem",{"_index":1784,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["this.game.canmoveknight(pos",{"_index":1622,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.game.canmoveknight(this.position",{"_index":1704,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.game.knightposition",{"_index":1584,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.game.moveknight(pos",{"_index":1603,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.game.moveknight(this.position",{"_index":1705,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.id",{"_index":685,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["this.itemsource.destroy",{"_index":1787,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["this.itemsource.listen(monitor",{"_index":1785,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["this.knightposition$.next(to",{"_index":1582,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.knightposition$.subscribe(kp",{"_index":1610,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.knightsource.connectdragpreview(img",{"_index":1754,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.knightsource.listen(monitor",{"_index":1678,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.knightsource.unsubscribe",{"_index":1667,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.layer.unsubscribe",{"_index":1322,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.method",{"_index":1271,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["this.model.parentid.tostring",{"_index":585,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.notation",{"_index":1815,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["this.papercount",{"_index":1280,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["this.position",{"_index":1697,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["this.props",{"_index":1781,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["this.someproperty",{"_index":620,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"additional-documentation/translating-react-code.html":{}}}],["this.source.connectdragpreview(img",{"_index":558,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.source.listen(m",{"_index":1426,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/testing.html":{}}}],["this.source.settype(t",{"_index":590,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.source.unsubscribe",{"_index":1316,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/testing.html":{}}}],["this.subs",{"_index":1333,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.subs.add(myservice.subscribe",{"_index":1334,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.subs.unsubscribe",{"_index":1336,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["this.target.listen(m",{"_index":1406,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["this.target.listen(monitor",{"_index":216,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["this.target.settype(\"parent_",{"_index":584,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.target.settype(this.type",{"_index":581,"title":{},"body":{"interfaces/DragSource.html":{}}}],["this.target.unsubscribe",{"_index":1317,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/testing.html":{}}}],["those",{"_index":194,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["though",{"_index":742,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["three",{"_index":1302,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["through",{"_index":201,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["throw",{"_index":1601,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["tick",{"_index":517,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["tie",{"_index":345,"title":{},"body":{"injectables/DndService.html":{}}}],["time",{"_index":443,"title":{},"body":{"interfaces/DragLayer.html":{},"interfaces/DragSourceSpec.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{}}}],["timely",{"_index":446,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["times",{"_index":327,"title":{},"body":{"injectables/DndService.html":{},"index.html":{}}}],["tiny",{"_index":1437,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["tmonitor",{"_index":134,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{}}}],["to.x",{"_index":1615,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["to.y",{"_index":1617,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["token",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["told",{"_index":580,"title":{},"body":{"interfaces/DragSource.html":{}}}],["tons",{"_index":1041,"title":{},"body":{"index.html":{}}}],["tool",{"_index":1080,"title":{},"body":{"index.html":{}}}],["toolkit",{"_index":996,"title":{},"body":{"index.html":{}}}],["top",{"_index":510,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["touch",{"_index":1193,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["touchbackend",{"_index":92,"title":{},"body":{"interfaces/BackendInput.html":{},"additional-documentation/quickstart.html":{}}}],["touching",{"_index":1378,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["traditional",{"_index":1058,"title":{},"body":{"index.html":{}}}],["transit",{"_index":815,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["translate",{"_index":1038,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["translated",{"_index":499,"title":{},"body":{"interfaces/DragPreviewOptions.html":{}}}],["translating",{"_index":1039,"title":{"additional-documentation/translating-react-code.html":{}},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["translation",{"_index":1440,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["transparent",{"_index":1680,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["trapped",{"_index":1566,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["trash",{"_index":1064,"title":{},"body":{"index.html":{}}}],["trello.com",{"_index":1076,"title":{},"body":{"index.html":{}}}],["trick",{"_index":1591,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["triple",{"_index":873,"title":{},"body":{"changelog.html":{}}}],["troubleshooting",{"_index":1249,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["true",{"_index":469,"title":{},"body":{"interfaces/DragLayerMonitor.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["truth",{"_index":1016,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{}}}],["truthy",{"_index":1593,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["try",{"_index":712,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["trying",{"_index":1862,"title":{},"body":{"additional-documentation/testing.html":{}}}],["tslib",{"_index":879,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["tslint",{"_index":884,"title":{},"body":{"changelog.html":{}}}],["turn",{"_index":1634,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["turning",{"_index":1497,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["tutorial",{"_index":1008,"title":{"additional-documentation/chess-tutorial.html":{}},"body":{"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["two",{"_index":672,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["type",{"_index":28,"title":{},"body":{"interfaces/AddSubscription.html":{},"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"modules/DndModule.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"interfaces/FactoryArgs.html":{},"interfaces/MonitorBase.html":{},"interfaces/Offset.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["type(s",{"_index":1841,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["type(t",{"_index":589,"title":{},"body":{"interfaces/DragSource.html":{}}}],["type_dynamic",{"_index":947,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1162,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":569,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["typeerror",{"_index":1250,"title":{},"body":{"additional-documentation/quickstart.html":{}}}],["typeortypearray",{"_index":118,"title":{},"body":{"classes/Connection.html":{},"injectables/DndService.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"miscellaneous/typealiases.html":{}}}],["types",{"_index":170,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragSource.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["types.ts",{"_index":146,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"coverage.html":{}}}],["typescript",{"_index":676,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/quickstart.html":{}}}],["typical",{"_index":1799,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["typically",{"_index":373,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["typing",{"_index":682,"title":{},"body":{"interfaces/DragSourceSpec.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["typo",{"_index":761,"title":{},"body":{"directives/DropTargetDirective.html":{}}}],["ui",{"_index":1375,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["ultra",{"_index":1569,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["undefined",{"_index":119,"title":{},"body":{"classes/Connection.html":{},"classes/DragSourceMonitorClass.html":{},"classes/DropTargetMonitorClass.html":{},"additional-documentation/quickstart.html":{}}}],["under",{"_index":398,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{}}}],["underlying",{"_index":1696,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["understand",{"_index":587,"title":{},"body":{"interfaces/DragSource.html":{}}}],["understandable",{"_index":1760,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["unicode",{"_index":1466,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["unidirectional",{"_index":1018,"title":{},"body":{"index.html":{}}}],["unique",{"_index":1365,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["unlike",{"_index":1577,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["unmounted",{"_index":732,"title":{},"body":{"interfaces/DragSourceSpec.html":{}}}],["unnecessary",{"_index":53,"title":{},"body":{"interfaces/BackendFactoryInput.html":{}}}],["unsubscribe",{"_index":108,"title":{},"body":{"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"classes/Reconnector.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["unsubscribed",{"_index":561,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{}}}],["unsubscribefromoffsetchange",{"_index":460,"title":{},"body":{"classes/DragLayerConnectionClass.html":{}}}],["unsubscribefromstatechange",{"_index":461,"title":{},"body":{"classes/DragLayerConnectionClass.html":{}}}],["unsubscribing",{"_index":271,"title":{},"body":{"injectables/DndService.html":{},"additional-documentation/guide/1.-creating-connections.html":{}}}],["until",{"_index":180,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/translating-react-code.html":{}}}],["unwanted",{"_index":1381,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["up",{"_index":287,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetMonitor.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["update",{"_index":571,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/translating-react-code.html":{}}}],["updated",{"_index":447,"title":{},"body":{"interfaces/DragLayer.html":{}}}],["updates",{"_index":1416,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["url",{"_index":1751,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["urls",{"_index":1753,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["usable",{"_index":1433,"title":{},"body":{"additional-documentation/guide/3.-monitoring-state.html":{}}}],["usage",{"_index":1852,"title":{},"body":{"additional-documentation/testing.html":{}}}],["use",{"_index":60,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["used",{"_index":46,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["useful",{"_index":151,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["user",{"_index":666,"title":{},"body":{"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{}}}],["users",{"_index":1126,"title":{},"body":{"index.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["uses",{"_index":1078,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["using",{"_index":40,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"directives/DragPreviewDirective.html":{},"directives/DragSourceDirective.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["usually",{"_index":550,"title":{},"body":{"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["valid",{"_index":1717,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["value",{"_index":463,"title":{},"body":{"classes/DragLayerConnectionClass.html":{},"interfaces/DragPreviewOptions.html":{},"directives/DragSourceDirective.html":{},"classes/DropTargetMonitorClass.html":{},"classes/Reconnector.html":{},"classes/SourceConnector.html":{},"classes/TargetConnector.html":{},"miscellaneous/variables.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["values",{"_index":1101,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["vanish",{"_index":1649,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["variable",{"_index":231,"title":{},"body":{"interfaces/ConnectionBase.html":{},"coverage.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{}}}],["variables",{"_index":1171,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variably",{"_index":1342,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["vector",{"_index":810,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["version",{"_index":11,"title":{},"body":{"interfaces/AddSubscription.html":{},"directives/DropTargetDirective.html":{},"changelog.html":{},"properties.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["vertical",{"_index":509,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["very",{"_index":613,"title":{},"body":{"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"index.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["via",{"_index":183,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragSource.html":{},"interfaces/DropTarget.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["view",{"_index":1493,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["viewport",{"_index":809,"title":{},"body":{"interfaces/MonitorBase.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["visible",{"_index":1014,"title":{},"body":{"index.html":{}}}],["visual",{"_index":1090,"title":{},"body":{"index.html":{}}}],["visuals",{"_index":418,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["void",{"_index":31,"title":{},"body":{"interfaces/AddSubscription.html":{},"classes/Connection.html":{},"interfaces/ConnectionBase.html":{},"interfaces/Connector.html":{},"interfaces/DragLayer.html":{},"classes/DragLayerConnectionClass.html":{},"directives/DragPreviewDirective.html":{},"interfaces/DragSource.html":{},"directives/DragSourceDirective.html":{},"classes/DragSourceMonitorClass.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTarget.html":{},"directives/DropTargetDirective.html":{},"classes/DropTargetMonitorClass.html":{},"interfaces/DropTargetSpec.html":{},"classes/Reconnector.html":{},"classes/Source.html":{},"classes/SourceConnector.html":{},"classes/Target.html":{},"classes/TargetConnector.html":{}}}],["voil",{"_index":1623,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["vs",{"_index":1285,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["vue",{"_index":1131,"title":{},"body":{"index.html":{}}}],["wait",{"_index":1388,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["want",{"_index":225,"title":{},"body":{"interfaces/ConnectionBase.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragPreviewOptions.html":{},"interfaces/DragSource.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetSpec.html":{},"index.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/guide/3.-monitoring-state.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["wanting",{"_index":1117,"title":{},"body":{"index.html":{}}}],["warned",{"_index":1115,"title":{},"body":{"index.html":{}}}],["watching",{"_index":1125,"title":{},"body":{"index.html":{}}}],["way",{"_index":1202,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{},"additional-documentation/testing.html":{}}}],["ways",{"_index":1329,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["we'll",{"_index":1464,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["we're",{"_index":1324,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["wealth",{"_index":1138,"title":{},"body":{"index.html":{}}}],["web",{"_index":1757,"title":{},"body":{"additional-documentation/translating-react-code.html":{}}}],["weight",{"_index":1470,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["weird",{"_index":1642,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["well",{"_index":1194,"title":{},"body":{"additional-documentation/quickstart.html":{},"additional-documentation/chess-tutorial.html":{}}}],["what's",{"_index":1661,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["whatever",{"_index":1481,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["whether",{"_index":75,"title":{},"body":{"interfaces/BackendFactoryInput.html":{},"interfaces/BackendInput.html":{},"injectables/DndService.html":{},"interfaces/DragLayer.html":{},"interfaces/DragSourceMonitor.html":{},"interfaces/DragSourceOptions.html":{},"interfaces/DragSourceSpec.html":{},"interfaces/DropTargetMonitor.html":{},"interfaces/DropTargetSpec.html":{},"additional-documentation/chess-tutorial.html":{}}}],["white",{"_index":1449,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["whole",{"_index":1348,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{},"additional-documentation/chess-tutorial.html":{}}}],["width",{"_index":1507,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["wish",{"_index":573,"title":{},"body":{"interfaces/DragSource.html":{},"additional-documentation/guide/3.-monitoring-state.html":{}}}],["withchangedetection",{"_index":832,"title":{},"body":{"classes/Source.html":{},"classes/Target.html":{}}}],["withchangedetection(fn",{"_index":836,"title":{},"body":{"classes/Source.html":{},"classes/Target.html":{}}}],["within",{"_index":1361,"title":{},"body":{"additional-documentation/guide/2.-connecting-to-dom.html":{}}}],["without",{"_index":162,"title":{},"body":{"interfaces/ConnectionBase.html":{},"interfaces/DragPreviewOptions.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/guide/2.-connecting-to-dom.html":{},"additional-documentation/chess-tutorial.html":{}}}],["won't",{"_index":541,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"additional-documentation/chess-tutorial.html":{}}}],["work",{"_index":531,"title":{},"body":{"interfaces/DragPreviewOptions.html":{},"index.html":{},"additional-documentation/chess-tutorial.html":{}}}],["works",{"_index":1025,"title":{},"body":{"index.html":{},"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["worth",{"_index":1442,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["wrap",{"_index":1527,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["wrapper",{"_index":1694,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["wrapper(dndservice",{"_index":169,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["wrappers",{"_index":153,"title":{},"body":{"interfaces/ConnectionBase.html":{}}}],["wrapping",{"_index":1530,"title":{},"body":{"additional-documentation/chess-tutorial.html":{},"additional-documentation/translating-react-code.html":{}}}],["write",{"_index":588,"title":{},"body":{"interfaces/DragSource.html":{}}}],["writing",{"_index":152,"title":{},"body":{"interfaces/ConnectionBase.html":{},"additional-documentation/chess-tutorial.html":{}}}],["written",{"_index":1042,"title":{},"body":{"index.html":{},"additional-documentation/translating-react-code.html":{}}}],["x",{"_index":822,"title":{},"body":{"interfaces/Offset.html":{},"additional-documentation/chess-tutorial.html":{}}}],["x,y",{"_index":808,"title":{},"body":{"interfaces/MonitorBase.html":{}}}],["xy",{"_index":821,"title":{},"body":{"interfaces/Offset.html":{}}}],["xy(i",{"_index":1555,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["y",{"_index":823,"title":{},"body":{"interfaces/Offset.html":{},"additional-documentation/chess-tutorial.html":{}}}],["yarn",{"_index":1005,"title":{},"body":{"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/testing.html":{}}}],["yellow",{"_index":1744,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["yes",{"_index":311,"title":{},"body":{"injectables/DndService.html":{},"interfaces/DragSource.html":{},"interfaces/DropTargetMonitor.html":{}}}],["you'd",{"_index":1662,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["you'll",{"_index":1513,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["you're",{"_index":367,"title":{},"body":{"interfaces/DragLayer.html":{},"additional-documentation/chess-tutorial.html":{}}}],["you've",{"_index":1681,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["yourself",{"_index":368,"title":{},"body":{"interfaces/DragLayer.html":{},"index.html":{},"additional-documentation/quickstart.html":{},"additional-documentation/translating-react-code.html":{}}}],["zebra",{"_index":1315,"title":{},"body":{"additional-documentation/guide/1.-creating-connections.html":{}}}],["zindex",{"_index":1745,"title":{},"body":{"additional-documentation/chess-tutorial.html":{}}}],["zone",{"_index":116,"title":{},"body":{"classes/Connection.html":{},"classes/DragLayerConnectionClass.html":{},"classes/Source.html":{},"classes/Target.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["zone.js",{"_index":963,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AddSubscription.html":{"url":"interfaces/AddSubscription.html","title":"interface - AddSubscription","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AddSubscription\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connector.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents an RxJS Subscription, with multi-version compatibility.\nThe standard SubscriptionLike does not contain an add() method.\n\n            \n\n            \n                Extends\n            \n            \n                    SubscriptionLike\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        add\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(teardownLogic: TeardownLogic)\n                \n            \n\n\n\n\n            \n                \n                    Same as RxJS Subscription#add\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    teardownLogic\n                                    \n                                            TeardownLogic\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BackendFactoryInput.html":{"url":"interfaces/BackendFactoryInput.html","title":"interface - BackendFactoryInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BackendFactoryInput\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dnd.module.ts\n        \n\n\n            \n                Description\n            \n            \n                DEPRECATED / @deprecated\nTo configure backends, prefer using the new { backend: SomeBackend, options: { ... } } pattern.\nThis used to be necessary for configuring backends in AOT mode, but with the new API,\nit is completely unnecessary.\nThis would be more aptly named as 'backendFactoryFactory'. Example:\n// must export for use with Angular's AOT compilation.\nexport function MyBackendFactory(): BackendFactory {\n    return (manager, context) => SomeBackend({ options: \"here\" })(manager, context);\n}\nforRoot({ backendFactory: MyBackendFactory })\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            backendFactory\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            debug\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backendFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backendFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    DEPRECATED / @deprecated\nTo configure backends, prefer using the new { backend: SomeBackend, options: { ... } }\npattern. See BackendFactoryInput\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        debug\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        debug:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether dnd-core should enable debugging, which lets you see dnd-core actions\nin the Redux extension for Chrome.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BackendInput.html":{"url":"interfaces/BackendInput.html","title":"interface - BackendInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BackendInput\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dnd.module.ts\n        \n\n\n            \n                Description\n            \n            \n                Used for providing backends to DndModule.\nYou can configure your backend with options.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            backend\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            debug\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            options\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backend\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backend:     BackendFactory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BackendFactory\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A plain backend, for example the HTML5Backend.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        debug\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        debug:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether dnd-core should enable debugging, which lets you see dnd-core actions\nin the Redux extension for Chrome.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Any configuration your backend accepts. Use this with the TouchBackend or the MultiBackend,\nfor example.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Connection.html":{"url":"classes/Connection.html","title":"class - Connection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Connection\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/connection-factory.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                connect\n                            \n                            \n                                connectDragPreview\n                            \n                            \n                                connectDragSource\n                            \n                            \n                                connectDropTarget\n                            \n                            \n                                getHandlerId\n                            \n                            \n                                listen\n                            \n                            \n                                receiveType\n                            \n                            \n                                setType\n                            \n                            \n                                setTypes\n                            \n                            \n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    closed\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(factoryArgs: FactoryArgs, manager: DragDropManager, dndZone: Zone, initialType: TypeOrTypeArray | undefined)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        factoryArgs\n                                                  \n                                                        \n                                                                    FactoryArgs\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        manager\n                                                  \n                                                        \n                                                                    DragDropManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dndZone\n                                                  \n                                                        \n                                                                    Zone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        initialType\n                                                  \n                                                        \n                                                                        TypeOrTypeArray | undefined\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(teardown: TeardownLogic)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    teardown\n                                    \n                                            TeardownLogic\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connect\n                        \n                    \n                \n            \n            \n                \nconnect(fn: (connector: TConnector) => void)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connectDragPreview\n                        \n                    \n                \n            \n            \n                \nconnectDragPreview(node: Node, options: DragPreviewOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                            Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                DragPreviewOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connectDragSource\n                        \n                    \n                \n            \n            \n                \nconnectDragSource(node: Node, options: DragSourceOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                            Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                DragSourceOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connectDropTarget\n                        \n                    \n                \n            \n            \n                \nconnectDropTarget(node: Node)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                            Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHandlerId\n                        \n                    \n                \n            \n            \n                \ngetHandlerId()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(mapFn: (monitor: TMonitor) => void)\n                \n            \n\n\n\n            \n                \n                    Type parameters :\n                    \n                        P\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mapFn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        receiveType\n                        \n                    \n                \n            \n            \n                \nreceiveType(type: TypeOrTypeArray)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                TypeOrTypeArray\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setType\n                        \n                    \n                \n            \n            \n                \nsetType(type: string | symbol)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            string | symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setTypes\n                        \n                    \n                \n            \n            \n                \nsetTypes(type: TypeOrTypeArray)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                TypeOrTypeArray\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \nunsubscribe()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        closed\n                    \n                \n\n                \n                    \n                        getclosed()\n                    \n                \n\n            \n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConnectionBase.html":{"url":"interfaces/ConnectionBase.html","title":"interface - ConnectionBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConnectionBase\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection-types.ts\n        \n\n\n            \n                Description\n            \n            \n                A base type to represent a DOM connection.\n\n            \n\n            \n                Extends\n            \n            \n                    SubscriptionLike\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        add\n                                    \n                                \n                                \n                                    \n                                        listen\n                                    \n                                \n                                \n                                    \n                                        unsubscribe\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(teardown: TeardownLogic)\n                \n            \n\n\n\n\n            \n                \n                    Same as RxJS Subscription.add().\nUseful, for example, for writing wrappers for the DndService methods,\nwhich might internally listen()/subscribe to DropTargetSpec and provide\na convenient callback after you hover without dropping or exiting for a specified\nduration. That would require the following pattern:\nfunction wrapper(dndService, types, spec, callback) {\n  let subj = new Subject();\n  let dt = dndService.dropTarget(types, {\n      ...spec,\n      hover: monitor => {\n      subj.next();\n      spec.hover && spec.hover(monitor);\n    }\n  });\n  // runs the callback until the returned connection\n  // is destroyed via unsubscribe()\n  dt.add(subj.pipe( ... ).subscribe(callback))\n  return dt;\n}\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    teardown\n                                    \n                                            TeardownLogic\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(mapTo: (monitor: TMonitor) => void)\n                \n            \n\n\n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n                    A connection maintains a subscription to dnd-core's drag state\nchanges. This function is how you are notified of those changes.\nThis function is essentially RxJS Observable.map with one small\noptimization: it runs the output of\nthe function you provide through distinctUntilChanged, and checks\nreference equality (===) for scalars and shallowEqual for Objects.\nBecause of #2, you can happily emulate react-dnd-style code like:\ncollected$ = this.target.listen(monitor => ({\n  isDragging: monitor.isDragging(),\n  isOver: monitor.isOver(),\n  canDrop: monitor.canDrop()\n}));... in which case you probably want to use the *ngIf as pattern for\n grouping subscriptions into one bound template variable:\n\n  {{c.isDragging ? 'dragging': null}}\n  ...\nYou can also subscribe one-by-one, with isDragging$ = listen(m => m.isDragging()).\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mapTo\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \nunsubscribe()\n                \n            \n\n\n\n\n            \n                \n                    This method MUST be called, however you choose to, when ngOnDestroy() fires.\nIf you don't, you will leave subscriptions hanging around that will fire\ncallbacks on components that no longer exist.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Connector.html":{"url":"interfaces/Connector.html","title":"interface - Connector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Connector\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createSourceConnector.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hooks\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        receiveHandlerId\n                                    \n                                \n                                \n                                    \n                                        reconnect\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        receiveHandlerId\n                        \n                    \n                \n            \n            \n                \nreceiveHandlerId(handlerId: Identifier | null)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handlerId\n                                    \n                                            Identifier | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reconnect\n                        \n                    \n                \n            \n            \n                \nreconnect()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hooks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hooks:         TConnector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TConnector\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DndModule.html":{"url":"modules/DndModule.html","title":"module - DndModule","body":"\n                   \n\n\n\n\n    Modules\n    DndModule\n\n\n\n\n    \n        Info\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/dnd.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            EXPORTS\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EXPORTS\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(backendOrBackendFactory: BackendInput | BackendFactoryInput)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    backendOrBackendFactory\n                                    \n                                            BackendInput | BackendFactoryInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DndService.html":{"url":"injectables/DndService.html","title":"injectable - DndService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DndService\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connector.service.ts\n        \n\n\n            \n                Description\n            \n            \n                For a simple component, unsubscribing is as easy as connection.unsubscribe() in ngOnDestroy()\nIf your components have lots of subscriptions, it can get tedious having to\nunsubscribe from all of them, and you might forget. A common pattern is to create an RxJS Subscription\n(maybe called destroy), to use this.destroy.add(xxx.subscribe(...))\nand to call destroy.unsubscribe() once to clean up all of them. @ng-dnd/core\nsupports this pattern with by using the subscription parameter on the\nconstructors. Simply:\nimport { Subscription } from 'rxjs';\n// ...\ndestroy = new Subscription();\ntarget = this.dnd.dropTarget({\n  // ...\n}, this.destroy);\nngOnDestroy() { this.destroy.unsubscribe(); }It is a good habit for avoiding leaked subscriptions, because .\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                dragLayer\n                            \n                            \n                                    Public\n                                dragSource\n                            \n                            \n                                    Public\n                                dropTarget\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        dragLayer\n                        \n                    \n                \n            \n            \n                \n                    \n                    dragLayer(subscription?: AddSubscription)\n                \n            \n\n\n\n            \n                \n                    Type parameters :\n                    \n                        Item\n                    \n                \n            \n\n            \n                \n                    This method creates a DragLayer object\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscription\n                                    \n                                                AddSubscription\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DragLayer\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        dragSource\n                        \n                    \n                \n            \n            \n                \n                    \n                    dragSource(type: string | symbol | null, spec: DragSourceSpec, subscription?: AddSubscription)\n                \n            \n\n\n\n            \n                \n                    Type parameters :\n                    \n                        Item\n                        DropResult\n                    \n                \n            \n\n            \n                \n                    This method creates a DragSource object. It represents a drag\nsource and its behaviour, and can be connected to a DOM element by\nassigning it to the [dragSource] directive on that element in your\ntemplate.\nIt is the corollary of react-dnd's\nDragSource.\nThe spec argument (DragSourceSpec) is a set of queries and\ncallbacks that are called at appropriate times by the internals. The\nqueries are for asking your component whether to drag/listen and what\nitem data to hoist up; the callback (just 1) is for notifying you when\nthe drag ends.\nOnly the drop targets registered for the same type will\nreact to the items produced by this drag source. If you want a dynamic\ntype, pass null as the type; and call DragSource in\na lifecycle hook.\nconnection to.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            string | symbol | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    spec\n                                    \n                                                DragSourceSpec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    subscription\n                                    \n                                                AddSubscription\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        An RxJS Subscription to tie the lifetime of the\nconnection to.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DragSource\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        dropTarget\n                        \n                    \n                \n            \n            \n                \n                    \n                    dropTarget(types: TypeOrTypeArray | null, spec: DropTargetSpec, subscription?: AddSubscription)\n                \n            \n\n\n\n            \n                \n                    Type parameters :\n                    \n                        Item\n                        DropResult\n                    \n                \n            \n\n            \n                \n                    This drop target will only react to the items produced by the drag sources\nof the specified type or types.\nIf you want a dynamic type, pass null as the type; and call\nDropTarget in a lifecycle hook.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    types\n                                    \n                                                TypeOrTypeArray | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    spec\n                                    \n                                                DropTargetSpec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    subscription\n                                    \n                                                AddSubscription\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DropTarget\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragLayer.html":{"url":"interfaces/DragLayer.html","title":"interface - DragLayer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragLayer\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection-types.ts\n        \n\n\n            \n                Description\n            \n            \n                For many use cases, the default rendering of the HTML5 backend should suffice.\nHowever, its drag preview has certain limitations. For example, it has to be an\nexisting node screenshot or an image, and it cannot change midflight.\nSometimes you might want to perform the custom rendering. This also becomes\nnecessary if you're using a custom backend. DragLayer lets you perform the\nrendering of the drag preview yourself.\nA drag layer is a special subscriber to the global drag state. It is called\na 'layer', not just a subscriber, because it is typically used to render custom\nelements that follow the mouse, above all other elements. The data flows like\nso:\ndrag start => global state => drag source => no preview\n                           => drag layer  => preview rendered on the spot\ndrag moved => global state => drag layer  => preview moves\ndrag ends  => global state => drag layer  => preview erasedTo use a drag layer as designed:\n\nCreate a drag layer: DndService.dragLayer. Make sure to unsubscribe from\nit in ngOnDestroy().\n\nListen to global drag state changes with DragLayer.listen. These are all available on DragLayerMonitor:\nwhether something is being dragged, what type it is, where the drag started, where the dragged element is now.\n\nIf dragging, render a custom preview under the current mouse position,\ndepending on the item type, in a position: fixed 'layer'. You may like to\nuse an *ngSwitch on the type, rather than one drag layer per type, simply\nto reduce code duplication.\n\n\nYou can see an example of a drag layer over on the Examples page.\nOne piece of advice for using drag layers effectively is to separate 'smart' and\n'dumb' components. If you have one component purely for visuals, which does all\ninput through @Input() and all interactivity through @Output() events, then\nyou can reuse it to display a drag preview based on either data in the item from\nDragSourceSpec.beginDrag, or supplied by a 'smart' component which pulls\ndata from somewhere else using only an id. This practice is even more\nimportant if you are using, or planning on using, anything other than the HTML5\nbackend, because no other backend provides automatic previews. In those cases\nyou must handle every draggable type in a drag layer to have any previews at\nall.\nOr, you could just use @ng-dnd/multi-backend.\n\n            \n\n            \n                Extends\n            \n            \n                        ConnectionBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        listen\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(mapTo: (monitor: DragLayerMonitor) => void)\n                \n            \n\n\n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n                    For listen functions in general, see ConnectionBase.\nThis listen function is called any time the global drag state\nchanges, including the coordinate changes, so that your component can\nprovide a timely updated custom drag preview. You can ask the monitor for\nthe client coordinates of the dragged item. Read the DragLayerMonitor\ndocs to see all the different possibile coordinates you might subscribe to.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mapTo\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DragLayerConnectionClass.html":{"url":"classes/DragLayerConnectionClass.html","title":"class - DragLayerConnectionClass","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DragLayerConnectionClass\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/drag-layer-connection.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            DragLayer\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isTicking\n                            \n                            \n                                unsubscribeFromOffsetChange\n                            \n                            \n                                unsubscribeFromStateChange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                listen\n                            \n                            \n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    closed\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(manager: DragDropManager, zone: Zone)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        manager\n                                                  \n                                                        \n                                                                    DragDropManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    Zone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isTicking\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribeFromOffsetChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Unsubscribe\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribeFromStateChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Unsubscribe\n\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(teardown: TeardownLogic)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    teardown\n                                    \n                                            TeardownLogic\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listen\n                        \n                    \n                \n            \n            \n                \nlisten(mapFn: (monitor: DragLayerMonitor) => void)\n                \n            \n\n\n\n            \n                \n                    Type parameters :\n                    \n                        P\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mapFn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unsubscribe\n                        \n                    \n                \n            \n            \n                \nunsubscribe()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        closed\n                    \n                \n\n                \n                    \n                        getclosed()\n                    \n                \n\n            \n        \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragLayerMonitor.html":{"url":"interfaces/DragLayerMonitor.html","title":"interface - DragLayerMonitor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragLayerMonitor\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/layer-monitor.ts\n        \n\n\n            \n                Description\n            \n            \n                The monitor available inside DragLayer.\n\n            \n\n            \n                Extends\n            \n            \n                        MonitorBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        isDragging\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isDragging\n                        \n                    \n                \n            \n            \n                \nisDragging()\n                \n            \n\n\n\n\n            \n                \n                    true if there is a drag operation in progress, false otherwise.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DragPreviewDirective.html":{"url":"directives/DragPreviewDirective.html","title":"directive - DragPreviewDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  DragPreviewDirective\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dnd.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Allows you to specify which element a DragSource should screenshot\nas an HTML5 drag preview.\nOnly relevant when using the HTML5 backend.\n\n            \n\n            \n                Extends\n            \n            \n                    DndDirective\n            \n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [dragPreview]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragPreview\n                            \n                            \n                                dragPreviewOptions\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragPreview\n                    \n                \n                \n                    \n                        Type :         DragSource\n\n                    \n                \n                \n                    \n                        The drag source for which this element will be the preview.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragPreviewOptions\n                    \n                \n                \n                    \n                        Type :         DragPreviewOptions\n\n                    \n                \n                \n                    \n                        Pass an options object as you would to DragSource.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragPreviewOptions.html":{"url":"interfaces/DragPreviewOptions.html","title":"interface - DragPreviewOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragPreviewOptions\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Provide options for how to render a drag preview. See DragSource.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            anchorX\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            anchorY\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            captureDraggingState\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            offsetX\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            offsetY\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        anchorX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        anchorX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A number between 0 and 1. By default, 0.5. Specifies how the\noffset relative to the drag source node is translated into the the\nhorizontal offset of the drag preview when their sizes don't match.\n0 means \"dock the preview to the left\", 0.5 means \"interpolate linearly\"\nand 1 means \"dock the preview to the right\".\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        anchorY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        anchorY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A number between 0 and 1. By default, 0.5. Specifies how the\noffset relative to the drag source node is translated into the the\nvertical offset of the drag preview when their sizes don't match. 0 means\n\"dock the preview to the top, 0.5 means \"interpolate linearly\" and\n1 means \"dock the preview to the bottom.\"\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        captureDraggingState\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        captureDraggingState:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default, false. If true, the component will learn that it is being\ndragged immediately as the drag starts instead of the next tick. This\nmeans that the screenshotting would occur with monitor.isDragging()\nalready being true, and if you apply any styling like a decreased opacity\nto the dragged element, this styling will also be reflected on the\nscreenshot. This is rarely desirable, so false is a sensible default.\nHowever, you might want to set it to true in rare cases, such as if you\nwant to make the custom drag layers work in IE and you need to hide the\noriginal element without resorting to an empty drag preview which IE\ndoesn't support.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offsetX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offsetX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default, null. Specifies the vertical offset between the cursor and\nthe drag preview element. If offsetX has a value, anchorX won't be\nused.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offsetY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offsetY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default, null. Specifies the vertical offset between the cursor and\nthe drag preview element. If offsetY has a value, anchorY won't be\nused.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragSource.html":{"url":"interfaces/DragSource.html","title":"interface - DragSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragSource\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection-types.ts\n        \n\n\n            \n                Description\n            \n            \n                Like DropTarget, it can be used just for subscribing to\ndrag state information related to a particular item type or list of types.\nYou do not have to connect it to a DOM element if that's all you want.\nTo create one, refer to DndService.\n\n            \n\n            \n                Extends\n            \n            \n                        ConnectionBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        connectDragPreview\n                                    \n                                \n                                \n                                    \n                                        connectDragSource\n                                    \n                                \n                                \n                                    \n                                        getHandlerId\n                                    \n                                \n                                \n                                    \n                                        setType\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        connectDragPreview\n                        \n                    \n                \n            \n            \n                \nconnectDragPreview(elementOrNode: Node, options?: DragPreviewOptions)\n                \n            \n\n\n\n\n            \n                \n                    This function allows you to connect a DOM node to your DragSource as a preview.\nYou will not usually need to call this directly;\nit is more easily handled by the directives.\nYou might use an ElementRef.nativeElement, or even an\nImage.\nconst img = new Image();\nimg.onload = this.source.connectDragPreview(img);\nimg.src = '...';The subscription returned is automatically unsubscribed when the connection is made.\nThis may be immediate if the DragSource already has a type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    elementOrNode\n                                    \n                                            Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                DragPreviewOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connectDragSource\n                        \n                    \n                \n            \n            \n                \nconnectDragSource(elementOrNode: Node, options?: DragSourceOptions)\n                \n            \n\n\n\n\n            \n                \n                    This function allows you to connect a DOM node to your DragSource.\nYou will not usually need to call this directly;\nit is more easily handled by the directives.\nThe subscription returned is automatically unsubscribed when the connection is made.\nThis may be immediate if the DragSource already has a type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    elementOrNode\n                                    \n                                            Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                DragSourceOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHandlerId\n                        \n                    \n                \n            \n            \n                \ngetHandlerId()\n                \n            \n\n\n\n\n            \n                \n                    Returns the drag source ID that can be used to simulate the drag and drop events\nwith the testing backend.\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setType\n                        \n                    \n                \n            \n            \n                \nsetType(type: string | symbol)\n                \n            \n\n\n\n\n            \n                \n                    Use this method to have a dynamically typed source. If no type has\npreviously been set, it creates the subscription and allows the\n[dragSource] DOM element to be connected. If you do not need to\ndynamically update the type, you can set it once via the\nDragSourceSpec property.\nIf you wish to have a dynamic type based on an @Input() property, for\nexample, you must call setType() in either of your component's\nngOnInit or ngOnChanges methods:\n@Input() type: string;\n@Input() model: { parentId: number; name: string; };\ntarget = this.dnd.dragSource(null, {\n  // ...\n});\nngOnChanges() {\n  // use what your parent component told you to\n  this.target.setType(this.type);\n  // or create groupings on the fly\n  this.target.setType(\"PARENT_\" + this.model.parentId.toString());\n}It may be more convenient or easier to understand if you write:\n@Input() set type(t) {\n  this.source.setType(t);\n}\nsource = this.dnd.dragSource(null, {\n  beginDrag: () => ({ ... })\n});\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                            string | symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DragSourceDirective.html":{"url":"directives/DragSourceDirective.html","title":"directive - DragSourceDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  DragSourceDirective\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dnd.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Allows you to connect a DragSource to an element in a component template.\n\n            \n\n            \n                Extends\n            \n            \n                    DndDirective\n            \n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [dragSource]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dragSource\n                            \n                            \n                                dragSourceOptions\n                            \n                            \n                                dragSourceType\n                            \n                            \n                                noHTML5Preview\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dragSource\n                    \n                \n                \n                    \n                        Type :         DragSource\n\n                    \n                \n                \n                    \n                        Which source to connect the DOM to\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragSourceOptions\n                    \n                \n                \n                    \n                        Type :         DragSourceOptions\n\n                    \n                \n                \n                    \n                        Pass an options object as you would to DragSource.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dragSourceType\n                    \n                \n                \n                    \n                        Type :     string | symbol\n\n                    \n                \n                \n                    \n                        Shortcut for setting a type on the connection.\nLets you use Angular binding to do it. Runs DragSource.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        noHTML5Preview\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Do not render an HTML5 preview. Only applies when using the HTML5 backend.\nIt does not use { captureDraggingState: true } for IE11 support; that is broken.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragSourceMonitor.html":{"url":"interfaces/DragSourceMonitor.html","title":"interface - DragSourceMonitor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragSourceMonitor\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/source-monitor.ts\n        \n\n\n            \n                Description\n            \n            \n                The monitor available in DragSource's listen method.\n\n            \n\n            \n                Extends\n            \n            \n                        MonitorBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        canDrag\n                                    \n                                \n                                \n                                    \n                                        didDrop\n                                    \n                                \n                                \n                                    \n                                        getDropResult\n                                    \n                                \n                                \n                                    \n                                        isDragging\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canDrag\n                        \n                    \n                \n            \n            \n                \ncanDrag()\n                \n            \n\n\n\n\n            \n                \n                    Returns true if NO drag operation is in progress, and the owner's\ncanDrag() returns true or is not defined.\nNote that canDrag doesn't blindly return what you supplied in\nDragSourceSpec, so it isn't very useful as a general\nsource-is-enabled/disabled flag.\nInstead, keep your canDrag logic simple, and replicate it in your template.\n content {\n  canDrag: () => this.someProperty\n}\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        didDrop\n                        \n                    \n                \n            \n            \n                \ndidDrop()\n                \n            \n\n\n\n\n            \n                \n                    Returns true if some drop target handled the drop event; false\notherwise. Even if a target did not return a drop result, didDrop()\nreturns true. Use it inside endDrag() to test whether any drop target\nhas handled the drop. Returns false if called outside endDrag().\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDropResult\n                        \n                    \n                \n            \n            \n                \ngetDropResult()\n                \n            \n\n\n\n\n            \n                \n                    Returns a plain object representing the last recorded drop result. The\ndrop targets may optionally specify it by returning an object from their\ndrop() methods. When a chain of drop() is dispatched for the nested\ntargets, bottom up, any parent that explicitly returns its own result from\ndrop() overrides the child drop result previously set by the child.\nReturns null if called outside endDrag().\n\n\n                    \n                        Returns :     DropResult\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDragging\n                        \n                    \n                \n            \n            \n                \nisDragging()\n                \n            \n\n\n\n\n            \n                \n                    Returns true if a drag operation is in progress, and either the owner\ninitiated the drag, or its isDragging() is defined and returns true.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DragSourceMonitorClass.html":{"url":"classes/DragSourceMonitorClass.html","title":"class - DragSourceMonitorClass","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DragSourceMonitorClass\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createSourceMonitor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            DragSourceMonitor\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                internalMonitor\n                            \n                            \n                                sourceId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canDrag\n                            \n                            \n                                didDrop\n                            \n                            \n                                getClientOffset\n                            \n                            \n                                getDifferenceFromInitialOffset\n                            \n                            \n                                getDropResult\n                            \n                            \n                                getInitialClientOffset\n                            \n                            \n                                getInitialSourceClientOffset\n                            \n                            \n                                getItem\n                            \n                            \n                                getItemType\n                            \n                            \n                                getSourceClientOffset\n                            \n                            \n                                isDragging\n                            \n                            \n                                receiveHandlerId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(manager: any)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        manager\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        internalMonitor\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DragDropMonitor\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sourceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Identifier | undefined\n\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canDrag\n                        \n                    \n                \n            \n            \n                \ncanDrag()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        didDrop\n                        \n                    \n                \n            \n            \n                \ndidDrop()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClientOffset\n                        \n                    \n                \n            \n            \n                \ngetClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDifferenceFromInitialOffset\n                        \n                    \n                \n            \n            \n                \ngetDifferenceFromInitialOffset()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDropResult\n                        \n                    \n                \n            \n            \n                \ngetDropResult()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n            \n                \ngetItem()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItemType\n                        \n                    \n                \n            \n            \n                \ngetItemType()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDragging\n                        \n                    \n                \n            \n            \n                \nisDragging()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        receiveHandlerId\n                        \n                    \n                \n            \n            \n                \nreceiveHandlerId(sourceId: Identifier | undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sourceId\n                                    \n                                            Identifier | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragSourceOptions.html":{"url":"interfaces/DragSourceOptions.html","title":"interface - DragSourceOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragSourceOptions\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Provide customisations for how a backend should handle a DragSource and\ndisplay items dragged from it. See DragSource.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dropEffect\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dropEffect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dropEffect:     \"copy\" | \"move\" | \"link\" | \"none\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"copy\" | \"move\" | \"link\" | \"none\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A string. By default, 'move'. In the browsers that support this\nfeature, specifying 'copy' shows a special \"copying\" cursor, while 'move'\ncorresponds to the \"move\" cursor. You might want to use this option to\nprovide a hint to the user about whether an action is destructive.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DragSourceSpec.html":{"url":"interfaces/DragSourceSpec.html","title":"interface - DragSourceSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DragSourceSpec\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/drag-source-specification.ts\n        \n\n\n            \n                Description\n            \n            \n                The spec passed to DndService.\nNote the two type parameters. Both must represent plain JS objects.\nItem is the type you return from beginDrag(), and available in monitor.getItem().\nLimitations in TypeScript may prevent inferring this in many circumstances,\nand it will default to {}. It is best if you are strong-typing to pass a\ntype parameter like so:\ninterface MyDraggedItemType { id: number; }\n// ...\nsource = this.dnd.dragSource(..., {\n    beginDrag: monitor => ({ id: this.id })\n})DropResult is the type you expect a drop target to return from drop().\nIt is the type of the object returned by monitor.getDropResult() during endDrag().\nNote that your backend may assign some extra properties. You should define a\nDropResult type that recognises these, such as:\ninterface HTML5DropResult { dropEffect: string; }\ninterface MyDropResult extends HTML5DropResult { id: number; }\ntarget = this.dnd.dropTarget(..., {\n    drop: monitor => ({ id: this.id })\n});\n\nsource = this.dnd.dragSource(..., {\n    endDrag: monitor => {\n        const result = monitor.getDropResult();\n        if (result.dropEffect === 'copy') {\n            // user had alt key pressed + the GreenPlus icon when they dropped,\n            // so copy instead of move\n        }\n    }\n});\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        beginDrag\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        canDrag\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        endDrag\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        isDragging\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        beginDrag\n                        \n                    \n                \n            \n            \n                \nbeginDrag(monitor: DragSourceMonitor)\n                \n            \n\n\n\n\n            \n                \n                    Required. When the dragging starts, beginDrag is called. You must return\na plain JavaScript object describing the data being dragged. What you\nreturn is the only information available to the drop targets about the\ndrag source so it's important to pick the minimal data they need to know.\nYou may be tempted to put a reference to the component into it, but you\nshould try very hard to avoid doing this because it couples the drag\nsources and drop targets. It's a good idea to return something like { id: this.id } from this method.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    monitor\n                                    \n                                                DragSourceMonitor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Item\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Optional\n                        canDrag\n                        \n                    \n                \n            \n            \n                \ncanDrag(monitor: DragSourceMonitor)\n                \n            \n\n\n\n\n            \n                \n                    Optional. Queries your component to determine whether this source can be\ndragged. Default returns true; this is often sufficient.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    monitor\n                                    \n                                                DragSourceMonitor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Optional\n                        endDrag\n                        \n                    \n                \n            \n            \n                \nendDrag(monitor: DragSourceMonitor)\n                \n            \n\n\n\n\n            \n                \n                    Optional. Notifies your component when dragging ends.\nThis is a good place to fire actions or modify a component. You will often\nwant to check DragSourceMonitor and DragSourceMonitor for more\ndetails.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    monitor\n                                    \n                                                DragSourceMonitor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Optional\n                        isDragging\n                        \n                    \n                \n            \n            \n                \nisDragging(monitor: DragSourceMonitor)\n                \n            \n\n\n\n\n            \n                \n                    By default, only the drag source that initiated the drag operation is\n considered to be dragging. You might override this by matching on the\n DragSourceMonitor.id and your component's id, or similar. Do this if the\n original component may be unmounted during the dragging and later\n \"resurrected\" with a different parent. For example, when moving a card\n across the lists in a Kanban board, you want it to retain the dragged\n appearance—even though technically, the component gets unmounted and\n a different one gets mounted every time you hover over another list.\n Note: You may not call DragSourceMonitor inside this method.\nNOTE: runs outside Angular change detection. This is for performance\nreasons. You shouldn't be making changes to your component here anyway. If\nyou do change your component inside this callback, it may not appear\nimmediately, and if you use NgZone.run() then you may experience\nperformance degradation.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    monitor\n                                    \n                                                DragSourceMonitor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropTarget.html":{"url":"interfaces/DropTarget.html","title":"interface - DropTarget","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropTarget\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/connection-types.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents one drop target and its behaviour, that can listen to the state\nand connect to a DOM element.\nTo create one, refer to DndService.\n\n            \n\n            \n                Extends\n            \n            \n                        ConnectionBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        connectDropTarget\n                                    \n                                \n                                \n                                    \n                                        getHandlerId\n                                    \n                                \n                                \n                                    \n                                        setTypes\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        connectDropTarget\n                        \n                    \n                \n            \n            \n                \nconnectDropTarget(elementOrNode: Node)\n                \n            \n\n\n\n\n            \n                \n                    This function allows you to connect a DOM node to your DropTarget.\nYou will not usually need to call this directly;\nit is more easily handled by the directives.\nThe subscription returned is automatically unsubscribed when the connection is made.\nThis may be immediate if the DropTarget already has a type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    elementOrNode\n                                    \n                                            Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Subscription\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHandlerId\n                        \n                    \n                \n            \n            \n                \ngetHandlerId()\n                \n            \n\n\n\n\n            \n                \n                    Returns the drop target ID that can be used to simulate the drag and drop events\nwith the testing backend.\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setTypes\n                        \n                    \n                \n            \n            \n                \nsetTypes(type: TypeOrTypeArray)\n                \n            \n\n\n\n\n            \n                \n                    Use this method to have a dynamically typed target. If no type has\npreviously been set, it creates the subscription and allows the\n[dragSource] DOM element to be connected. If you do not need to\ndynamically update the type, you can set it once via the\nDropTargetSpec property.\nSee DragSource for an example of how to set\na dynamic type, for it is very similar here.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                TypeOrTypeArray\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/DropTargetDirective.html":{"url":"directives/DropTargetDirective.html","title":"directive - DropTargetDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  DropTargetDirective\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dnd.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Allows you to connect a DropTarget to an element in a component template.\n\n            \n\n            \n                Extends\n            \n            \n                    DndDirective\n            \n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [dropTarget]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dropTarget\n                            \n                            \n                                dropTargetType\n                            \n                            \n                                dropTargetTypes\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    dropTargetType\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        dropTarget\n                    \n                \n                \n                    \n                        Type :         DropTarget\n\n                    \n                \n                \n                    \n                        Which target to connect the DOM to\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dropTargetType\n                    \n                \n                \n                    \n                        Type :         TypeOrTypeArray\n\n                    \n                \n                \n                    \n                        Reduce typo confusion by allowing non-plural version of dropTargetTypes\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        dropTargetTypes\n                    \n                \n                \n                    \n                        Type :         TypeOrTypeArray\n\n                    \n                \n                \n                    \n                        Shortcut for setting a type on the connection.\nLets you use Angular binding to do it. Runs DropTarget.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        dropTargetType\n                    \n                \n\n\n                \n                    \n                        setdropTargetType(t: TypeOrTypeArray)\n                    \n                \n                    \n                        \n                                Reduce typo confusion by allowing non-plural version of dropTargetTypes\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            t\n                                                    \n                                                            \n                                                                            TypeOrTypeArray\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropTargetMonitor.html":{"url":"interfaces/DropTargetMonitor.html","title":"interface - DropTargetMonitor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropTargetMonitor\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/target-monitor.ts\n        \n\n\n            \n                Description\n            \n            \n                The monitor available in DropTarget's listen method.\n\n            \n\n            \n                Extends\n            \n            \n                        MonitorBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        canDrop\n                                    \n                                \n                                \n                                    \n                                        didDrop\n                                    \n                                \n                                \n                                    \n                                        getDropResult\n                                    \n                                \n                                \n                                    \n                                        isOver\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canDrop\n                        \n                    \n                \n            \n            \n                \ncanDrop()\n                \n            \n\n\n\n\n            \n                \n                    Returns true if there is a drag operation in progress, and the owner's\ncanDrop() returns true or is not defined.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        didDrop\n                        \n                    \n                \n            \n            \n                \ndidDrop()\n                \n            \n\n\n\n\n            \n                \n                    Returns true if some drop target has handled the drop event, false\notherwise. Even if a target did not return a drop result, didDrop()\nreturns true. Use it inside drop() to test whether any nested drop\ntarget has already handled the drop. Returns false if called outside\ndrop().\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDropResult\n                        \n                    \n                \n            \n            \n                \ngetDropResult()\n                \n            \n\n\n\n\n            \n                \n                    Returns a plain object representing the last recorded drop result. The\ndrop targets may optionally specify it by returning an object from their\ndrop() methods. When a chain of drop() is dispatched for the nested\ntargets, bottom up, any parent that explicitly returns its own result\nfrom drop() overrides the drop result previously set by the child.\nReturns null if called outside drop().\n\n\n                    \n                        Returns :     DropResult\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isOver\n                        \n                    \n                \n            \n            \n                \nisOver(options?: literal type)\n                \n            \n\n\n\n\n            \n                \n                    Returns true if there is a drag operation in progress, and the pointer\nis currently hovering over the owner. You may optionally pass\n{ shallow: true } to strictly check whether only the owner is being\nhovered, as opposed to a nested target.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DropTargetMonitorClass.html":{"url":"classes/DropTargetMonitorClass.html","title":"class - DropTargetMonitorClass","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DropTargetMonitorClass\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createTargetMonitor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            DropTargetMonitor\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                internalMonitor\n                            \n                            \n                                targetId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canDrop\n                            \n                            \n                                didDrop\n                            \n                            \n                                getClientOffset\n                            \n                            \n                                getDifferenceFromInitialOffset\n                            \n                            \n                                getDropResult\n                            \n                            \n                                getInitialClientOffset\n                            \n                            \n                                getInitialSourceClientOffset\n                            \n                            \n                                getItem\n                            \n                            \n                                getItemType\n                            \n                            \n                                getSourceClientOffset\n                            \n                            \n                                isOver\n                            \n                            \n                                receiveHandlerId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(manager: any)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        manager\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        internalMonitor\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DragDropMonitor\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Identifier | undefined\n\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canDrop\n                        \n                    \n                \n            \n            \n                \ncanDrop()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        didDrop\n                        \n                    \n                \n            \n            \n                \ndidDrop()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClientOffset\n                        \n                    \n                \n            \n            \n                \ngetClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDifferenceFromInitialOffset\n                        \n                    \n                \n            \n            \n                \ngetDifferenceFromInitialOffset()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDropResult\n                        \n                    \n                \n            \n            \n                \ngetDropResult()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n            \n                \ngetItem()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItemType\n                        \n                    \n                \n            \n            \n                \ngetItemType()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isOver\n                        \n                    \n                \n            \n            \n                \nisOver(options: object)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { shallow: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        receiveHandlerId\n                        \n                    \n                \n            \n            \n                \nreceiveHandlerId(targetId: Identifier | undefined)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    targetId\n                                    \n                                            Identifier | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropTargetSpec.html":{"url":"interfaces/DropTargetSpec.html","title":"interface - DropTargetSpec","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropTargetSpec\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/drop-target-specification.ts\n        \n\n\n            \n                Description\n            \n            \n                The spec passed to DndService.\nNote the two type parameters. Both must represent plain JS objects. See the extended\ndiscussion of these type parameters at DragSourceSpec.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Optional\n                                    \n                                        canDrop\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        drop\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        hover\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Optional\n                        canDrop\n                        \n                    \n                \n            \n            \n                \ncanDrop(monitor: DropTargetMonitor)\n                \n            \n\n\n\n\n            \n                \n                    Queries your component to determine whether an item can be dropped on this target.\nNOTE: runs outside Angular change detection. This is for performance\nreasons. You shouldn't be making changes to your component here anyway. If\nyou do change your component inside this callback, it may not appear\nimmediately, and if you use NgZone.run() then you may experience\nperformance degradation.\nDefault, when not specified, is true.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    monitor\n                                    \n                                                DropTargetMonitor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Optional\n                        drop\n                        \n                    \n                \n            \n            \n                \ndrop(monitor: DropTargetMonitor)\n                \n            \n\n\n\n\n            \n                \n                    Called when a compatible item is dropped on the target. You may either\nreturn nothing, or a plain object.\nIf you return an object, it is going to become the drop result and will be\navailable to the drag source in its DragSourceSpec method as\nDropTargetMonitor. This is useful in case you want the\nsource to perform different actions depending on which target received the\ndrop. Otherwise, it is simpler to handle the dropped item here.\nIf you have nested drop targets, you can test whether a nested target has\nalready handled drop by checking DropTargetMonitor. Both this\nmethod and the source's endDrag() method are good places to fire\n@ngrx/store actions.\nThis method will not be called if canDrop() is defined and returns false.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    monitor\n                                    \n                                                DropTargetMonitor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DropResult | void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Optional\n                        hover\n                        \n                    \n                \n            \n            \n                \nhover(monitor: DropTargetMonitor)\n                \n            \n\n\n\n\n            \n                \n                    Called frequently while the mouse hovers over the owner drop target while\ndragging a relevant item.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    monitor\n                                    \n                                                DropTargetMonitor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FactoryArgs.html":{"url":"interfaces/FactoryArgs.html","title":"interface - FactoryArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FactoryArgs\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/connection-factory.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createConnector\n                                        \n                                \n                                \n                                        \n                                            createHandler\n                                        \n                                \n                                \n                                        \n                                            createMonitor\n                                        \n                                \n                                \n                                        \n                                            registerHandler\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createConnector\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createConnector:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createHandler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createHandler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createMonitor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createMonitor:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        registerHandler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        registerHandler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MonitorBase.html":{"url":"interfaces/MonitorBase.html","title":"interface - MonitorBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MonitorBase\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/monitor-base.ts\n        \n\n\n            \n                Description\n            \n            \n                The methods common to all monitor classes.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getClientOffset\n                                    \n                                \n                                \n                                    \n                                        getDifferenceFromInitialOffset\n                                    \n                                \n                                \n                                    \n                                        getInitialClientOffset\n                                    \n                                \n                                \n                                    \n                                        getInitialSourceClientOffset\n                                    \n                                \n                                \n                                    \n                                        getItem\n                                    \n                                \n                                \n                                    \n                                        getItemType\n                                    \n                                \n                                \n                                    \n                                        getSourceClientOffset\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getClientOffset\n                        \n                    \n                \n            \n            \n                \ngetClientOffset()\n                \n            \n\n\n\n\n            \n                \n                    The current mouse x,y position relative to the viewport. Returns null\nif no item is being dragged.\n\n\n                    \n                        Returns :         Offset | null\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDifferenceFromInitialOffset\n                        \n                    \n                \n            \n            \n                \ngetDifferenceFromInitialOffset()\n                \n            \n\n\n\n\n            \n                \n                    A vector x,y of the displacement of the dragged item from its initial\nposition. Returns null if no item is being dragged.\n\n\n                    \n                        Returns :         Offset | null\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialClientOffset()\n                \n            \n\n\n\n\n            \n                \n                    The initial mouse x,y position relative to the viewport, when the current\ndrag operation started. Returns null if no item is being dragged.\n\n\n                    \n                        Returns :         Offset | null\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getInitialSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetInitialSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n                    x,y relative to viewport of the item's DOM element before it was dragged.\nReturns null if no item is being dragged.\n\n\n                    \n                        Returns :         Offset | null\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n            \n                \ngetItem()\n                \n            \n\n\n\n\n            \n                \n                    The item in transit, if any. This is what you returned from\nDragSourceSpec. Returns null if no item is being dragged.\n\n\n                    \n                        Returns :     Item | null\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItemType\n                        \n                    \n                \n            \n            \n                \ngetItemType()\n                \n            \n\n\n\n\n            \n                \n                    The type of the item in transit. Returns null if no item is being dragged.\n\n\n                    \n                        Returns :     string | symbol | null\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSourceClientOffset\n                        \n                    \n                \n            \n            \n                \ngetSourceClientOffset()\n                \n            \n\n\n\n\n            \n                \n                    The projected x,y position relative to viewport of the root DOM element of the drag source\n= its initial position + displacement. Returns null if no item is being dragged.\n\n\n                    \n                        Returns :         Offset | null\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Offset.html":{"url":"interfaces/Offset.html","title":"interface - Offset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Offset\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/type-ish.ts\n        \n\n\n            \n                Description\n            \n            \n                Just a plain, reusable xy coordinate type.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    x coordinate\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    y coordinate\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Reconnector.html":{"url":"classes/Reconnector.html","title":"class - Reconnector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Reconnector\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/Reconnector.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                disconnect\n                            \n                            \n                                handlerId\n                            \n                            \n                                hook\n                            \n                            \n                                    Optional\n                                node\n                            \n                            \n                                    Optional\n                                options\n                            \n                            \n                                reconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(backendConnector: (handlerId: any,node: Node,options: O) => void)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        backendConnector\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        disconnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Unsubscribe | null\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handlerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hook\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        node\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Node\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     O\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reconnect\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Source.html":{"url":"classes/Source.html","title":"class - Source","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Source\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createSourceFactory.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            DragSource\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                beginDrag\n                            \n                            \n                                canDrag\n                            \n                            \n                                endDrag\n                            \n                            \n                                isDragging\n                            \n                            \n                                withChangeDetection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(spec: DragSourceSpec, zone: Zone, monitor: DragSourceMonitor)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        spec\n                                                  \n                                                        \n                                                                        DragSourceSpec\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    Zone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        monitor\n                                                  \n                                                        \n                                                                        DragSourceMonitor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        beginDrag\n                        \n                    \n                \n            \n            \n                \nbeginDrag()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        canDrag\n                        \n                    \n                \n            \n            \n                \ncanDrag()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endDrag\n                        \n                    \n                \n            \n            \n                \nendDrag()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDragging\n                        \n                    \n                \n            \n            \n                \nisDragging(globalMonitor: any, sourceId: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    globalMonitor\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sourceId\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        withChangeDetection\n                        \n                    \n                \n            \n            \n                \nwithChangeDetection(fn: () => void)\n                \n            \n\n\n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SourceConnector.html":{"url":"classes/SourceConnector.html","title":"class - SourceConnector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SourceConnector\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createSourceConnector.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Connector\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hooks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                receiveHandlerId\n                            \n                            \n                                    Public\n                                reconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(backend: Backend)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        backend\n                                                  \n                                                        \n                                                                    Backend\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hooks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DragSourceConnector\n\n                    \n                \n                \n                    \n                        Default value : {\n    dragSource: this.dragSource.hook,\n    dragPreview: this.dragPreview.hook,\n  }\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        receiveHandlerId\n                        \n                    \n                \n            \n            \n                \n                    \n                    receiveHandlerId(handlerId: Identifier | null)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handlerId\n                                    \n                                            Identifier | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        reconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    reconnect()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SourceConstructor.html":{"url":"interfaces/SourceConstructor.html","title":"interface - SourceConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SourceConstructor\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/connection-factory.ts\n        \n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Target.html":{"url":"classes/Target.html","title":"class - Target","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Target\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createTargetFactory.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            DropTarget\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canDrop\n                            \n                            \n                                drop\n                            \n                            \n                                hover\n                            \n                            \n                                receiveMonitor\n                            \n                            \n                                withChangeDetection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(spec: DropTargetSpec, zone: Zone, monitor: DropTargetMonitor)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        spec\n                                                  \n                                                        \n                                                                        DropTargetSpec\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                    Zone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        monitor\n                                                  \n                                                        \n                                                                        DropTargetMonitor\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canDrop\n                        \n                    \n                \n            \n            \n                \ncanDrop()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        drop\n                        \n                    \n                \n            \n            \n                \ndrop()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hover\n                        \n                    \n                \n            \n            \n                \nhover()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        receiveMonitor\n                        \n                    \n                \n            \n            \n                \nreceiveMonitor(monitor: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    monitor\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        withChangeDetection\n                        \n                    \n                \n            \n            \n                \nwithChangeDetection(fn: () => void)\n                \n            \n\n\n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fn\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TargetConnector.html":{"url":"classes/TargetConnector.html","title":"class - TargetConnector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TargetConnector\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/createTargetConnector.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Connector\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hooks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                receiveHandlerId\n                            \n                            \n                                    Public\n                                reconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(backend: Backend)\n                    \n                \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        backend\n                                                  \n                                                        \n                                                                    Backend\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hooks\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DropTargetConnector\n\n                    \n                \n                \n                    \n                        Default value : {\n    dropTarget: this.dropTarget.hook,\n  }\n                    \n                \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        receiveHandlerId\n                        \n                    \n                \n            \n            \n                \n                    \n                    receiveHandlerId(handlerId: Identifier | null)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handlerId\n                                    \n                                            Identifier | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        reconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    reconnect()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TargetConstructor.html":{"url":"interfaces/TargetConstructor.html","title":"interface - TargetConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TargetConstructor\n\n\n\n        \n            Info\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/internal/connection-factory.ts\n        \n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file.\nSee Conventional Commits for commit guidelines.\n2.0.2 (2022-08-06)\nNote: Version bump only for package @ng-dnd/core\n2.0.1 (2022-05-03)\nBug Fixes\n\nfix reference types of triple-slash directives (#7) (2c0127e)\n\n2.0.0 (2022-05-03)\nBug Fixes\n\nbuild: fix tslib version (d5aa05b)\n\nFeatures\n\nadd eslint and remove tslint (f8fb0df)\n\n1.0.3 (2022-05-02)\nNote: Version bump only for package @ng-dnd/core\n1.0.2 (2022-05-02)\nNote: Version bump only for package @ng-dnd/core\n1.0.1 (2022-02-19)\nNote: Version bump only for package @ng-dnd/core\n1.0.0 (2021-08-14)\nNote: Version bump only for package @ng-dnd/core\n0.1.2 (2021-08-09)\nNote: Version bump only for package @ng-dnd/core\n0.1.1 (2021-08-07)\nNote: Version bump only for package @ng-dnd/core\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/connection-types.ts\n            \n            interface\n            ConnectionBase\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/connection-types.ts\n            \n            interface\n            DragLayer\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/connection-types.ts\n            \n            interface\n            DragSource\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/connection-types.ts\n            \n            interface\n            DropTarget\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/connector.service.ts\n            \n            injectable\n            DndService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/connector.service.ts\n            \n            interface\n            AddSubscription\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/connectors.ts\n            \n            interface\n            DragPreviewOptions\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/connectors.ts\n            \n            interface\n            DragSourceOptions\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/dnd.directive.ts\n            \n            directive\n            DragPreviewDirective\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/dnd.directive.ts\n            \n            directive\n            DragSourceDirective\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/dnd.directive.ts\n            \n            directive\n            DropTargetDirective\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/dnd.module.ts\n            \n            interface\n            BackendFactoryInput\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/dnd.module.ts\n            \n            interface\n            BackendInput\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/drag-source-specification.ts\n            \n            interface\n            DragSourceSpec\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/drop-target-specification.ts\n            \n            interface\n            DropTargetSpec\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/internal/Reconnector.ts\n            \n            class\n            Reconnector\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            class\n            Connection\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            interface\n            FactoryArgs\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            interface\n            SourceConstructor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            interface\n            TargetConstructor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            variable\n            SourceConnection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/connection-factory.ts\n            \n            variable\n            TargetConnection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createSourceConnector.ts\n            \n            class\n            SourceConnector\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/internal/createSourceConnector.ts\n            \n            interface\n            Connector\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/internal/createSourceConnector.ts\n            \n            function\n            createSourceConnector\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createSourceFactory.ts\n            \n            class\n            Source\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/internal/createSourceFactory.ts\n            \n            function\n            createSourceFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createSourceMonitor.ts\n            \n            class\n            DragSourceMonitorClass\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/internal/createSourceMonitor.ts\n            \n            function\n            createSourceMonitor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createSourceMonitor.ts\n            \n            variable\n            isCallingCanDrag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createSourceMonitor.ts\n            \n            variable\n            isCallingIsDragging\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createTargetConnector.ts\n            \n            class\n            TargetConnector\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/internal/createTargetConnector.ts\n            \n            function\n            createTargetConnector\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createTargetFactory.ts\n            \n            class\n            Target\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/internal/createTargetFactory.ts\n            \n            function\n            createTargetFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createTargetMonitor.ts\n            \n            class\n            DropTargetMonitorClass\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/internal/createTargetMonitor.ts\n            \n            function\n            createTargetMonitor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/createTargetMonitor.ts\n            \n            variable\n            isCallingCanDrop\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/drag-layer-connection.ts\n            \n            class\n            DragLayerConnectionClass\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/internal/invariant.ts\n            \n            function\n            invariant\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/register-source.ts\n            \n            function\n            registerSource\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/internal/register-target.ts\n            \n            function\n            registerTarget\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/layer-monitor.ts\n            \n            interface\n            DragLayerMonitor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/monitor-base.ts\n            \n            interface\n            MonitorBase\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/source-monitor.ts\n            \n            interface\n            DragSourceMonitor\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/target-monitor.ts\n            \n            interface\n            DropTargetMonitor\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_BACKEND\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_BACKEND_DEBUG_MODE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_BACKEND_FACTORY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_BACKEND_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_GLOBAL_CONTEXT\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            DRAG_DROP_MANAGER\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tokens.ts\n            \n            variable\n            TYPE_DYNAMIC\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/type-ish.ts\n            \n            interface\n            Offset\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/areCollectsEqual.ts\n            \n            function\n            areCollectsEqual\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/areOptionsEqual.ts\n            \n            function\n            areOptionsEqual\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/shallowEqual.ts\n            \n            function\n            shallowEqual\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            dnd-core : ^16.0.0\n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : >= 13.0.0\n        \n            @angular/core : >= 13.0.0\n        \n            rxjs : >= 7.0.0\n        \n            zone.js : >= 0.11.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            areCollectsEqual   (src/.../areCollectsEqual.ts)\n                        \n                        \n                            areOptionsEqual   (src/.../areOptionsEqual.ts)\n                        \n                        \n                            createSourceConnector   (src/.../createSourceConnector.ts)\n                        \n                        \n                            createSourceFactory   (src/.../createSourceFactory.ts)\n                        \n                        \n                            createSourceMonitor   (src/.../createSourceMonitor.ts)\n                        \n                        \n                            createTargetConnector   (src/.../createTargetConnector.ts)\n                        \n                        \n                            createTargetFactory   (src/.../createTargetFactory.ts)\n                        \n                        \n                            createTargetMonitor   (src/.../createTargetMonitor.ts)\n                        \n                        \n                            invariant   (src/.../invariant.ts)\n                        \n                        \n                            registerSource   (src/.../register-source.ts)\n                        \n                        \n                            registerTarget   (src/.../register-target.ts)\n                        \n                        \n                            shallowEqual   (src/.../shallowEqual.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/areCollectsEqual.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        areCollectsEqual\n                        \n                    \n                \n            \n            \n                \nareCollectsEqual(a: any, b: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    a\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    b\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/areOptionsEqual.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        areOptionsEqual\n                        \n                    \n                \n            \n            \n                \nareOptionsEqual(nextOptions: any, currentOptions: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nextOptions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentOptions\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/internal/createSourceConnector.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createSourceConnector\n                        \n                    \n                \n            \n            \n                \ncreateSourceConnector(backend: Backend)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    backend\n                                    \n                                            Backend\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/internal/createSourceFactory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createSourceFactory\n                        \n                    \n                \n            \n            \n                \ncreateSourceFactory(spec: DragSourceSpec, zone: Zone)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                DragSourceSpec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    zone\n                                    \n                                            Zone\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/internal/createSourceMonitor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createSourceMonitor\n                        \n                    \n                \n            \n            \n                \ncreateSourceMonitor(manager: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    manager\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DragSourceMonitor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/internal/createTargetConnector.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createTargetConnector\n                        \n                    \n                \n            \n            \n                \ncreateTargetConnector(backend: Backend)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    backend\n                                    \n                                            Backend\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/internal/createTargetFactory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createTargetFactory\n                        \n                    \n                \n            \n            \n                \ncreateTargetFactory(spec: DropTargetSpec, zone: Zone)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    spec\n                                    \n                                                DropTargetSpec\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    zone\n                                    \n                                            Zone\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/internal/createTargetMonitor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createTargetMonitor\n                        \n                    \n                \n            \n            \n                \ncreateTargetMonitor(manager: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    manager\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DropTargetMonitor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/internal/invariant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        invariant\n                        \n                    \n                \n            \n            \n                \ninvariant(assertion: boolean, msg: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    assertion\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    msg\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/internal/register-source.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        registerSource\n                        \n                    \n                \n            \n            \n                \nregisterSource(type: any, source: DragSource, manager: DragDropManager)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    source\n                                    \n                                                DragSource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    manager\n                                    \n                                            DragDropManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/internal/register-target.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        registerTarget\n                        \n                    \n                \n            \n            \n                \nregisterTarget(type: any, target: DropTarget, manager: DragDropManager)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    target\n                                    \n                                                DropTarget\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    manager\n                                    \n                                            DragDropManager\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/utils/shallowEqual.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        shallowEqual\n                        \n                    \n                \n            \n            \n                \nshallowEqual(objA: any, objB: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    objA\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    objB\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n@ng-dnd/core\n\n\n\nNg-DnD is a toolkit for building complex drag and drop interfaces in Angular. It is based on, and very similar to react-dnd by Dan Abramov and others, and is also powered by dnd-core. It is compatible with all backends.\nCheck out the examples here.\nInstallation\nyarn add @ng-dnd/core react-dnd-html5-backendNext, follow the Quickstart and check out the Tutorial.\nSub-packages\n\n@ng-dnd/multi-backend\n@ng-dnd/sortable\n\nFeatures\n\nMake any component draggable, or into a drop target.\nDoesn't mutate the DOM, and doesn't use classes and CSS to do 'callbacks'.\nEvery visible change is made through Angular templates.\nThe truth lives in JavaScript, with unidirectional data flow (like\n@ngrx/store)\nObservable APIs, designed to fit in Angular.\nTypeScript friendly, with strong typing for in-flight objects, and inline\ndocumentation.\nWorks with HTML5 drag and drop, and all other react-dnd backends.\n\nGoals\n\nHigh performance. All code runs outside the Angular zone, and re-enters in batches only where strictly necessary, such that change detection runs precisely as many times as you need it to, with no extra configuration. You should also be able to take full advantage of OnPush change detection.\n\nLargely possible to translate react-dnd code and examples into Angular (see Translating React Code).\n\nComprehensive documentation and tons of example code, written in Angular style.\n\n\nWhat can you do with it?\nInstead of building maximally-ergonomic solutions to simple use cases, react-dnd and @ng-dnd provide an abstraction over most things you could want to do with drag and drop. They are lower-level building blocks that make it easy to implement some very complex interactions. They assign no specific meaning to a drag/drop operation. You get to define what happens when a drag starts or ends or hovers. Here are some ambitious examples:\n\nThe traditional react-dnd tutorial, a chess board with movable pieces and rules\nDeleting items by dragging them to a 'trash can', like in the macOS dock.\nStamping out a template by dragging the template into a work area\nMerging two items by dragging one on top of the other\nHover over a 'folder' for a few seconds to 'drill down' into it\nThe famous lists and cards on trello.com, which actually uses react-dnd\nA diagramming tool where you can draw links between nodes\nA 2D CAD program\nA graphical query builder, or visual data pipeline like Luna\nMany other demonstrations of react-dnd (most with GIFs) in use\n\nAlternatives\nIt is important to note that for bare-bones sortable lists, where you have a mutable array of simple values, you don't necessarily need the superpowers in this library. There are plenty of cookie-cutter solutions out there, like the quite powerful ng2-dnd or ng2-dragula, which may get you to your deadline faster than learning and using @ng-dnd. But be warned; you may find yourself wanting more dragging power once you get a taste. In fact, this package was born when @cormacrelf got sick of maintaining ng2-dragula and watching users struggle to implement what react-dnd was born for.\nIf Angular and React aren't your thing, there's also vue-react-dnd.\nIssues\nNot all issues are @ng-dnd-related. If you think you found a bug in dnd-core or with the HTML5 backend, those issues belong on that codebase with their many contributors and wealth of experience. If there is a problem with another backend you are using, file an issue with that backend so you can get more specific help and so that the community can benefit.\nIssues and potential improvements to @ng-dnd are discussed on GitHub.\nLicense\nThis library is released under the MIT license. It depends on dnd-core, which is (now) also under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        DndModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    20 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 2.0.2\n        \n            Description : Drag and Drop for Angular\n        \n            Keywords : drag-and-drop, react-dnd, angular-dnd, ng-dnd, ngx-dnd\n        \n            License : MIT\n        \n            Repository : https://github.com/ng-dnd/ng-dnd\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DragSourceDecorator   (src/.../wrappers.ts)\n                        \n                        \n                            DragSourceFactory   (src/.../wrappers.ts)\n                        \n                        \n                            DropTargetDecorator   (src/.../wrappers.ts)\n                        \n                        \n                            DropTargetFactory   (src/.../wrappers.ts)\n                        \n                        \n                            TypeOrTypeArray   (src/.../type-ish.ts)\n                        \n                        \n                            Types   (src/.../wrappers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/wrappers.ts\n    \n    \n        \n            \n                \n                    \n                    DragSourceDecorator\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DragSourceFactory\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DropTargetDecorator\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DropTargetFactory\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Types\n                \n            \n            \n                \n                        string | symbol | (string | symbol)[]\n\n                \n            \n        \n    \n    src/type-ish.ts\n    \n    \n        \n            \n                \n                    \n                    TypeOrTypeArray\n                \n            \n            \n                \n                    String, symbol, or an array of either. Used on drop targets.\n\n                \n            \n            \n                \n                        string | symbol | Array\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DRAG_DROP_BACKEND   (src/.../tokens.ts)\n                        \n                        \n                            DRAG_DROP_BACKEND_DEBUG_MODE   (src/.../tokens.ts)\n                        \n                        \n                            DRAG_DROP_BACKEND_FACTORY   (src/.../tokens.ts)\n                        \n                        \n                            DRAG_DROP_BACKEND_OPTIONS   (src/.../tokens.ts)\n                        \n                        \n                            DRAG_DROP_GLOBAL_CONTEXT   (src/.../tokens.ts)\n                        \n                        \n                            DRAG_DROP_MANAGER   (src/.../tokens.ts)\n                        \n                        \n                            isCallingCanDrag   (src/.../createSourceMonitor.ts)\n                        \n                        \n                            isCallingCanDrop   (src/.../createTargetMonitor.ts)\n                        \n                        \n                            isCallingIsDragging   (src/.../createSourceMonitor.ts)\n                        \n                        \n                            SourceConnection   (src/.../connection-factory.ts)\n                        \n                        \n                            TargetConnection   (src/.../connection-factory.ts)\n                        \n                        \n                            TYPE_DYNAMIC   (src/.../tokens.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/tokens.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_BACKEND\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('dnd-core compatible backend')\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core compatible backend currently in use.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_BACKEND_DEBUG_MODE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken(\n  'should dnd-core run in debug mode?'\n)\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core compatible backend currently in use.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_BACKEND_FACTORY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken(\n  'dnd-core compatible backend'\n)\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core BackendFactory used to instantiate dnd-core.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_BACKEND_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken(\n  'options for dnd-core compatible backend'\n)\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core compatible backend's options.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_GLOBAL_CONTEXT\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('dnd-core context')\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core compatible backend currently in use.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DRAG_DROP_MANAGER\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('dnd-core DragDropManager')\n                    \n                \n\n            \n                \n                    The injection token for the dnd-core DragDropManager\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TYPE_DYNAMIC\n                        \n                    \n                \n            \n                \n                    \n                        Type :     symbol\n\n                    \n                \n                \n                    \n                        Default value : Symbol(\n  'no type specified, you must provide one with setType/setTypes'\n)\n                    \n                \n\n            \n                \n                    The type a source or target is given as a marker for 'you supplied null as a type',\nso that library consumers can be reminded to use setType/setTypes manually.\nSee DragSource.setType, DropTarget.setTypes.\n\n                \n            \n\n        \n    \n\n    src/internal/createSourceMonitor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isCallingCanDrag\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isCallingIsDragging\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n\n\n        \n    \n\n    src/internal/createTargetMonitor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isCallingCanDrop\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n\n\n        \n    \n\n    src/internal/connection-factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SourceConnection\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Connection as SourceConstructor\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TargetConnection\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Connection as TargetConstructor\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/quickstart.html":{"url":"additional-documentation/quickstart.html","title":"additional-page - Quickstart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstallation\nyarn add @ng-dnd/core react-dnd-html5-backendYou might consider @ng-dnd/multi-backend instead of the HTML5\nbackend, because it allows adding touch support as well.\nThen import DndModule and provide the backend:\nimport { DndModule } from '@ng-dnd/core';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\n@NgModule({\n  imports: [\n    // Don't forget the forRoot()\n    DndModule.forRoot({ backend: HTML5Backend }),\n  ],\n})\nexport class AppModule {}If you need it again on a child module, like a lazy-loaded module, you only need\nto import DndModule there. That way the backend and global drag state is only\ninitialized once. But you may use forRootto inject a new instance or to\ninclude drag and drop on only some child modules.\nConcepts\nThese pieces make up the library:\n\nAn item (JS Object, not a DOM node) is the source of truth for each drag\noperation\nA drag source registers a DOM node to commence drag operations\nA drop target registers a DOM node for hover and drop events\nwhile dragging\nA way for each to provide, listen for and query changes in the drag state:\na monitor and appropriate callbacks\nHooks to provide some other DOM element as the drag preview.\n\nreact-dnd defined one more thing, inspired by HTML5, to make using this sane:\neach item has a type, and drag sources and drop targets will\nrespectively emit and accept only items with matching types.\nThat's it. This library offers all those concepts in an Angular-friendly way,\nthat is also largely compatible with a lot of react-dnd code and examples.\nNext steps\n\nHave a look at the Examples, and browse their source code in the\nexamples app on GitHub.\n\nRead and follow the Tutorial\n\nRead the 3-part guide in the sidebar. Any specifics are available by browsing the interfaces and\nclasses.\n\n\nTouch support and alternate backends\nMobile devices have not implemented HTML5 drag and drop. You will need:\n\nA different backend using click or touch events, without dropping desktop support\nA way to render drag previews. Where on desktops you\ncan let the browser render drag previews, when using a backend based on click\nor touch events, on mobile you have to render them yourself.\n\nA good way to solve both problems at once is using\n@ng-dnd/multi-backend. It is based on the original\ndnd-multi-backend, which was designed to seamlessly switch\nbetween an HTML5 and a touch backend when it noticed different\nkinds of interaction. The @ng-dnd version includes a preview component.\nNote also that you will need to use an exported function\nto provide the backend, to retain AOT compatibility, if it requires assembly.\nMultiBackend, for example, can be used like so:\nexport function createBackend() {\n    return MultiBackend(HTML5ToTouch);\n}\n@NgModule({\n  imports: [\n    DndModule.forRoot({ backendFactory: createBackend })\n  ]\n}\n// ...Troubleshooting\nI get TypeError: backend is null, only when AOT is enabled\nAlso rears its head as No such property 'default' of undefined.\nTroubleshooting steps\n\nCheck you are importing the backend and renaming any default exports.\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { SomeImaginaryBackendWithNamedExports } from 'some-imaginary-backend';Generally, make sure you are importing the backend correctly. If it does not\nprovide Typescript definitions, you might have to read the documentation or\nbrowse the source code.\n\nMake sure in your root Angular module (usually app.module.ts) you import\nDndModule.forRoot({ backend: MyBackend }) instead of plain DndModule.\n\n\nI get Error encountered resolving symbol values statically. Calling function 'default' with AOT enabled.\nMake sure you are following the special instructions for assembly-required backends\nlike MultiBackend or any backend that allows SomeBackend({ optionsHere: true }),\nlike TouchBackend. See above.\nIn the spec callbacks, my component doesn't have any properties, and it can't call this.method()!\nMake sure you use the arrow function syntax (() =>) in your specs so this will refer to your component. Example:\npaperCount = 3;\nlimitedSupplyOfPaper = this.dnd.dragSource('PAPER', {\n  // use shorthand for one-liners that return a value\n  canDrag: () => this.paperCount > 0,\n  endDrag: monitor => {\n    if (monitor.didDrop()) {\n      this.paperCount--;\n    }\n  },\n});This demo shows comprehensively what this refers to\nin arrow functions vs regular ones. A sufficiently advanced editor shouldn't\nshow any completions at this.| in a regular function, as it will resolve the\ntype of this to be any.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/guide.html":{"url":"additional-documentation/guide.html","title":"additional-page - Guide","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen using @ng-dnd, you follow this general pattern:\n\nCreate a connection and specify its behaviour: Creating Connections\nUse directives or methods to connect it to real DOM elements:\nConnecting to DOM\nUse the connection's listen method to listen for relevant state changes, and respond to them:\nMonitoring State\nRemember to destroy the connection in ngOnDestroy(). Refer to part 1\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/guide/1.-creating-connections.html":{"url":"additional-documentation/guide/1.-creating-connections.html","title":"additional-page - 1. Creating connections","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreating connections\nThere are three types of connection.\n\nDragSource\nis for allowing components to be dragged. Create one with\nDndService#dragSource\nusing a\nDragSourceSpec\nand attach it to the DOM\nwith [dragSource]=\"...\".\n\nDropTarget\nis for allowing components to be dragged. Create one with\nDndService#dropTarget\nusing a\nDropTargetSpec\nand attach it to the DOM\nwith [dropTarget]=\"...\".\n\nDragLayer\nis an advanced feature that allows you to implement your own\ncustom drag previews. Create one with\nDndService#dragLayer,\nbut you don't attach them to the DOM, you simply listen for changes.\n\n\nAll three of them have the same lifecycle, and all three of them offer a\n.listen() function, which allows you to listen to changes. See\nConnectionBase for what they have in\ncommon.\nUsing the DndService to create connections\nFirst, inject\nDndService,\ninto your component.\nconstructor(private dnd: DndService) { ... }Then, use one of the methods\nDndService#dragSource,\nDndService#dropTarget\nto create one and store it as an instance variable, and make sure to tear down\nthe connection in ngOnDestroy.\nsource = this.dnd.dragSource(\"CAT\", {\n  beginDrag: (monitor) => ({ id: this.cat.id })\n  // ...\n});\n// or\ntarget = this.dnd.dropTarget([\"CAT\", \"ZEBRA\"], {\n  // ...\n});\nconstructor(private dnd: DndService) { ... }\n\nngOnDestroy() {\n  this.source.unsubscribe();\n  // or\n  this.target.unsubscribe();\n}Then, you will want to add some behaviour beyond the default by looking into the\nSpec input for your connection type.\nDestroying Connections\nAll three types of connection need to be destroyed when your component is\ndestroyed. If you don't, you will have strange problems.\nThe easy way is to call\n.unsubscribe() on the\nconnection object in ngOnDestroy.\nngOnDestroy() {\n    this.source.unsubscribe();\n    this.target.unsubscribe();\n    this.layer.unsubscribe();\n    // neat. we're done.\n}\nBut I have ten other subscriptions!\nIn situations where your component has a lot of subscription logic to\nmaintain, there are more powerful ways of unsubscribing to many things at once.\nYou can create an RxJS Subscription object in your component, and call\nSubscription.add(conn) with your connection. There is a convenience parameter\non each of the DndService methods which will do this for you.\nimport { Subscription } from 'rxjs';\n\n// ...\n\nsubs = new Subscription();\n\nsource = this.dnd.dragSource({\n  // ...\n}, this.subs);\n\ntarget = this.dnd.dragSource({\n  // ...\n}, this.subs);\n\n// ...\n\nngOnInit() {\n    // subscribe to lots of things here\n    this.subs.add(myService.subscribe(...));\n    this.subs.add(myService.subscribe(...));\n    this.subs.add(myService.subscribe(...));\n    this.subs.add(myService.subscribe(...));\n}\nngOnDestroy() {\n  // This will unsubscribe everything, including source and target\n  this.subs.unsubscribe();\n}(It is not recommended to have a large number of drag sources and drop targets\nattached to a single component, especially not in a variably-sized array,\nsimply because that is poor component structure. Instead, consider creating a\ncomponent that handles a single piece of dragging logic, and use an *ngFor over\nthe whole component.)\nNext: Connecting to DOM.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/guide/2.-connecting-to-dom.html":{"url":"additional-documentation/guide/2.-connecting-to-dom.html","title":"additional-page - 2. Connecting to DOM","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConnecting sources and targets to real DOM elements\nOnce you have created a connection, it is most useful when connected to a real\nDOM element.\nMaking a DOM element draggable\nThis means that events fired inside the element's bounding rectangle will start\na drag. Use DragSourceDirective to do this. It's as simple as:\ndrag mesource = this.dnd.dragSource('DRAGME', {\n  beginDrag: () => ({ name: 'Jones McFly' }),\n  // other DragSourceSpec methods\n});\n// constructor, unsubscribe, etcThen, investigate using\nDragSourceSpec\nto customise the behaviour.\nMaking a DOM element into a drop target\nThis means your element will react to items being hovered or dropped within its\nbounding rectangle.\ndrop on metarget = this.dnd.dropTarget('DRAGME', {\n  drop: monitor => {\n    console.log('dropped an item:', monitor.getItem()); // => { name: 'Jones McFly' }\n  },\n});\n// constructor, unsubscribe, etcThen, investigate using\nDropTargetSpec\nto customise the behaviour.\nDrag previews\nThis is a feature unique to the HTML5 backend. If you are using another\nbackend, you will need a Drag Layer (see below) to render anything that follows\nthe mouse.\nBy default, a static screenshot of the original [dragSource] element will form\na drag preview and follow the mouse around.\nUsing a different element as the preview source\nIf you want another element to be the source of the preview, you can use the\n[dragPreview]=\"source\" directive.\nIf you place a DragPreviewDirective on a different element than the\n[dragSource], and pass the same DragSource connection to it, the\npreview element will take over the job of posing for the preview screenshot.\nUsing a 'drag handle'\nThis is a common use of custom drag previews, where a box with a smaller handle\nwithin it is only draggable from the handle. This is useful for moving\ninteractive blocks of UI (e.g.  elements) around the screen, without\ntouching the inputs / selecting text / making unwanted changes.\n\nAttach [dragSource]=\"source\" to the handle.\nAttach [dragPreview]=\"source\" to the overall box being dragged.\nAs always, you may consider applying CSS cursor: move or cursor: grab or\nsimilar to the handle, to make sure users can discover what the handle is\nfor.\n\nUsing an image preview\n\nCreate an image element with const img = new Image(); img.src = \"...\";\nUse img.onload = () => { ... } to wait for it to load. Inside the onload\ncallback, run someDragSourceConnection.connectDragPreview(img).\n\nSee DragSource.connectDragPreview and DragPreviewOptions for options.\nNext: Monitoring State.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/guide/3.-monitoring-state.html":{"url":"additional-documentation/guide/3.-monitoring-state.html","title":"additional-page - 3. Monitoring State","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMonitoring State\nHow to change your template depending on the drag state\n\nTake any connection object, like DropTarget\nCall .listen() with a function that returns what information you want to\nmonitor\nSave the resulting Observable to an instance variable in your component\nUse the observable via the | async pipe to render alternate content in\nyour template.\n\nFor example:\n\n  drop cats here\n.cat-target {\n  background: #eee;\n}\n.cat-target--hovering {\n  background: lightgoldenrodyellow;\n}target = this.dnd.dropTarget('CAT', {\n  drop: monitor => {\n    console.log('dropped a cat');\n  },\n});\n\n// this is a very useful combination on a drop target,\n// which expresses 'hovering over' + ('same type' + 'DropTargetSpec.canDrop returned true')\n// you almost always want to use the combination rather than isOver on its own\nhovering$ = this.target.listen(m => m.isOver() && m.canDrop());What can you listen to?\nEach type of connection gets a different set of information available on the\nmonitor. They are laid out in these interfaces:\n\nDragSourceMonitor\nDropTargetMonitor\nDragLayerMonitor\nAll three derive from MonitorBase\n\nOptimisation\nNote that all three monitors have very rapidly-changing information available on\nthem, such as the current viewport-mouse offset. The .listen() functions will\noptimise component updates for you. You don't want to:\n\nSubscribe to more properties than you need. This hinders performance.\nSubscribe to the entire monitor object. It will only fire once, and then\nnever again, because the monitor object itself is the same each time.\n\nThe implementation of listen() includes an implementation of RxJS'\ndistinctUntilChanged that also optimises for JS Objects with the same keys\nbut different values. The following two examples fire exactly as often:\nisDraggingPlain$ = this.source.listen(m => m.isDragging());\nisDraggingObj$ = this.source.listen(m => ({ isDragging: m.isDragging() }));This is helpful if you have a lot of properties to listen to and wish to\nreduce the number of | async pipes in your code, or if you want to copy\nsome react-dnd code.\nMaking decisions in the Spec based on current drag state\nThe other place you get access to a monitor is in the callbacks in each Spec.\nMonitors carry some information only relevant and usable inside these callbacks.\nThose methods are documented in the monitor interfaces, and particularly useful\nmethods are highlighted in each of the Spec callbacks, such as\nDropTargetSpec.drop.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/chess-tutorial.html":{"url":"additional-documentation/chess-tutorial.html","title":"additional-page - Chess Tutorial","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChess Tutorial\nIn this tutorial, we're building a tiny chess game, with one knight on the\nboard. It's an Angular-specific translation of the original react-dnd\ntutorial. The discussion about how to break down this game into\ncomponents is worth reading the original for. We will carry on implementing the\nthree components:\n\nKnightComponent, responsible for rendering one knight piece\nSquareComponent, just one black or white square on the board\nBoardComponent, 64 squares.\n\nThis tutorial assumes you are familiar with the basics of Angular (version 2+).\nIt also assumes you have read the Quickstart guide, and have attached the\nDndModule and the HTML5 backend. Complete source code is available on\nGitHub, in four commits: one, two,\nthree, four, the last of which is the finished\nproduct. You can play with a live demo.\nBasic chess visuals\nWe'll build the KnightComponent first. It is very simple, just a span with a Unicode\nknight character in it.\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-knight',\n  template: `♘`,\n  styles: [\n    `\n      span {\n        font-weight: 400;\n        font-size: 54px;\n        line-height: 70px;\n      }\n    `,\n  ],\n})\nexport class KnightComponent {}Add this component to your module's declarations section, and put\n somewhere on your page.\n\nNext, we will implement SquareComponent. It is responsible only for changing the colour\nof the background and foreground depending on a black input, and rendering\nwhatever was passed to it inside its tags. Make a SquareComponent, add it to\nyour module, and include the following very simple HTML template:\n\n  \nIn the body of the component class, add an input for whether the square should\nbe black or not:\n@Input() black: boolean;Then implement getStyle() by reading this property.\ngetStyle() {\n    return this.black\n        ? { backgroundColor: 'black', color: 'white' }\n        : { backgroundColor: 'white', color: 'black' }\n}Note that by attaching these styles directly via [ngStyle], they are not\naffected by Angular's view encapsulation, so color will apply to any child\ncomponents as well. You could achieve the same by using classes and CSS and\n::ng-deep or turning view encapsulation off, but [ngStyle] is good enough\nfor us.\nThen, we want SquareComponent to take up all the space available to it. This\nway, Square can be arbitrarily large, and we don't have to be concerned with how\nbig the whole board is going to be. Include the following in a styles block,\nor a linked CSS file.\n:host,\ndiv {\n  display: block;\n  height: 100%;\n  width: 100%;\n  text-align: center;\n}At this point, you can render one square with a knight in it, like so:\n\n  \n\nIf you're paying attention, you'll notice that height: 100% doesn't really\nmean anything as none of the parent divs have a height to be 100% of, but it\nwill make sense later when we put the Square in a div that has an absolute\nheight.\nThen, let's build the board. Start by building out a component that just renders\none square.\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-board',\n  template: `\n    \n      \n        \n      \n    \n  `,\n})\nexport class BoardComponent {}Now, we need to render 64 of them. We will need an *ngFor, but Angular isn't\nvery good at for loops, so we have to make an array of 64 items.\n\n  \n    \n  \n// ...\nexport class BoardComponent {\n  sixtyFour = new Array(64).fill(0).map((_, i) => i);\n}\nThen, you just have a lot of black squares in a vertical list. Not very chess-y.\nTo make it an 8x8 grid, we are going to wrap them all in a , and use the cool new CSS feature, CSS Grid. Make sure you are\nusing a modern browser. Apply this style to the wrapping .board:\n.board {\n  width: 100%;\n  height: 100%;\n  border: 1px solid black;\n  display: grid;\n  grid-template-columns: repeat(8, 12.5%);\n  grid-template-rows: repeat(8, 12.5%);\n}For brevity's sake you could just set .board to a fixed width and height\nof 560px. I added a ContainerComponent, just to specify that size, to keep\nthe board independent of where it will be placed. At this point, you will have\nan 8x8 board, but it still doesn't quite look like chess.\n\nMaking the chessboard pattern and placing one knight on the board\nWe're going to need a way to express coordinates on the board. Define a new\ninterface, to hold x and y coordinates.\nexport interface Coord {\n  x: number;\n  y: number;\n}Save it in a new file, coord.ts, and import it into your Board component file.\nThen, we need to convert [0..63] (the indices of the *ngFor) to Coord\nobjects.\nexport class Board {\n    // ...\n    xy(i): Coord {\n      return {\n          x: i % 8,\n          y: Math.floor(i / 8)\n      }\n    }\n}\nYou can then quite easily go from Coord to whether the square is black or not:\n    // ...\n    isBlack({ x, y }: Coord) {\n        return (x + y) % 2 === 1;\n    }Then, pass the result to each SquareComponent, and render only one KnightComponent in the top\nleft:\n\n  \n    \n  \nAnd look at that, we have a chess board with one knight.\n\nMaking the knight move around\n\nAt this point, your code should look like this commit. You can\nstart fresh from there if you want.\n\nWe can clearly represent the position of a knight in one Coord object. You\ncould store this on the BoardComponent itself:\n knightPosition: Coord = { x: 2, y: 5 };But we're going to want to read this elsewhere and drive the game logic from it,\nand we don't want all the game logic to be trapped inside the BoardComponent.\nSo, create a GameService, and represent the changing position of the knight\nwith an RxJS BehaviorSubject. This is an ultra-lightweight way of\nbuilding an @ngrx-style Store without any boilerplate. It allows us to\n'broadcast' updates to the knight's position to any interested components.\nLike any Subject, BehaviourSubject can be used as an Observable, and\ncomponents can subscribe to it with the | async pipe. But unlike a regular\nSubject, it can also have an initial value, and will replay the most recent\nvalue to any new subscribers. This is exactly what we want.\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Coord } from './coord';\n\n@Injectable()\nexport class GameService {\n  knightPosition$ = new BehaviorSubject({ x: 2, y: 5 });\n\n  moveKnight(to: Coord) {\n    this.knightPosition$.next(to);\n  }\n}As you can see, this is a very simple service. Inject it into your\nBoardComponent, and let's put the Knight where the GameService\nsays it should go.\n\nknightPosition$ = this.game.knightPosition$;\nconstructor(private game: GameService) { }This works, but it's very hard to read. A better solution would be to put the\nentire *ngFor section in the scope of one subscription. You can do that\nwithout introducing a redundant , by using  and a fancy\ntrick: since knightPosition$|async is always truthy, you can put it in an\n*ngIf and give the result a name using the *ngIf=\"AAA as BBB\" syntax. Here's\nthe entire template:\n\n  \n    \n      \n         \n      \n    \n  \nThe resulting template is much clearer.\nNow that we have a knightPosition$ and even a GameService.moveKnight()\nfunction, we can hook up a click event on each  to move the knight\naround the board. We're going to remove it later, so just throw it in the\nBoardComponent:\nhandleSquareClick(pos: Coord) {\n  this.game.moveKnight(pos);\n}Click around, and your noble KnightComponent will follow, even though he is breaking\nthe rules. So, let's add the rules. Amend the GameService to include\na canMoveKnight function, based on the current position and a prospective\nposition. You can store the currentPosition by subscribing internally to\nknightPosition$ and writing out each new value into an instance variable.\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Coord } from './coord';\n\n@Injectable()\nexport class GameService {\n  knightPosition$ = new BehaviorSubject({ x: 2, y: 5 });\n  currentPosition: Coord;\n\n  constructor() {\n    this.knightPosition$.subscribe(kp => {\n      this.currentPosition = kp;\n    });\n  }\n\n  moveKnight(to: Coord) {\n    this.knightPosition$.next(to);\n  }\n\n  canMoveKnight(to: Coord) {\n    const { x, y } = this.currentPosition;\n    const dx = to.x - x;\n    const dy = to.y - y;\n\n    return (Math.abs(dx) === 2 && Math.abs(dy) === 1) || (Math.abs(dx) === 1 && Math.abs(dy) === 2);\n  }\n}Amend handleSquareClick to check the rules before executing the move:\nhandleSquareClick(pos: Coord) {\n  if (this.game.canMoveKnight(pos)) {\n    this.game.moveKnight(pos);\n  }\n}And voilà, your knight won't execute an illegal move. We will be replacing this\nclick handler in just a moment, but we have separated the game logic out, so we\ncan reuse those two functions.\nImplementing drag and drop\n\nAt this point, your code should be look like this commit.\n\nTake a moment to think about what we have to work with. We have:\n\nA KnightComponent which we want to be able to drag,\nMany SquareComponents on which he could be dropped,\nA way to express that state change (GameService.moveKnight),\nAnd a way to compute where we can drop him (GameService.canMoveKnight).\n\nOur strategy for implementing drag and drop is this:\n\nMake the knight draggable\nTurn all the squares into drop targets\nOnly allow drops into squares where canMoveKnight returns true\nOn each successful drop, call moveKnight, and Angular will re-render with\nthe new state.\nAdd some extra visuals to guide the interaction\n\nIf you have used other drag and drop libraries, this may seem a bit weird --\nwhat happens to the Knight that we're dragging after we drop him? The answer is,\nhe disappears. After step 1, we will have a knight you can pick up, but nothing\ninteresting will happen when we let go, except that the preview will vanish. We\nare going to do steps 3 and 4 on the drop targets, which are notified when you\ndrop something on them.\nPart 1. Make the knight draggable\nFirst, we need a type to describe what we're dragging, so that the squares can\nlisten for knights floating above them. Store a constant string \"KNIGHT\" in\na new file. This is better than typing the same string over and over, and serves\nas a single place where all your different chess piece types are defined.\n// constants.ts\nexport const ItemTypes = {\n  KNIGHT: 'KNIGHT',\n};Then, make your KnightComponent into a drag source.\n\nInject DndService into your KnightComponent\nCreate a dead simple drag source which emits ItemTypes.KNIGHT, and a simple\n{} to represent what's being dragged. We don't need any more information\nthan that, but if you were doing >1 piece, you would have to specify which\nknight was being dragged. This is where you'd do it.\nAttach the drag source to the Knight's DOM element.\nIn ngOnDestroy, unsubscribe the drag source.\n\nHere's all four in one go:\nimport { Component } from '@angular/core';\nimport { DndService } from '@ng-dnd/core';\nimport { ItemTypes } from './constants';\n\n@Component({\n  selector: 'app-knight',\n                   // step 3\n  template: `♘`,\n  styles: [\n    `\n      span {\n        font-weight: 700;\n        font-size: 54px;\n      }\n    `,\n  ],\n})\nexport class KnightComponent {\n  // step 2\n  knightSource = this.dnd.dragSource(ItemTypes.KNIGHT, {\n    beginDrag: () => ({}),\n  });\n\n  // step 1\n  constructor(private dnd: DndService) {}\n\n  // step 4\n  ngOnDestroy() {\n    this.knightSource.unsubscribe();\n  }\n}Try dragging your little knight, and you'll find that you can. But the\ninteraction is slightly confusing - you can't tell at a glance that the knight\nis conceptually in-flight, it just looks like there are two knights. So let's\nlisten to whether we are dragging the knight, and make the stationary one look\ndifferent while we are.\n\nUse the DragSource.listen and DragSourceMonitor.isDragging methods to\nget an observable isDragging$ on your KnightComponent.\nUse that observable in your template to change styles\n\n// component\n// (this is an Observable)\nisDragging$ = this.knightSource.listen(monitor => monitor.isDragging());\n♘/* in the style block */\n.dragging {\n  opacity: 0.25;\n}Now, the knight on the board will be a bit transparent when you've picked it up.\nYou could set it to opacity: 0, but in chess, players like to know where the\npiece came from. @ng-dnd makes no assumptions about how to render\nany elements, so you can always customise their appearance at any stage of the\ndrag and drop process.\nPart 2: Make the squares into drop targets\nBecause canMoveKnight has to be computed once per square, each square is going\nto have to know where it is on the board. However, the SquareComponent is\nperfectly good at what it does. We don't want to ruin a good thing. Let's wrap\nit with another component, BoardSquareComponent, that will handle the drag and drop,\nand leave the black and white rendering to SquareComponent. This is a basic wrapper\nwhich preserves the size of the underlying squares:\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-board-square',\n  template: `\n    \n      \n        \n      \n    \n  `,\n  styles: [\n    `\n      :host,\n      .wrapper {\n        display: block;\n        position: relative;\n        width: 100%;\n        height: 100%;\n      }\n    `,\n  ],\n})\nexport class BoardSquareComponent {\n  @Input() position: Coord;\n  get black() {\n    const { x, y } = this.position;\n    return (x + y) % 2 === 1;\n  }\n}Add it to your module, and replace the  in the BoardComponent\ntemplate with this:\n\n  \nThen, we're going to add a drop target to BoardSquareComponent and attach it\nto that wrapper div. It's very similar to the drag source.\n\nInject DndService\nCreate a drop target\nAttach it to the DOM\nUnsubscribe it in ngOnDestroy.\n\nimport { Component, Input } from '@angular/core';\nimport { DndService } from '@ng-dnd/core';\nimport { ItemTypes } from './constants';\n\n@Component({\n  selector: 'app-board-square',\n  template: `\n                         \n    \n      \n        \n      \n    \n  `,\n  styles: [\n    `\n      :host,\n      .wrapper {\n        display: block;\n        position: relative;\n        width: 100%;\n        height: 100%;\n      }\n    `,\n  ],\n})\nexport class BoardSquareComponent {\n  @Input() position: Coord;\n  get black() {\n    const { x, y } = this.position;\n    return (x + y) % 2 === 1;\n  }\n\n  // step 2\n  target = this.dnd.dropTarget(ItemTypes.KNIGHT, {});\n\n  // step 1\n  constructor(private dnd: DndService) {}\n\n  // step 4\n  ngOnDestroy() {\n    this.target.unsubscribe();\n  }\n}Parts 3 and 4: make the knight move around on drop\nNext up is to incorporate the game logic, and to actually move the knight. We're\ngoing to use two hooks in the drop target: DropTargetSpec.canDrop and\nDropTargetSpec.drop. We have already done the heavy lifting for both in\nGameService. Inject GameService in the constructor, and incorporate its\nmethods.\ntarget = this.dnd.dropTarget(ItemTypes.KNIGHT, {\n    canDrop: monitor => {\n        return this.game.canMoveKnight(this.position);\n    },\n    drop: monitor => {\n        this.game.moveKnight(this.position);\n    }\n});\n\nconstructor(private dnd: DndService, private gme: GameService) {}Now you should be able to drag your knight around the board!\nPart 5: Extra visuals\nWe have some guidance already about where you can drop a knight. The mouse\ncursor gets a different icon depending on whether you can or not. But usually,\nthis is not enough of an indicator. Good UI means making difficult things\nobvious and learnable. Someone who has never seen a knight should be able to\nfigure out where one can go.\nIn that spirit, we will change the colour of the squares while dragging,\ndepending on whether they represent a valid move, and colour the square you're\nhovering over either red or green depending on whether dropping would result in\na move.\nThe procedure is almost identical to what we did for the Knight earlier on.\n\nUse the DropTarget.listen, DropTargetMonitor.canDrop and\nDropTargetMonitor.isOver methods to observe changes in drag state\nUse observables in your template to change styles on an overlay div.\n\n// We are assuming RxJS 5.5+ here, but you can use plain Observable.map\nimport { map } from 'rxjs/operators';\n\n// template:\n  \n    \n  \n  \nexport class BoardSquareComponent {\n  // ...\n  target = this.dnd.dropTarget(ItemTypes.KNIGHT, {\n    // ...\n  });\n\n  collected$ = this.target.listen(m => ({\n    canDrop: m.canDrop(),\n    isOver: m.isOver(),\n  }));\n\n  showOverlay$ = this.collected$.pipe(map(c => c.isOver || c.canDrop));\n\n  overlayStyle$ = this.collected$.pipe(\n    map(coll => {\n      let { canDrop, isOver } = coll;\n      let bg: string = 'rgba(0,0,0,0)';\n      if (canDrop && isOver) {\n        bg = 'green';\n      } else if (canDrop && !isOver) {\n        bg = 'yellow';\n      } else if (!canDrop && isOver) {\n        bg = 'red';\n      }\n      return {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height: '100%',\n        width: '100%',\n        zIndex: 1,\n        opacity: 0.5,\n        backgroundColor: bg,\n      };\n    })\n  );\n\n  // ...\n}Here's what it looks like:\n\nLastly, we're going to customize the drag preview (that little knight that\nfollows the mouse around). @ng-dnd has some very powerful ways to\ncustomize this, but we're going to use a simple image. It's quite simple:\n\nCreate an Image\nWait for it to load\nConnect it to the knightSource as a drag preview\n\nWe can do this in just a few lines.\n// ...\nexport class KnightComponent {\n  // ...\n\n  ngOnInit() {\n    const img = new Image();\n    img.src = // ... long 'data:image/png;base64' url\n      // regular 'https://' URLs work here too\n      img.onload = () => this.knightSource.connectDragPreview(img);\n  }\n}For that long URL, see this file.\nThen we get a funky horse as our preview.\n\nHave a go with the live demo here.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/translating-react-code.html":{"url":"additional-documentation/translating-react-code.html","title":"additional-page - Translating React Code","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTranslating React Code\nThere are many code examples and libraries on the web written for react-dnd,\nthe most important of which is the actual react-dnd\ndocumentation. In the\ninterest of making them useful or at least understandable, this library presents\na fairly similar API to the original. There are, of course, some differences\nmandated by the style and limitations of React and Angular. We will illustrate\nthis with the react-dnd DragSource compared to @ng-dnd's\nDndService.dragSource(). Here are the original API\ndocs on\nDragSource; the following is a small but complete example for a quick\nreference. If you know how to use react-dnd already, then this should show you\nmost of it. If you don't know react-dnd, this will help you read the example code demos in the react-dnd documentation.\nHere's a basic example in React:\nlet itemSourceSpec = {\n  beginDrag: (props, monitor) => {\n    return { someProperty: props.someProperty };\n  },\n  endDrag: (props, monitor, component) => {\n    if (monitor.didDrop()) {\n      component.fireAction(monitor.getItem());\n    }\n  },\n};\n@DragSource('ITEM', itemSourceSpec, (connect, monitor) => ({\n  connectDragSource: connect.connectDragSource(),\n  isDragging: monitor.isDragging(),\n}))\nexport class MyComponent extends React.Component {\n  fireAction() {\n    /* ... */\n  }\n  render() {\n    const { someProperty, isDragging } = this.props;\n    return connectDragSource(\n      \n        {someProperty}\n        {isDragging ? 'I am being dragged now' : null}\n      \n    );\n  }\n}And here's the Angular translation:\n@Component({\n  template: `\n    \n      {{ someProperty }}\n       I am being dragged now \n    \n  `,\n})\nexport class MyComponent {\n  @Input() someProperty: string;\n  itemSource = dnd.dragSource('ITEM', {\n    beginDrag: monitor => {\n      return { someProperty: this.someProperty };\n    },\n    endDrag: monitor => {\n      if (monitor.didDrop()) {\n        this.fireAction(monitor.getItem());\n      }\n    },\n  });\n  collected$ = this.itemSource.listen(monitor => ({\n    isDragging: monitor.isDragging(),\n  }));\n  constructor(private dnd: DndService) {}\n  fireAction(item) {\n    /* ... */\n  }\n  ngOnDestroy() {\n    this.itemSource.destroy();\n  }\n}As you can see, the two are very similar. You should be able to take most\nReact/react-dnd examples and translate them quite directly into Angular. You\ncan almost copy and paste some parts.\n1. Biggest difference: Connections instead of Higher-Order Components\nThere is a React concept of 'props', similar to Input() in Angular. The\nprimary difference relevant to us is that in React you can create a 'wrapper' or\n'higher-order' component that will pass all of its props to the one it is\n'wrapping' or 'decorating', with extra behaviour or new props added. This is how\nreact-dnd works: wrap your component with @DragSource(type, spec, collect: (connect, monitor) => Object), and the output of the collect function is\ninjected into your component's props.\nIn Angular, we run everything inside your component, using methods on an\ninjected DndService to create connections. Connections are a go-between\nfor subscribing to the global drag state and can be connected to DOM\nelements. This difference is typical of the React Way and the Angular Way. You\ncan create more than one connection for a component, to accomplish the same\nthing as composing multiple decorators in react-dnd.\nThere are five other ways this approach makes for slightly different-looking but\nvery similar-functioning code.\n2. You must destroy the connection object when you are done with it.\nIn React, this is managed by the wrapper component. In Angular, you have to do\nit yourself. See ConnectionBase.unsubscribe.\n3. No props or component arguments in the spec callbacks\nThere are no props in Angular, as discussed above. Instead, all inputs to a component\nor properties relevant to the template are declared on the component class.\nTherefore, using this is appropriate instead. That also makes component\nmoot, since it would also refer to this. Therefore, all of the callbacks on the\ntwo *Spec interfaces have only monitor as an argument.\nOne thing to be aware of is that to access this in an function you pass\nelsewhere, you must use Arrow notation: (arrow) => this.notation; for your\nspec callbacks.\n4. Information about current drag state comes through an Observable\nIn react-dnd the collect((props, monitor) => {}) function supplies the\ncomponent props 'from above'. In Angular (here, DragSource.listen), the\nlibrary gives you an Observable you can subscribe to in your template. The\nexample above creates an Object { ... } and subscribes to it all in one go\n(the internals make this efficient), but you are free to do listen(m => m.isDragging()), with one subscription for each interesting value. You might\ncombine information from two different connections using\nObservable.combineLatest, for example.\nI found the terms connect and collect far too similar and confusing, so\nI renamed collect to listen.\n5. connectDragSource() (etc.) functions vs Angular directives\nIn the example above, connect.connectDragSource() returns a function that will\nlink up a particular part of the JSX template's DOM to the wrapper component. To\naccomplish the same thing in Angular we must connect some DOM from the template\nto a Connection object. The Angular Way to do this is with a directive,\nwhich connects to the DOM via its injected ElementRef. The Angular translation\nabove uses [dragSource]=\"itemSource\" on the same part of the template as the\nReact code does.\nSome React examples will have two different drag sources + associated connectors\n(on different DOM elements), or one source and one connectDragPreview. Angular\ncan do both patterns with directives, because each directive is linked to one Connection.\n6. Can't supply a dynamic type via a (props) => props.type callback, use setType instead\nImagine you want to make a component draggable based on type(s) specified on the\ncomponent inputs.\nreact-dnd allows strings and ES6 Symbols in the type argument. But you can\nalso pass a function of (props) => string|symbol; in this way, your item\ntypes can depend on the inputs to your component, and even change over time when\nthe props change. It's not a plain asynchronous callback like the rest of the\nspec, it is called when the props change on the decorating component, before any\nasynchronous drag operations start. Angular doesn't have a way for arbitrary\nobjects to listen to ngOnChanges(), so we have to do it manually.\nYou can supply a default type, or null, and update it in later as the\n@Input() property is populated. If you supply null, @ng-dnd will\ndefer connecting the DOM and the subscription to the monitor until this is\ndone. See DragSource.setType for more information.\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/testing.html":{"url":"additional-documentation/testing.html","title":"additional-page - Testing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTesting\nUsage with Jest\nSee The React DnD testing\nguide for details about\nhow to use dnd-core and react-dnd-test-backend with Jest. In particular, you\nwill need to configure the moduleNameMapper as described there.\nTesting Components in Isolation\nThe Angular way of supplying drag state to components is not as easily testable\nas the React way. Currently it is not easy to isolate a component's rendering\nfrom the drag sources, drop targets and drag layers it listens to.\nThe Test Backend\nReact DnD offers a test backend that does not require the DOM, and offers an\nAPI for easy simulation of drag and drop events. This is useful for testing an\nentire drag and drop interaction. (Imagine trying to construct the exact mouse\nevents that represent a drag, just to do basic tests!) It is also useful as a\nlightweight no-op backend if you do not need to test the drag and drop\ninteraction.\nInstall it with:\nyarn add -D react-dnd-test-backendExample usage (example component defined below):\n// Import the test backend\nimport { createTestBackend, TestBackend } from 'react-dnd-test-backend';\n// We will need to find the DragDropManager to access the backend through\n// dependency injection\nimport { DndModule, DRAG_DROP_MANAGER } from '@ng-dnd/core';\n\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\ndescribe(MyComponent.name, () => {\n  let component: MyComponent;\n  let fixture: ComponentFixture;\n\n  // Use this backend to drive drag and drop interactions\n  let backend: TestBackend;\n\n  // We will store the handler ID for each, to pass to the test backend.\n  let source: any;\n  let target: any;\n\n  // MyComponent should render differently while dragging\n  const draggingClassApplied = () => {\n    return fixture.debugElement.query(By.css('.dragging')) != null;\n  };\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        // supply the test backend when creating the testing module\n        DndModule.forRoot({ backend: createTestBackend }),\n      ],\n      declarations: [MyComponent],\n    });\n  }));\n\n  beforeEach(() => {\n    // grab the manager\n    const manager = TestBed.get(DRAG_DROP_MANAGER);\n    // grab the backend off the manager\n    backend = manager.getBackend();\n    fixture = TestBed.createComponent(MyComponent);\n    component = fixture.componentInstance;\n    // the source and target handler IDs are available after change\n    // detection\n    fixture.detectChanges();\n    source = component.source.getHandlerId();\n    target = component.target.getHandlerId();\n  });\n\n  it('should drag and then drop', () => {\n    // pick up the drag source\n    backend.simulateBeginDrag([source]);\n\n    // check that it rendered differently\n    fixture.detectChanges();\n    expect(draggingClassApplied()).toBeTruthy();\n\n    // hover over the target\n    backend.simulateHover([target]);\n    // drop over the most recently hovered target(s)\n    backend.simulateDrop();\n    // complete the interaction\n    backend.simulateEndDrag();\n\n    fixture.detectChanges();\n    expect(draggingClassApplied()).toBeFalsy();\n  });\n});import { Component } from '@angular/core';\nimport { DndService } from '@ng-dnd/core';\n@Component({\n  template: `\n    \n    \n  `,\n})\nclass MyComponent {\n  source = this.dnd.dragSource('TEST', {\n    beginDrag: () => ({}),\n  });\n  target = this.dnd.dropTarget('TEST', {});\n  isDragging$ = this.source.listen(m => m.isDragging());\n  constructor(private dnd: DndService) {}\n  ngOnDestroy() {\n    this.source.unsubscribe();\n    this.target.unsubscribe();\n  }\n}\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
